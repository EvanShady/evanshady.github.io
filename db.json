{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1560240006687},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1560240006687},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1560240006687},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1560240006690},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1560240006690},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1560240006690},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1560240006690},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1560240006690},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1560240006690},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1560240006690},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1560240006690},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1560240006690},{"_id":"themes/next/_config.yml","hash":"a270dc1f99fb0bb1f1a3fa89a0b0a31faa52bdb0","modified":1560240126940},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1560240006690},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1560240006690},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1560240006697},{"_id":"source/_posts/Class.md","hash":"907c12aa251135aa28ad1e64b141148d9cd2fb49","modified":1560239395970},{"_id":"source/_posts/Code.md","hash":"59ff11fded3ec24fd18f139a2d0f96df70b144d1","modified":1560239395970},{"_id":"source/_posts/JustATest.md","hash":"2abc07297fd2f9079502cea5a253d1f052e284d6","modified":1568106514087},{"_id":"source/_posts/a.md","hash":"63271ddbbceb6d93da6b6ff450082de526056f87","modified":1572956902204},{"_id":"source/_posts/Noteslinux1.md","hash":"b4a4f3610ef3bf58cdde5a546e03c0b14235c164","modified":1568805395347},{"_id":"source/_posts/C-Book.md","hash":"5918dc8f8614554235863240e2da667d3f29a3c3","modified":1566305197251},{"_id":"source/_posts/c-Notes.md","hash":"62243885f10020c147bcd5f2449375a36d82310d","modified":1568272773334},{"_id":"source/_posts/constellation.md","hash":"cdf8536f3172f5390683bbd3b442ea102cb3cccd","modified":1568272739460},{"_id":"source/_posts/hello-world.md","hash":"c10282e1312d91f0e1dc8bba0e59486443cfa5b5","modified":1568106684860},{"_id":"source/_posts/file.md","hash":"206e96fee38e676acedcc5ce70e1be8816b09e05","modified":1568265150680},{"_id":"source/_posts/i3.md","hash":"5e17c974d513fb948199253e0a92b921a07be468","modified":1569233398297},{"_id":"source/_posts/java.md","hash":"9b14a0bb01953f1d6772769b5384703347e0f13f","modified":1572954713222},{"_id":"source/_posts/mysql.md","hash":"17a9961d1382f30747ac6702936447ba2395f6d4","modified":1572937396296},{"_id":"source/_posts/mysql0.png","hash":"43a6a391555e4e911cfbf1c43bb8b87ba69e48d0","modified":1572355167681},{"_id":"source/_posts/tar.md","hash":"b8f913bbb9f0df4e47396b149204f315a0d854da","modified":1568106574814},{"_id":"source/_posts/test-1.md","hash":"027eff4075eae7aacb7d5f6a48c0befe8a9f0bfe","modified":1568272603680},{"_id":"source/_posts/test.md","hash":"6e5c3fb05074d92e7a32eee35191d38c538f11da","modified":1568272556084},{"_id":"source/_posts/test2.md","hash":"b01d29f698750557b16f16046b2095b911c77428","modified":1568106737820},{"_id":"source/_posts/小萝莉.md","hash":"4d936c74732b6aa2a64a37a75859e1d57d1bb1a4","modified":1570026872563},{"_id":"source/_posts/qt.md","hash":"b6873455a9fb498266b975bebf158eff7eb2bfbb","modified":1568272637430},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1560240006690},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1560240006690},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1560240006690},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1560240006690},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1560240006690},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1560240006690},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1560240006690},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1560240006690},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1560240006690},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1560240006690},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1560240006690},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1560240006690},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1560240006690},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1560240006690},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1560240006690},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1560240006690},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1560240006690},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1560240006690},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1560240006690},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1560240006690},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1560240006690},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1560240006697},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1560240006697},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1560240006697},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1560240006697},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1560240006697},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1560240006697},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1560240006697},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1560240006697},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1560240006697},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1560240006730},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1560240006730},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1560240006730},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006704},{"_id":"source/_posts/C-Book/c-Book.png","hash":"087c1f14d7d19a929961c98be3a94db669d63369","modified":1560433581154},{"_id":"source/_posts/C-Book/c-Book3.png","hash":"68c38dd892d6626178492147bda59c770a36ec93","modified":1560595155777},{"_id":"source/_posts/C-Book/c-Book1.png","hash":"9533241ea8cf7808b485527843d92fdf14fbbbdb","modified":1560594975714},{"_id":"source/_posts/Class/Lpur2.png","hash":"efc22e1a1e37e75baa7b788d1fea94611eacf02b","modified":1560239395970},{"_id":"source/_posts/Code/Code1.png","hash":"54287ffb565af64e9a6bc36941563327f2a43902","modified":1560239395970},{"_id":"source/_posts/C-Book/c-Book4.png","hash":"c2d9847f52f04acbf7be2841091c2d4bca74959a","modified":1570620828947},{"_id":"source/_posts/C-Book/c-Book5.png","hash":"e0345487c68d55dc8dc78f77dc39a865426e26c4","modified":1570969343590},{"_id":"source/_posts/Java/java1.png","hash":"ffad55f4be251da9ee6542ba5dac36a329476b56","modified":1572436487599},{"_id":"source/_posts/Java/java2.png","hash":"2e9e385de23b112b61b2c9e7dd46109c0e94a6e1","modified":1572437095159},{"_id":"source/_posts/Lei/Loperator1.png","hash":"2cc3b8b0c1cff8297cdf91b3ecc038086282869b","modified":1560239395974},{"_id":"source/_posts/Lei/Ljicheng4.png","hash":"df1989a4bcf84daeb4d701d150cda8bff4d781cb","modified":1560239395974},{"_id":"source/_posts/Lei/Lpur1.png","hash":"897fb5af66fbc49e7766454f38c8746e9a4960b2","modified":1560239395974},{"_id":"source/_posts/Lei/Ljicheng2.png","hash":"f4d3d0939a7407f3df7143a35b2d2cc7a54919ed","modified":1560239395974},{"_id":"source/_posts/Lei/Loperator2.png","hash":"3117f8718ce82ed7731451cdb1cfea918f9ee6aa","modified":1560239395974},{"_id":"source/_posts/Lei/Ljicheng3.png","hash":"ce03fcf4cbb87d3e944fa3b93307515b435e45c0","modified":1560239395974},{"_id":"source/_posts/c-Notes/WC.png","hash":"53e4ea434ec5d17e0be7c89c3632c49ac0fb53c1","modified":1560239395974},{"_id":"source/_posts/c-Notes/YC1.png","hash":"1ef204c5da4c7ca802c8a4ee447b3818e866ff08","modified":1560239395974},{"_id":"source/_posts/c-Notes/YC.png","hash":"2c7b67083d726c4f343c3149a168e9a39f137ce1","modified":1560239395974},{"_id":"source/_posts/c-Notes/YC2.png","hash":"dd7989c0644da90ef8c8e369b7025169fdffc280","modified":1560239395974},{"_id":"source/_posts/c-Notes/YC3.png","hash":"8a32fd85ed5096a64b9cb5ddb75c0677320317d0","modified":1560239395974},{"_id":"source/_posts/file/file1.png","hash":"14fbb290eabbb2b088fd610a943876b2d2b36c05","modified":1560239395974},{"_id":"source/_posts/c-Notes/YC5.png","hash":"809b91cc0157e727c5ca4147765cc1a3b8b73e28","modified":1560239395974},{"_id":"source/_posts/c-Notes/YC4.png","hash":"503622c67c5eaf427b4b08541daa447bffc62d88","modified":1560239395974},{"_id":"source/_posts/i3/crayon_shin_chan-002.jpg","hash":"a10f80a07286a1ca4b029c2f105366eb9a2d41f7","modified":1569230650894},{"_id":"source/_posts/i3/test7.jpg","hash":"7fc88d04627f532bb8c4507ba8ec4a00953e3d62","modified":1569230650894},{"_id":"source/_posts/i3/test2.jpg","hash":"2066cd369e49dba4240797eb0693c74c29ef51e4","modified":1569230650894},{"_id":"source/_posts/i3/头像.jpeg","hash":"348f83e3863f4d36159fdcfde3da05b23c40bc67","modified":1569230650894},{"_id":"source/_posts/i3/test3.jpeg","hash":"009c5f2283ad3999fdb6336e9461331bc790faf9","modified":1569230650894},{"_id":"source/_posts/mysql/mysql3.png","hash":"2e51e7aa390db4cd7b68c3f654c67658019eb5d7","modified":1572355860277},{"_id":"source/_posts/i3/test5.jpeg","hash":"2366bddaf27ba51a74bf3b48b4c94f553897696b","modified":1569230650894},{"_id":"source/_posts/mysql/mysql0.png","hash":"84b39d35d7672b9f503159517892c9b4deb1a695","modified":1572355570826},{"_id":"source/_posts/qt/qt10_ui.png","hash":"e0c36a98266fe765d04c2d64ec024f9353ecd521","modified":1565770768470},{"_id":"source/_posts/qt/qt1.png","hash":"8ccfbcce3b05793c8cc909950cdd003b78c8a8ad","modified":1563418067554},{"_id":"source/_posts/qt/qt3_caidan.png","hash":"cf1cc655315c30cf5496c45dcd4396d3a0b97de9","modified":1565770735437},{"_id":"source/_posts/qt/qt2_hello.png","hash":"45de44b825c02b0ed70b2192cbcc0d07b63a7fd7","modified":1565770731185},{"_id":"source/_posts/qt/qt4_duihua.png","hash":"87123682d26bc7d76a7dc82326ed6221f4be6e32","modified":1565770738425},{"_id":"source/_posts/qt/qt6_ui.png","hash":"9b8e1e3d146d5d77ac3db18a17f4ff00e684d806","modified":1565770749309},{"_id":"source/_posts/qt/qt5_duihua.png","hash":"5193e5b313dc5e24e348474fd828db606018c1dc","modified":1565770744443},{"_id":"source/_posts/qt/qt8_ui.png","hash":"d0ea982a54b735651988c76ad271cd96e677eaaf","modified":1565770755121},{"_id":"source/_posts/qt/qt7_ui.png","hash":"a5c1d2062b823914f0eb02717704f9652c428d6f","modified":1565770752346},{"_id":"source/_posts/qt/qtEvent1.png","hash":"f2ee3a301150ff39b7554a2adad8ca1b33ab18c7","modified":1565770797438},{"_id":"source/_posts/qt/qtEvent.png","hash":"9dcac426770c8cc36f8dcabcb5a72d481ea4c693","modified":1565770793786},{"_id":"source/_posts/qt/qtEvent3.png","hash":"7f875b2546ff43509851b2b6133fafdffe27ccb6","modified":1565770803397},{"_id":"source/_posts/qt/qtEvent2.png","hash":"d5b310f025675faaf46d19f2d589a7a6f493d06f","modified":1565770800201},{"_id":"source/_posts/qt/qtEvent4.png","hash":"cafe6234676b31dfeebbf6c16a04f911504e3b39","modified":1565770806424},{"_id":"source/_posts/qt/qtFILE.png","hash":"316d1b5ed005c30b341dffcd7ba9eb7538e99288","modified":1565770818048},{"_id":"source/_posts/qt/qt_image.png","hash":"e49b6c045f89fbcdb134811284e3dd170aa8829a","modified":1565770639537},{"_id":"source/_posts/qt/qt_paint1.png","hash":"1ce3283b3034dc5361ee646520c401d5704357f8","modified":1565770653917},{"_id":"source/_posts/qt/qt_picture2.png","hash":"6318fcb3e651be37edb34de2c2e791982cad51d1","modified":1565770669005},{"_id":"source/_posts/qt/qt_picture1.png","hash":"afa79f2b9ac9d80e6858959f6ef28076939a127f","modified":1565770664742},{"_id":"source/_posts/qt/qt_pixmap2.png","hash":"f8eb40068fb7d517ecb75f72f5232e71b895cb6d","modified":1565770678091},{"_id":"source/_posts/qt/qt_pixmap.png","hash":"1049ab02c50c73358d02e111890429255be429d0","modified":1565770673919},{"_id":"source/_posts/qt/qt_tcpserven2.png","hash":"4e732580a9526bb19c6cf7d3010beac43e3b0f79","modified":1565770704820},{"_id":"source/_posts/qt/qt_udp.png","hash":"951fe18fdee09ea07f636cb04254c43f97deafd3","modified":1565770708576},{"_id":"source/_posts/qt/qt_udp2.png","hash":"a504b47275948331aecc07ee6c06dcfb952b6872","modified":1565770717366},{"_id":"source/_posts/qt/qtwritefile.png","hash":"082a34a98e1448ad7e9191c5ce5dbfad762a4fa9","modified":1565770827344},{"_id":"source/_posts/tar/tar1.png","hash":"935f3390171658cc0fd30f86d0cfa83375d2ccee","modified":1560239395974},{"_id":"source/_posts/tar/tar.png","hash":"46549e929e679709e4073ccd86fa47c05f92f848","modified":1560239395974},{"_id":"source/_posts/test/a.jpg","hash":"7d0458d48481078303d783a9574cab09e324f60c","modified":1560239395977},{"_id":"source/_posts/小萝莉/sda.jpg","hash":"b905c165bd7022bffd52a5bd8714afc038091a23","modified":1560239395987},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560240006690},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1560240006690},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560240006690},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1560240006690},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1560240006690},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1560240006690},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1560240006694},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1560240006694},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1560240006694},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1560240006694},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1560240006694},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1560240006694},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1560240006694},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1560240006694},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1560240006694},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1560240006694},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1560240006694},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1560240006694},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1560240006694},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1560240006694},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1560240006694},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1560240006694},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1560240006694},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1560240006694},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1560240006694},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1560240006704},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1560240006697},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1560240006697},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1560240006697},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1560240006697},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1560240006697},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1560240006697},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1560240006697},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1560240006697},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1560240006697},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1560240006704},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1560240006704},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1560240006704},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1560240006704},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1560240006704},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1560240006704},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1560240006704},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1560240006704},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1560240006704},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1560240006704},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1560240006704},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560240006704},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1560240006704},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1560240006704},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560240006704},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1560240006704},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1560240006704},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1560240006704},{"_id":"source/_posts/C-Book/c-Book2.png","hash":"4f26607566b1c847bd5fe240eba6a2a460c48e06","modified":1560595029404},{"_id":"source/_posts/Java/java0.png","hash":"eaadc69952a23318e4e0c92c7112cbfb63f3e43d","modified":1572249937073},{"_id":"source/_posts/Noteslinux1/chattr.png","hash":"4e0b0081244ac60cd915af6576cf699d81836e1f","modified":1562578486964},{"_id":"source/_posts/file/file.png","hash":"4493b22e0a3079dd30e8cd3693776936401fc46a","modified":1560239395974},{"_id":"source/_posts/i3/710742.jpg","hash":"8cf708f93f621fe55a5f55f0e5baab2be6b2f11d","modified":1569230650890},{"_id":"source/_posts/mysql/mysql5.png","hash":"61901a7f1d7b9dd8a53ad144529a5f724a473630","modified":1572357144599},{"_id":"source/_posts/qt/qt11_ui.png","hash":"bf20b1b26362eff4d400b9b7e4aa236c26350631","modified":1565770776994},{"_id":"source/_posts/qt/qt12_ui.png","hash":"b52a4b1a6cf7d6fc71079f7e6f7b6412e0d06289","modified":1565770780164},{"_id":"source/_posts/qt/qt9_ui.png","hash":"7f243bb0fe25a1f0ff0248eaa7224331ea78a73c","modified":1565770757835},{"_id":"source/_posts/qt/qt_Stream.png","hash":"64a3969d48dd971cfa80bfe6d64a737f63711093","modified":1565770689709},{"_id":"source/_posts/qt/qt_paint.png","hash":"4f8e137dabfa3d9e1c1f87bff0b8c7b4bb143c51","modified":1565770647025},{"_id":"source/_posts/qt/qt_picture.png","hash":"1f3f631d4e6c68a619c7e1ac9af08406a899a197","modified":1565770658512},{"_id":"source/_posts/qt/qt_tcpfile.png","hash":"ad10452fdea2d1d92d0553a3723916e38e361517","modified":1565770694549},{"_id":"source/_posts/qt/qt_tcpserven1.png","hash":"69cfb3430235954c5b27cbe9040b40dc6f406fa3","modified":1565770701484},{"_id":"source/_posts/qt/qt_udp1.png","hash":"6f55124c81d8c4081404e22862f11a1a0751717f","modified":1565770713036},{"_id":"source/_posts/qt/qt_zhuan1.png","hash":"d9e90d9ab81c29de5372fb4ea000aa903ceac09e","modified":1565770721693},{"_id":"source/_posts/qt/qtzhuan.png","hash":"415f55e2c19bd5b82f69c4c14d782b8aa2441d68","modified":1565770830859},{"_id":"source/_posts/小萝莉/test.png","hash":"5dbdce767c229ce56fda00e932ac1fcdd6fabd17","modified":1560239395987},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006694},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006694},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006704},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006704},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006700},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006700},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560240006700},{"_id":"source/_posts/i3/169068.jpg","hash":"b6ce51c86562895e6636aa200b6626c9b682949b","modified":1569230650880},{"_id":"source/_posts/mysql/mysql2.png","hash":"0ac4f99602aaa11e918726111ea487ef4a2e6fbe","modified":1572355747442},{"_id":"source/_posts/qt/qtEventpainter2.png","hash":"31cb6a8d0b83d2e9f5803e6c89ab72a943170976","modified":1565770813734},{"_id":"source/_posts/qt/qtEventpainter1.png","hash":"aced6e65da772a7fd8cff022c92e929dba1d9e0e","modified":1565770809736},{"_id":"source/_posts/qt/qt_Read.png","hash":"9fff6623d58ca11be5cee7a8715331d1ae34d2b0","modified":1565770681427},{"_id":"source/_posts/qt/qtreadfile.png","hash":"868d517138628a1c6cc8a8bbaf24ad6978aa8dab","modified":1565770823595},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1560240006694},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1560240006694},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1560240006694},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1560240006694},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1560240006694},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1560240006694},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1560240006694},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1560240006694},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1560240006694},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1560240006694},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1560240006694},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1560240006694},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1560240006694},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1560240006694},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1560240006694},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1560240006694},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1560240006697},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1560240006700},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1560240006704},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1560240006704},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1560240006704},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1560240006704},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1560240006700},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1560240006700},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1560240006700},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1560240006704},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1560240006704},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1560240006704},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1560240006704},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1560240006704},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1560240006704},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1560240006704},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1560240006704},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1560240006704},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1560240006704},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1560240006704},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1560240006710},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1560240006710},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1560240006710},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1560240006710},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1560240006707},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1560240006714},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1560240006714},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1560240006714},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1560240006714},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1560240006724},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1560240006724},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1560240006724},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1560240006724},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1560240006724},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1560240006724},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1560240006724},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1560240006724},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1560240006724},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1560240006724},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1560240006724},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1560240006724},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1560240006724},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1560240006724},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1560240006727},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1560240006727},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1560240006727},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1560240006727},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1560240006727},{"_id":"source/_posts/Lei/Ljicheng.png","hash":"c17a6661fc57c34e80850d7781cdd6048777c986","modified":1560239395970},{"_id":"source/_posts/a/a0.png","hash":"978aeb3b521a667bbf6b0758d73258498e08a61e","modified":1572955724288},{"_id":"source/_posts/i3/228568.jpg","hash":"32ca6f63b9817cc872e9c6f278d1c3b4685c1cc9","modified":1569230650884},{"_id":"source/_posts/i3/608422.jpg","hash":"053a7ed987f6e3b65b917aac6a69e57966643269","modified":1569230650887},{"_id":"source/_posts/i3/927682.jpg","hash":"2e6da726afaf01db329886d783aa55fc7b2d313b","modified":1569230650890},{"_id":"source/_posts/mysql/mysql1.png","hash":"700d308f60ba9f7feda8541893a4a11df4d427ce","modified":1572355494094},{"_id":"source/_posts/qt/qt_tcpserven.png","hash":"55a74a8a6c4ab88209820b7a6fb107f114e83dff","modified":1565770697986},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1560240006694},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1560240006694},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1560240006724},{"_id":"source/_posts/i3/41912.jpg","hash":"c12b76d2f50d2ee2319fba346a07fab1029a65aa","modified":1569230650877},{"_id":"source/_posts/mysql/mysql4.png","hash":"9c849400454a422cd95a1ea4b88bd8c649393b71","modified":1572356971623},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1560240006694},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1560240006694},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1560240006704},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1560240006700},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1560240006700},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1560240006700},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1560240006700},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1560240006700},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1560240006700},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1560240006700},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1560240006704},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1560240006707},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1560240006707},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1560240006707},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1560240006710},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1560240006710},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1560240006714},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1560240006714},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1560240006714},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1560240006727},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1560240006727},{"_id":"source/_posts/i3/231046.jpg","hash":"6c4ce84231a667f1034edce15baba9c238b1393f","modified":1569230650884},{"_id":"source/_posts/i3/556990.jpg","hash":"4357c40fcbf8db07a4d9eab78b9357e448468edb","modified":1569230650887},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1560240006724},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1560240006724},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1560240006727},{"_id":"source/_posts/Lei/test.txt.gz","hash":"c72d5254b82c6daa59d14a19b35df319c7ca3479","modified":1560239395974},{"_id":"source/_posts/i3/931367.jpg","hash":"05db9492cb5947386a9bb75a10b228bd124b0f39","modified":1569230650894},{"_id":"source/_posts/test/.jpg","hash":"ad4912fc95a86faf2fb89924f6d9464e1922b07b","modified":1560239395977},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560240006704},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560240006700},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1560240006697},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1560240006700},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1560240006700},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1560240006707},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1560240006707},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1560240006707},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1560240006707},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1560240006707},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1560240006707},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1560240006714},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1560240006714},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1560240006724},{"_id":"source/_posts/i3/246420.jpg","hash":"1959dd083bd3535f6c9359385eefad0f02d96abd","modified":1569230650884},{"_id":"source/_posts/qt/qt_server.png","hash":"b0cecc91b365bd58cd340331a1b41903d8c6f6c4","modified":1565770685606},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1560240006717},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1560240006717},{"_id":"source/_posts/i3/247971.jpg","hash":"2fa15c4c85d07b08f8c329c72a067f3641e0ba70","modified":1569230650884},{"_id":"source/_posts/i3/test1.jpg","hash":"87e60aa95b4f5f9aec50db9fb3b807e06f5ede17","modified":1569230650894},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1560240006710},{"_id":"source/_posts/i3/251996.jpg","hash":"6d4a84aa35b40aebe30b764871e60e68f4e03cbb","modified":1569230650884},{"_id":"source/_posts/Lei/file.zp","hash":"6b80e3d9dde35eeabfd2b013e47f74d013397b1b","modified":1560239395974},{"_id":"source/_posts/i3/246755.jpg","hash":"01d9b863ae0e33e2bade82b8c5a90ff5bdbee42e","modified":1569230650884},{"_id":"source/_posts/i3/228532.jpg","hash":"ea6e0ea16bf9602214d7820e75bbd882318ccf81","modified":1569230650884},{"_id":"source/_posts/i3/674994.jpg","hash":"549d9b95ab514f4e8a9a9e033bda5fde6c2fb9c8","modified":1569230650890},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1560240006720},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1560240006727},{"_id":"source/_posts/i3/166859.jpg","hash":"547c2fe5e86bc967e77f635982fea6ede71f3528","modified":1569230650880},{"_id":"source/_posts/i3/228533.jpg","hash":"47b28b843a0cb942c792947b0fabeb3d5370fc4d","modified":1569230650884},{"_id":"source/_posts/i3/252202.jpg","hash":"e4ec84f17a4b95c546617050154c0c62398163b2","modified":1569230650887},{"_id":"source/_posts/i3/113997.jpg","hash":"eac646c08acf9774aba7b2bf5c4dbd7c0b788f0b","modified":1569230650880},{"_id":"source/_posts/i3/81939.jpg","hash":"7e71805cdb0db4fd51690cb8747885087d3d898d","modified":1569230650877},{"_id":"source/_posts/i3/424059.jpg","hash":"10fcaea700010b79ac3d21bb9706d7ff78cdc194","modified":1569230650887},{"_id":"source/_posts/i3/213983.jpg","hash":"e168a00636debf0433c880f27bf223ab272e6be5","modified":1569230650880},{"_id":"source/_posts/i3/228129.jpg","hash":"9a99987aedb4f940a22285ff00d0e99bd2fdee9c","modified":1569230650884},{"_id":"source/_posts/i3/654159.png","hash":"60cea6b92e7733747833ff55a1688bb6d3adaa8c","modified":1569230650890},{"_id":"public/2019/09/10/hello-world/index.html","hash":"c73099a7041ebc03063f221285ce0661393c1428","modified":1572956753028},{"_id":"public/2019/06/19/constellation/index.html","hash":"1e1cd0b2052cc50766889d6f52cdb00dfde9b93e","modified":1572956753028},{"_id":"public/2019/06/11/JustATest/index.html","hash":"3a36133c09c3bd973adb5e3c33896fba89cf89dc","modified":1572956753028},{"_id":"public/2019/06/05/Code/index.html","hash":"baf7022ab79de58304a60c46cd5fcafb83b566f5","modified":1572956753028},{"_id":"public/2019/05/31/Class/index.html","hash":"c4590e1e0d313819ab73c2cdec2bcdcbe5be6174","modified":1572956753028},{"_id":"public/2019/05/31/test2/index.html","hash":"2d25420e146e40cea7e23ac84cd83124a6a58a8b","modified":1572956753028},{"_id":"public/2019/05/31/test-1/index.html","hash":"8762ad329b813917cb1928e6975a6449a46c6c92","modified":1572956753028},{"_id":"public/archives/index.html","hash":"71eb903ec44f7197d8444dd9129b8fd7bf0fa38d","modified":1572956753029},{"_id":"public/archives/page/2/index.html","hash":"fc38bea97b0e51e9201f7afe999fead95567d7c9","modified":1572956753029},{"_id":"public/archives/2019/index.html","hash":"29f276866a1a4eddb7b635f2eb5266fedeeafc1e","modified":1572956753029},{"_id":"public/archives/2019/page/2/index.html","hash":"a7682fe699385cb15d2e748ba0c44589bee1dc90","modified":1572956753029},{"_id":"public/archives/2019/05/index.html","hash":"ea04e30c1535e033e2f530a18768f11564c0378d","modified":1572956753029},{"_id":"public/archives/2019/06/index.html","hash":"d7c7a52cfc4950b289391abc90560e759cf29149","modified":1572956753029},{"_id":"public/archives/2019/08/index.html","hash":"0d3ee50801f32d638d2571cd4a702a1cdcf23dfb","modified":1572956753029},{"_id":"public/archives/2019/09/index.html","hash":"8dfa800b28381dd20cceb64ba42e1c7cf10427a9","modified":1572956753029},{"_id":"public/tags/Test/index.html","hash":"72af6ec3d44bb4862f30771446e17384e418cca3","modified":1572956753029},{"_id":"public/tags/test/index.html","hash":"5c8f6629db143f6556dd4f2181436139372677ef","modified":1572956753029},{"_id":"public/2019/09/22/i3/index.html","hash":"5c219b2754e063429a3fd4cb7559a0b20babd264","modified":1572956753029},{"_id":"public/2019/09/19/java/index.html","hash":"9d4cb86fb025f35507a87234f2fa3f6fe0a9236e","modified":1572956753029},{"_id":"public/2019/09/10/mysql/index.html","hash":"d1f84c5aaf40ad4deb1b9e62b2083da95768aa0c","modified":1572956753029},{"_id":"public/2019/08/05/qt/index.html","hash":"1d57663454e399b48f4ad3d60b870b83df3eeb90","modified":1572956753029},{"_id":"public/2019/06/12/C-Book/index.html","hash":"5c1d9b6f968fcda0cb840e9ac2d917f99bcf5fbf","modified":1572956753029},{"_id":"public/2019/06/04/Noteslinux1/index.html","hash":"5a61cd58daef338920a0b433098657369e16d91c","modified":1572956753029},{"_id":"public/2019/06/03/tar/index.html","hash":"b5945eb620c00f0a6c34f3a35962d393848db1d6","modified":1572956753029},{"_id":"public/2019/05/31/file/index.html","hash":"f0882fbccc5ab29c8667338259526fe5dc93844d","modified":1572956753029},{"_id":"public/2019/05/21/c-Notes/index.html","hash":"a688099aad2aa3bc85a8f9a3b7fec2b8fb41df5f","modified":1572956753029},{"_id":"public/2019/05/19/test/index.html","hash":"6fce093b79585718d72edf5403297eb0d4a58416","modified":1572956753029},{"_id":"public/2019/05/06/小萝莉/index.html","hash":"0e7a0eb28c9c8c853a5cf6efc8787c8a3e4a1471","modified":1572956753029},{"_id":"public/index.html","hash":"b4d2be48e5fdb8d6f62c00e023bfe90912128f9b","modified":1572956910109},{"_id":"public/page/2/index.html","hash":"b093b0ae53a99ffb4617dcb3e12032b552e254c6","modified":1572956753030},{"_id":"public/2019/11/05/a/index.html","hash":"68e6024d5846ffeb587a8e9abc9711d13590aac3","modified":1572956910109},{"_id":"public/archives/2019/11/index.html","hash":"9e263a88a10ef075b5bd73eb97db3e0030acb1b2","modified":1572956753029},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1572955799867},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1572955799867},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1572955799867},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1572955799867},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1572955799867},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1572955799867},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1572955799867},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1572955799867},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1572955799867},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1572955799867},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1572955799867},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1572955799867},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572955799867},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1572955799868},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1572955799868},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1572955799868},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1572955799868},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1572955799868},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1572955799868},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1572955799868},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1572955799868},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1572955799868},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1572955799868},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1572955799868},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1572955799868},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1572955799868},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1572955799868},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1572955799868},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1572955799869},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1572955799869},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1572955799869},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1572955799869},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1572955799869},{"_id":"public/2019/05/31/Class/Lpur2.png","hash":"efc22e1a1e37e75baa7b788d1fea94611eacf02b","modified":1572955799869},{"_id":"public/2019/06/05/Code/Code1.png","hash":"54287ffb565af64e9a6bc36941563327f2a43902","modified":1572955799869},{"_id":"public/2019/05/31/file/file1.png","hash":"14fbb290eabbb2b088fd610a943876b2d2b36c05","modified":1572955799869},{"_id":"public/2019/06/12/C-Book/c-Book.png","hash":"087c1f14d7d19a929961c98be3a94db669d63369","modified":1572955799869},{"_id":"public/2019/06/12/C-Book/c-Book1.png","hash":"9533241ea8cf7808b485527843d92fdf14fbbbdb","modified":1572955799869},{"_id":"public/2019/06/12/C-Book/c-Book3.png","hash":"68c38dd892d6626178492147bda59c770a36ec93","modified":1572955799869},{"_id":"public/2019/06/12/C-Book/c-Book4.png","hash":"c2d9847f52f04acbf7be2841091c2d4bca74959a","modified":1572955799869},{"_id":"public/2019/06/12/C-Book/c-Book5.png","hash":"e0345487c68d55dc8dc78f77dc39a865426e26c4","modified":1572955799869},{"_id":"public/2019/09/10/mysql/mysql0.png","hash":"84b39d35d7672b9f503159517892c9b4deb1a695","modified":1572955799869},{"_id":"public/2019/09/10/mysql/mysql3.png","hash":"2e51e7aa390db4cd7b68c3f654c67658019eb5d7","modified":1572955799869},{"_id":"public/2019/05/21/c-Notes/WC.png","hash":"53e4ea434ec5d17e0be7c89c3632c49ac0fb53c1","modified":1572955799869},{"_id":"public/2019/05/21/c-Notes/YC.png","hash":"2c7b67083d726c4f343c3149a168e9a39f137ce1","modified":1572955799869},{"_id":"public/2019/05/21/c-Notes/YC1.png","hash":"1ef204c5da4c7ca802c8a4ee447b3818e866ff08","modified":1572955799869},{"_id":"public/2019/05/21/c-Notes/YC2.png","hash":"dd7989c0644da90ef8c8e369b7025169fdffc280","modified":1572955799869},{"_id":"public/2019/05/21/c-Notes/YC3.png","hash":"8a32fd85ed5096a64b9cb5ddb75c0677320317d0","modified":1572955799869},{"_id":"public/2019/05/21/c-Notes/YC4.png","hash":"503622c67c5eaf427b4b08541daa447bffc62d88","modified":1572955799869},{"_id":"public/2019/05/21/c-Notes/YC5.png","hash":"809b91cc0157e727c5ca4147765cc1a3b8b73e28","modified":1572955799870},{"_id":"public/2019/09/22/i3/crayon_shin_chan-002.jpg","hash":"a10f80a07286a1ca4b029c2f105366eb9a2d41f7","modified":1572955799870},{"_id":"public/2019/09/22/i3/test2.jpg","hash":"2066cd369e49dba4240797eb0693c74c29ef51e4","modified":1572955799870},{"_id":"public/2019/09/22/i3/test3.jpeg","hash":"009c5f2283ad3999fdb6336e9461331bc790faf9","modified":1572955799870},{"_id":"public/2019/09/22/i3/test7.jpg","hash":"7fc88d04627f532bb8c4507ba8ec4a00953e3d62","modified":1572955799870},{"_id":"public/2019/09/22/i3/test5.jpeg","hash":"2366bddaf27ba51a74bf3b48b4c94f553897696b","modified":1572955799870},{"_id":"public/2019/09/22/i3/头像.jpeg","hash":"348f83e3863f4d36159fdcfde3da05b23c40bc67","modified":1572955799870},{"_id":"public/2019/05/19/test/a.jpg","hash":"7d0458d48481078303d783a9574cab09e324f60c","modified":1572955799870},{"_id":"public/2019/06/03/tar/tar.png","hash":"46549e929e679709e4073ccd86fa47c05f92f848","modified":1572955799870},{"_id":"public/2019/06/03/tar/tar1.png","hash":"935f3390171658cc0fd30f86d0cfa83375d2ccee","modified":1572955799870},{"_id":"public/2019/05/06/小萝莉/sda.jpg","hash":"b905c165bd7022bffd52a5bd8714afc038091a23","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt1.png","hash":"8ccfbcce3b05793c8cc909950cdd003b78c8a8ad","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt10_ui.png","hash":"e0c36a98266fe765d04c2d64ec024f9353ecd521","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt2_hello.png","hash":"45de44b825c02b0ed70b2192cbcc0d07b63a7fd7","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt3_caidan.png","hash":"cf1cc655315c30cf5496c45dcd4396d3a0b97de9","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt4_duihua.png","hash":"87123682d26bc7d76a7dc82326ed6221f4be6e32","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt5_duihua.png","hash":"5193e5b313dc5e24e348474fd828db606018c1dc","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt6_ui.png","hash":"9b8e1e3d146d5d77ac3db18a17f4ff00e684d806","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt7_ui.png","hash":"a5c1d2062b823914f0eb02717704f9652c428d6f","modified":1572955799870},{"_id":"public/2019/08/05/qt/qt8_ui.png","hash":"d0ea982a54b735651988c76ad271cd96e677eaaf","modified":1572955799871},{"_id":"public/2019/08/05/qt/qtEvent.png","hash":"9dcac426770c8cc36f8dcabcb5a72d481ea4c693","modified":1572955799871},{"_id":"public/2019/08/05/qt/qtEvent1.png","hash":"f2ee3a301150ff39b7554a2adad8ca1b33ab18c7","modified":1572955799871},{"_id":"public/2019/08/05/qt/qtEvent2.png","hash":"d5b310f025675faaf46d19f2d589a7a6f493d06f","modified":1572955799871},{"_id":"public/2019/08/05/qt/qtEvent3.png","hash":"7f875b2546ff43509851b2b6133fafdffe27ccb6","modified":1572955799871},{"_id":"public/2019/08/05/qt/qtEvent4.png","hash":"cafe6234676b31dfeebbf6c16a04f911504e3b39","modified":1572955799871},{"_id":"public/2019/08/05/qt/qtFILE.png","hash":"316d1b5ed005c30b341dffcd7ba9eb7538e99288","modified":1572955799871},{"_id":"public/2019/08/05/qt/qt_image.png","hash":"e49b6c045f89fbcdb134811284e3dd170aa8829a","modified":1572955799871},{"_id":"public/2019/08/05/qt/qt_paint1.png","hash":"1ce3283b3034dc5361ee646520c401d5704357f8","modified":1572955799871},{"_id":"public/2019/08/05/qt/qt_picture2.png","hash":"6318fcb3e651be37edb34de2c2e791982cad51d1","modified":1572955799871},{"_id":"public/2019/08/05/qt/qt_picture1.png","hash":"afa79f2b9ac9d80e6858959f6ef28076939a127f","modified":1572955799871},{"_id":"public/2019/08/05/qt/qt_pixmap.png","hash":"1049ab02c50c73358d02e111890429255be429d0","modified":1572955799871},{"_id":"public/2019/08/05/qt/qt_pixmap2.png","hash":"f8eb40068fb7d517ecb75f72f5232e71b895cb6d","modified":1572955799871},{"_id":"public/2019/08/05/qt/qt_tcpserven2.png","hash":"4e732580a9526bb19c6cf7d3010beac43e3b0f79","modified":1572955799872},{"_id":"public/2019/08/05/qt/qt_udp.png","hash":"951fe18fdee09ea07f636cb04254c43f97deafd3","modified":1572955799872},{"_id":"public/2019/08/05/qt/qt_udp2.png","hash":"a504b47275948331aecc07ee6c06dcfb952b6872","modified":1572955799872},{"_id":"public/2019/08/05/qt/qtwritefile.png","hash":"082a34a98e1448ad7e9191c5ce5dbfad762a4fa9","modified":1572955799872},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1572955800231},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1572955800236},{"_id":"public/2019/06/04/Noteslinux1/chattr.png","hash":"4e0b0081244ac60cd915af6576cf699d81836e1f","modified":1572955800240},{"_id":"public/2019/05/31/file/file.png","hash":"4493b22e0a3079dd30e8cd3693776936401fc46a","modified":1572955800240},{"_id":"public/2019/06/12/C-Book/c-Book2.png","hash":"4f26607566b1c847bd5fe240eba6a2a460c48e06","modified":1572955800240},{"_id":"public/2019/09/10/mysql/mysql2.png","hash":"0ac4f99602aaa11e918726111ea487ef4a2e6fbe","modified":1572955800240},{"_id":"public/2019/09/10/mysql/mysql5.png","hash":"61901a7f1d7b9dd8a53ad144529a5f724a473630","modified":1572955800240},{"_id":"public/2019/09/22/i3/710742.jpg","hash":"8cf708f93f621fe55a5f55f0e5baab2be6b2f11d","modified":1572955800240},{"_id":"public/2019/05/06/小萝莉/test.png","hash":"5dbdce767c229ce56fda00e932ac1fcdd6fabd17","modified":1572955800240},{"_id":"public/2019/08/05/qt/qt11_ui.png","hash":"bf20b1b26362eff4d400b9b7e4aa236c26350631","modified":1572955800240},{"_id":"public/2019/08/05/qt/qt12_ui.png","hash":"b52a4b1a6cf7d6fc71079f7e6f7b6412e0d06289","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt9_ui.png","hash":"7f243bb0fe25a1f0ff0248eaa7224331ea78a73c","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt_Stream.png","hash":"64a3969d48dd971cfa80bfe6d64a737f63711093","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt_paint.png","hash":"4f8e137dabfa3d9e1c1f87bff0b8c7b4bb143c51","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt_picture.png","hash":"1f3f631d4e6c68a619c7e1ac9af08406a899a197","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt_tcpfile.png","hash":"ad10452fdea2d1d92d0553a3723916e38e361517","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt_tcpserven1.png","hash":"69cfb3430235954c5b27cbe9040b40dc6f406fa3","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt_udp1.png","hash":"6f55124c81d8c4081404e22862f11a1a0751717f","modified":1572955800241},{"_id":"public/2019/08/05/qt/qt_zhuan1.png","hash":"d9e90d9ab81c29de5372fb4ea000aa903ceac09e","modified":1572955800241},{"_id":"public/2019/08/05/qt/qtzhuan.png","hash":"415f55e2c19bd5b82f69c4c14d782b8aa2441d68","modified":1572955800242},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1572955800252},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1572955800252},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1572955800252},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1572955800252},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1572955800252},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1572955800252},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1572955800252},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1572955800252},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1572955800252},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1572955800252},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1572955800252},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1572955800252},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1572955800252},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1572955800253},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1572955800253},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1572955800253},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1572955800253},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1572955800253},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1572955800253},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1572955800253},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1572955800254},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1572955800254},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1572955800254},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1572955800254},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1572955800254},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1572955800254},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1572955800254},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1572955800254},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1572955800254},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1572955800254},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1572955800254},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1572955800254},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1572955800255},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1572955800255},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1572955800255},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1572955800255},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1572955800255},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1572955800255},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1572955800255},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1572955800255},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1572955800255},{"_id":"public/css/main.css","hash":"b541f74a81ac266160c005f6f1b10af14c72a36a","modified":1572955800255},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1572955800255},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1572955800255},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1572955800256},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1572955800256},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1572955800256},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1572955800256},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1572955800256},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1572955800256},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1572955800256},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1572955800256},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1572955800257},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1572955800257},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1572955800257},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1572955800257},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1572955800257},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1572955800257},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1572955800257},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1572955800257},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1572955800258},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1572955800258},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1572955800258},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1572955800259},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1572955800259},{"_id":"public/2019/09/22/i3/228568.jpg","hash":"32ca6f63b9817cc872e9c6f278d1c3b4685c1cc9","modified":1572955800259},{"_id":"public/2019/09/22/i3/608422.jpg","hash":"053a7ed987f6e3b65b917aac6a69e57966643269","modified":1572955800259},{"_id":"public/2019/09/10/mysql/mysql1.png","hash":"700d308f60ba9f7feda8541893a4a11df4d427ce","modified":1572955800260},{"_id":"public/2019/08/05/qt/qt_tcpserven.png","hash":"55a74a8a6c4ab88209820b7a6fb107f114e83dff","modified":1572955800260},{"_id":"public/2019/09/22/i3/169068.jpg","hash":"b6ce51c86562895e6636aa200b6626c9b682949b","modified":1572955800260},{"_id":"public/2019/08/05/qt/qtEventpainter1.png","hash":"aced6e65da772a7fd8cff022c92e929dba1d9e0e","modified":1572955800260},{"_id":"public/2019/08/05/qt/qtEventpainter2.png","hash":"31cb6a8d0b83d2e9f5803e6c89ab72a943170976","modified":1572955800260},{"_id":"public/2019/08/05/qt/qt_Read.png","hash":"9fff6623d58ca11be5cee7a8715331d1ae34d2b0","modified":1572955800260},{"_id":"public/2019/08/05/qt/qtreadfile.png","hash":"868d517138628a1c6cc8a8bbaf24ad6978aa8dab","modified":1572955800261},{"_id":"public/2019/09/22/i3/927682.jpg","hash":"2e6da726afaf01db329886d783aa55fc7b2d313b","modified":1572955800285},{"_id":"public/2019/09/22/i3/41912.jpg","hash":"c12b76d2f50d2ee2319fba346a07fab1029a65aa","modified":1572955800290},{"_id":"public/2019/09/10/mysql/mysql4.png","hash":"9c849400454a422cd95a1ea4b88bd8c649393b71","modified":1572955800290},{"_id":"public/2019/08/05/qt/qt_server.png","hash":"b0cecc91b365bd58cd340331a1b41903d8c6f6c4","modified":1572955800290},{"_id":"public/2019/11/05/a/a0.png","hash":"978aeb3b521a667bbf6b0758d73258498e08a61e","modified":1572955800291},{"_id":"public/2019/09/22/i3/231046.jpg","hash":"6c4ce84231a667f1034edce15baba9c238b1393f","modified":1572955800297},{"_id":"public/2019/09/22/i3/556990.jpg","hash":"4357c40fcbf8db07a4d9eab78b9357e448468edb","modified":1572955800298},{"_id":"public/2019/09/22/i3/931367.jpg","hash":"05db9492cb5947386a9bb75a10b228bd124b0f39","modified":1572955800298},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1572955800307},{"_id":"public/2019/09/22/i3/246420.jpg","hash":"1959dd083bd3535f6c9359385eefad0f02d96abd","modified":1572955800307},{"_id":"public/2019/09/22/i3/247971.jpg","hash":"2fa15c4c85d07b08f8c329c72a067f3641e0ba70","modified":1572955800307},{"_id":"public/2019/09/22/i3/251996.jpg","hash":"6d4a84aa35b40aebe30b764871e60e68f4e03cbb","modified":1572955800307},{"_id":"public/2019/09/22/i3/test1.jpg","hash":"87e60aa95b4f5f9aec50db9fb3b807e06f5ede17","modified":1572955800310},{"_id":"public/2019/09/22/i3/228532.jpg","hash":"ea6e0ea16bf9602214d7820e75bbd882318ccf81","modified":1572955800313},{"_id":"public/2019/09/22/i3/246755.jpg","hash":"01d9b863ae0e33e2bade82b8c5a90ff5bdbee42e","modified":1572955800313},{"_id":"public/2019/09/22/i3/674994.jpg","hash":"549d9b95ab514f4e8a9a9e033bda5fde6c2fb9c8","modified":1572955800314},{"_id":"public/2019/09/22/i3/166859.jpg","hash":"547c2fe5e86bc967e77f635982fea6ede71f3528","modified":1572955800318},{"_id":"public/2019/09/22/i3/228533.jpg","hash":"47b28b843a0cb942c792947b0fabeb3d5370fc4d","modified":1572955800318},{"_id":"public/2019/09/22/i3/113997.jpg","hash":"eac646c08acf9774aba7b2bf5c4dbd7c0b788f0b","modified":1572955800322},{"_id":"public/2019/09/22/i3/252202.jpg","hash":"e4ec84f17a4b95c546617050154c0c62398163b2","modified":1572955800322},{"_id":"public/2019/09/22/i3/81939.jpg","hash":"7e71805cdb0db4fd51690cb8747885087d3d898d","modified":1572955800326},{"_id":"public/2019/09/22/i3/424059.jpg","hash":"10fcaea700010b79ac3d21bb9706d7ff78cdc194","modified":1572955800331},{"_id":"public/2019/09/22/i3/213983.jpg","hash":"e168a00636debf0433c880f27bf223ab272e6be5","modified":1572955800336},{"_id":"public/2019/09/22/i3/228129.jpg","hash":"9a99987aedb4f940a22285ff00d0e99bd2fdee9c","modified":1572955800337},{"_id":"public/2019/09/22/i3/654159.png","hash":"60cea6b92e7733747833ff55a1688bb6d3adaa8c","modified":1572955800344}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Class","date":"2019-05-31T13:51:02.000Z","_content":"\n![Lpur2](Class/Lpur2.png)\n","source":"_posts/Class.md","raw":"---\ntitle: Class\ndate: 2019-05-31 21:51:02\ntags:\n---\n\n![Lpur2](Class/Lpur2.png)\n","slug":"Class","published":1,"updated":"2019-06-11T07:49:55.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgb0000goz7zznoap4f","content":"<p><img src=\"//EvanShady.github.io/2019/05/31/Class/Lpur2.png\" alt=\"Lpur2\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"//EvanShady.github.io/2019/05/31/Class/Lpur2.png\" alt=\"Lpur2\"></p>\n"},{"title":"Code","date":"2019-06-05T05:17:32.000Z","_content":"# Notes c++\n1. 二进制\n* 这里说的是调用一个c++函数来实现的。\n```\n#inciude <iostream>\nusing namespace std;\nint main(){\n     bitset<32>a(100)     //值得注意的是这里的32是数据类型转换bit来定义的。\n     cout<<a<<endl;  //输出是以二进制的形式来输出的，也就是说，把数字转换成了二进制\n     cout<<sizeof(int)<<endl;     //配上这个来使用比较明白\n}\n```\n![转换二进制](Code/Code1.png)\n* 其实你也可以在上面的基础下把数据类型给换了，这样你也可以看你想要转换的二进制。\n* IDE (集成开发坏境)\n* 数据类型字节（本人电脑）\n**int:4,float:4,long:4,double:8,char:1,bool:1,string:32,long double:16**\n**wchar_c:4,**\n----\n2. 操作符:一元操作符，二元操作符，三元操作符。\n* 一元操作符:操作在一个数的操作符。（++,--,&,*）\n* 二元操作符:操作在两个数上的操作符。（+,-，*,/,%,）\n* 三元操作符:操作在三个数上的操作符。(条件操作符，?:)等\n---\n3. 逻辑操作符(&&,||,!)\n* &&(逻辑与):只要一个为0就为0，相反的两个为1才为1。\n* ||(逻辑或):只要一个为1就为1，相反的两个为0才为0。\n* !(逻辑非):自己脑补。\n* **位操作符(&,|,^,~,<<,>>)**\n* **&:位与。|:位或。 ^:异或。 ~:取补。 <<:左移。 >>:右移。**","source":"_posts/Code.md","raw":"---\ntitle: Code\ndate: 2019-06-05 13:17:32\ntags:\n---\n# Notes c++\n1. 二进制\n* 这里说的是调用一个c++函数来实现的。\n```\n#inciude <iostream>\nusing namespace std;\nint main(){\n     bitset<32>a(100)     //值得注意的是这里的32是数据类型转换bit来定义的。\n     cout<<a<<endl;  //输出是以二进制的形式来输出的，也就是说，把数字转换成了二进制\n     cout<<sizeof(int)<<endl;     //配上这个来使用比较明白\n}\n```\n![转换二进制](Code/Code1.png)\n* 其实你也可以在上面的基础下把数据类型给换了，这样你也可以看你想要转换的二进制。\n* IDE (集成开发坏境)\n* 数据类型字节（本人电脑）\n**int:4,float:4,long:4,double:8,char:1,bool:1,string:32,long double:16**\n**wchar_c:4,**\n----\n2. 操作符:一元操作符，二元操作符，三元操作符。\n* 一元操作符:操作在一个数的操作符。（++,--,&,*）\n* 二元操作符:操作在两个数上的操作符。（+,-，*,/,%,）\n* 三元操作符:操作在三个数上的操作符。(条件操作符，?:)等\n---\n3. 逻辑操作符(&&,||,!)\n* &&(逻辑与):只要一个为0就为0，相反的两个为1才为1。\n* ||(逻辑或):只要一个为1就为1，相反的两个为0才为0。\n* !(逻辑非):自己脑补。\n* **位操作符(&,|,^,~,<<,>>)**\n* **&:位与。|:位或。 ^:异或。 ~:取补。 <<:左移。 >>:右移。**","slug":"Code","published":1,"updated":"2019-06-11T07:49:55.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgf0001goz7wbztdj30","content":"<h1 id=\"Notes-c\"><a href=\"#Notes-c\" class=\"headerlink\" title=\"Notes c++\"></a>Notes c++</h1><ol>\n<li>二进制</li>\n</ol>\n<ul>\n<li>这里说的是调用一个c++函数来实现的。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#inciude &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">     bitset&lt;32&gt;a(100)     //值得注意的是这里的32是数据类型转换bit来定义的。</span><br><span class=\"line\">     cout&lt;&lt;a&lt;&lt;endl;  //输出是以二进制的形式来输出的，也就是说，把数字转换成了二进制</span><br><span class=\"line\">     cout&lt;&lt;sizeof(int)&lt;&lt;endl;     //配上这个来使用比较明白</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/06/05/Code/Code1.png\" alt=\"转换二进制\"></p>\n<ul>\n<li>其实你也可以在上面的基础下把数据类型给换了，这样你也可以看你想要转换的二进制。</li>\n<li>IDE (集成开发坏境)</li>\n<li>数据类型字节（本人电脑）<br><strong>int:4,float:4,long:4,double:8,char:1,bool:1,string:32,long double:16</strong><br><strong>wchar_c:4,</strong></li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>操作符:一元操作符，二元操作符，三元操作符。</li>\n</ol>\n<ul>\n<li>一元操作符:操作在一个数的操作符。（++,–,&amp;,*）</li>\n<li>二元操作符:操作在两个数上的操作符。（+,-，*,/,%,）</li>\n<li>三元操作符:操作在三个数上的操作符。(条件操作符，?:)等</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li>逻辑操作符(&amp;&amp;,||,!)</li>\n</ol>\n<ul>\n<li>&amp;&amp;(逻辑与):只要一个为0就为0，相反的两个为1才为1。</li>\n<li>||(逻辑或):只要一个为1就为1，相反的两个为0才为0。</li>\n<li>!(逻辑非):自己脑补。</li>\n<li><strong>位操作符(&amp;,|,^,~,&lt;&lt;,&gt;&gt;)</strong></li>\n<li><strong>&amp;:位与。|:位或。 ^:异或。 ~:取补。 &lt;&lt;:左移。 &gt;&gt;:右移。</strong></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Notes-c\"><a href=\"#Notes-c\" class=\"headerlink\" title=\"Notes c++\"></a>Notes c++</h1><ol>\n<li>二进制</li>\n</ol>\n<ul>\n<li>这里说的是调用一个c++函数来实现的。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#inciude &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">     bitset&lt;32&gt;a(100)     //值得注意的是这里的32是数据类型转换bit来定义的。</span><br><span class=\"line\">     cout&lt;&lt;a&lt;&lt;endl;  //输出是以二进制的形式来输出的，也就是说，把数字转换成了二进制</span><br><span class=\"line\">     cout&lt;&lt;sizeof(int)&lt;&lt;endl;     //配上这个来使用比较明白</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/06/05/Code/Code1.png\" alt=\"转换二进制\"></p>\n<ul>\n<li>其实你也可以在上面的基础下把数据类型给换了，这样你也可以看你想要转换的二进制。</li>\n<li>IDE (集成开发坏境)</li>\n<li>数据类型字节（本人电脑）<br><strong>int:4,float:4,long:4,double:8,char:1,bool:1,string:32,long double:16</strong><br><strong>wchar_c:4,</strong></li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>操作符:一元操作符，二元操作符，三元操作符。</li>\n</ol>\n<ul>\n<li>一元操作符:操作在一个数的操作符。（++,–,&amp;,*）</li>\n<li>二元操作符:操作在两个数上的操作符。（+,-，*,/,%,）</li>\n<li>三元操作符:操作在三个数上的操作符。(条件操作符，?:)等</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li>逻辑操作符(&amp;&amp;,||,!)</li>\n</ol>\n<ul>\n<li>&amp;&amp;(逻辑与):只要一个为0就为0，相反的两个为1才为1。</li>\n<li>||(逻辑或):只要一个为1就为1，相反的两个为0才为0。</li>\n<li>!(逻辑非):自己脑补。</li>\n<li><strong>位操作符(&amp;,|,^,~,&lt;&lt;,&gt;&gt;)</strong></li>\n<li><strong>&amp;:位与。|:位或。 ^:异或。 ~:取补。 &lt;&lt;:左移。 &gt;&gt;:右移。</strong></li>\n</ul>\n"},{"title":"JustATest","date":"2019-06-11T07:50:56.000Z","_content":"\n# JustATest\n\n前言，xxxxxxxxxxxxxx\n\n<!--more-->\n\n~~~C++\n#include <iostream>\nint main(){\n  std::cout<<\"helloworld\"<<std::endl;\n  return 0;\n}\n~~~\n","source":"_posts/JustATest.md","raw":"---\ntitle: JustATest\ndate: 2019-06-11 15:50:56\ntags:\n  - Test\n---\n\n# JustATest\n\n前言，xxxxxxxxxxxxxx\n\n<!--more-->\n\n~~~C++\n#include <iostream>\nint main(){\n  std::cout<<\"helloworld\"<<std::endl;\n  return 0;\n}\n~~~\n","slug":"JustATest","published":1,"updated":"2019-09-10T09:08:34.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgg0002goz7u6nkj6n7","content":"<h1 id=\"JustATest\"><a href=\"#JustATest\" class=\"headerlink\" title=\"JustATest\"></a>JustATest</h1><p>前言，xxxxxxxxxxxxxx</p>\n<a id=\"more\"></a>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"helloworld\"</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"JustATest\"><a href=\"#JustATest\" class=\"headerlink\" title=\"JustATest\"></a>JustATest</h1><p>前言，xxxxxxxxxxxxxx</p>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"helloworld\"</span>&lt;&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"a","date":"2019-11-05T12:07:53.000Z","_content":"                        test\n <!--more-->\n\n![a](a/a0.png) \n","source":"_posts/a.md","raw":"---\ntitle: a\ndate: 2019-11-05 20:07:53\ntags:\n---\n                        test\n <!--more-->\n\n![a](a/a0.png) \n","slug":"a","published":1,"updated":"2019-11-05T12:28:22.204Z","_id":"ck2lt9pgh0003goz7vkzpsn5p","comments":1,"layout":"post","photos":[],"link":"","content":"<pre><code>test\n</code></pre> <a id=\"more\"></a>\n<p><img src=\"//yoursite.com/2019/11/05/a/a0.png\" alt=\"a\"> </p>\n","site":{"data":{}},"excerpt":"<pre><code>test\n</code></pre>","more":"<p><img src=\"//yoursite.com/2019/11/05/a/a0.png\" alt=\"a\"> </p>"},{"title":"Noteslinux1","date":"2019-06-04T05:57:38.000Z","_content":"注释 <!--more--> # linux操作系统 > 操作系统:是一种软件，用来帮助其它的程序控制计算机硬件并和用户进行交互。 1. 应用程序也是一种软件，用来向计算机的用户提供某种服务，而不仅仅是控制计算机的硬件。 2. 操作系统的共同之处: * 引导计算机硬件，以便操作系统和其它软件程序可以正常工作。 * 为使用操作系统的程序分配系统资源，如内存处理时间。 * 跟踪同时运行的多个程序。 * 为所有使用系统设备的程序提供规范的访问借口。 3. 操作系统中主要的部分: * 内核:操作系统的核心，用来在多个应用程序之间分配计算机资源。 * 设备的驱动程序:是一个允许内核访问硬件设备(如键盘，鼠标，硬盘，扫描器或显卡)的软件 * shell:是一个可以通过用户输入的命令计算机进行处理的软件。 * 工具软件:管理软件和操作系统特性的软件。 * 图形用户界面:是一种软件，它是基于在鼠标这个接口之上的，用户可以通过这个接口在图形化应用程序可以使用菜单，* 按钮以及层叠窗口来进行操作。 * 完整的linux的系统: 1. 允许linux和外设一起工作的硬件驱动程序。 2. 图形化桌面坏境和管理操作系统的图形界面工具 3. 应用程序 4. 方便用户在计算机上安装所有linux文件的程序 5. 用于监视和配置系统功能的网络和系统管理工具。 ---- # 常用的linux命令 **因为我用的是manjaro-linux，不同的发行版所用到的命令是不一样的。这些在这里也没什么好说的，因为我也是一个小白。** **我觉得每个人的私密工作一定要做好，不然谁都可以顺起你的电脑造起来，这就不太好了。** \n* passwd (更换用户的密码)\n* su + 用户名 (切换用户)\n* passwd -l + 用户名  (锁定用户)\n* passwd -S + 用户名  (解锁)\n* sl--小骚(小火车)\n* cmatrix(代码)\n* ls--是查看当前目录的所有文件\n* df--查看硬盘的空间 参数(-k -m -g)\n* du -sh +目录 (查看目录的大小)\n* swapon (查看分区的大小)\n**在Linux里一却都是文件，我想这句话对我们来说都不陌生了。**\n* touch + 文件名 (创建文件)\n* rm + 文件名 (删除文件)\n* grep (在文件中查找你想查找的内容)-n +(文件名)\n* grep -vn + 文件名 (显示在文件里没要查找的内容) \n* -i(忽略大小写)\n* -n(输出匹配的行号)\n* -V(显示版本)\n* -v(显示没匹配的内容)\n* -o(只显示匹配的部分，不显示行号)\n* -c(显示匹配的行的个数)\n* -L(查询多文件时，只显示文件名)\n1. ^(一行开始的标志)^big{匹配以big开头的行}\n2. $(一行结束的标志)$big{匹配以big结束的行}\n3. ?(匹配任意一个字符)big?yet{在两个字符中间匹配任意一个字符}\n4. x\\{m\\}(重复x字符m次)x\\{5\\}匹配重复x字符5次的行\n5. x\\{m,\\}(至少m次x字符)x\\{5,\\}匹配5次以上x字符的行\n6. x\\{m,n\\}(m到n次的x字符)x\\{1,10\\}匹配1～10次x字符的行\n7. [a-g] (查找a~g的字符)\n* 格式   ---    grep \"^abc\" 文件名\n----\n# 管道符\n> echo\n1. echo \"你好帅啊“ > a   //把输出的文字写进a文件里\n2. man ls >>a          //把ls的手册以追加的形式写进a文件里\n3. 假如在主目录里没有b文件\n4. ls -l b 2> a         //把错误信息写进a文件里\n5. ls -l b 2>> a        //和上面的意思一样\n-----\n# 比较文件 \n> diff\n* -a (以文本的形式比较两个文件)\n* -q (只输出两个文件是否有差异，不输出其它)\n* -s (比较两个文件是否相同)\n* diff -u (可以把两个文件的比较内容)\n* test(123)        test1(123456)  \n//只是把test和test1文件的内容显示出来\n* diff -u test test1 > file        \n//把前面两个文件比较的内容写进file文件里\n* patch -b test file           \n//把以补丁的形式把原先缺少内容的test文件补回到我们想看的样子\n>> cmp\n**比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置**\n----\n* -l(显示两个比较文件每个不同点的字节号和字节数，前者十进制显示，后者八进制显示)\n* -s(不显示错误信息退出)\n* -v(显示版本信息)\n>>> comm\n* -1(显示文件1没有的内容)\n* -2(显示文件2没有的内容)\n* -3(文件1和文件2同时出现的内容不显示)\n* -12(显示两个文件有的内容)\n* -23(显示文件1有而文件2没有的内容)\n* -123(什么内容都不显示)\n**值得注意的是，comm比较的是排序的文件，显示出来的格式是以一行一行的形式输出的。**\n----\n# SHELL\n**脚本是用户成功登录系统后启动，并始终作为用户与系统内核的交互接口。**\n* 系统都有一个默认的脚本，我们也可以在终端用find /bin/sh*命令查看我们有那几种脚本。\n* 我们也可以自定义文件的权限，以便实现文件的内容，简单点说就是脚本编程，通过改变文件的权限来把文件的实现。\n# 基本目录的解析\n**基本上每台linux电脑都会有一个名为家的目录，在linux下的一切都是以文件的形式存放在目录下的，我们还可以通过更改文件的权限来把文件里的内容效果实现出来，这说的就有点远了，让我们回到刚刚的目录，我们都知道文件是存放在目录下面的，所以想想都知道目录的重要性了。**\n* / ---         根目录\n* bin/ ---   存放必要的命令\n* dev/ ---   存放设备文件\n* etc/ ---   存放配置文件\n* home/ ---   主目录(存放用户的数据)\n* lib/ ---    存放必要的库\n* mnt/ ---    存放挂载的目录(一般为空)\n* root/ ---   超级用户的主目录\n* proc/ ---   虚拟目录(内存的映射)\n* sbin/ ---   存放用户经常使用的命令\n* usr/ ---    存放应用程序和文件(内存最大的目录) \n----\n# 文件权限\n**权限分为数字权限和隐藏权限**\n1. 数字权限 ---- 关键字--- chmod\n* 权限分为可读，可写，可执行。数字表示分为4,2,1\n* chmod 777  +文件名   更改文件的权限\n2. 隐藏文件\n* 关键字 --- chattr\n![参数解析](Noteslinux1/chattr.png)\n* chattr +i 文件名\n* 查看的命令 ----   lsattr +文件名\n----\n# 查找文件的命令\n> find\n**最大范围的查找文件，你也可以用这个命令来查找任何你想找的文件**\n* 分为时间查找和文件大小查找和名字查找\n1. 比如自己建立一个测试目录并名为Test/\n2. 里面都是以t开头的文件名\n3. 我们就是在这个目录下查找这些子文件\n* find ./ -name t\\* -ls\n* -cmin -10(十分钟更改过的文件)\n* -ctime -10(十小时更改过的文件)\n* -amin -10(十分钟存取的文件)\n* -atime -10(十小时存取的文件)\n* -size +10k(查找大小为10k的文件)\n**这里的用到了转义字符，不然系统会给我们报错的信息**\n----\n>> whereis\n**用来看查找可执行程序和应用程序和手册**\n* -b(只查找二进制文件)\n* -B(在指定的目录下查找二进制文件)\n* -f(使用-B参数，用来终止最后的目录)\n* -u(查找不包含指定类型的文件)\n","source":"_posts/Noteslinux1.md","raw":"---\ntitle: Noteslinux1\ndate: 2019-06-04 13:57:38\ntags:\n     - Test\n---\n注释 <!--more--> # linux操作系统 > 操作系统:是一种软件，用来帮助其它的程序控制计算机硬件并和用户进行交互。 1. 应用程序也是一种软件，用来向计算机的用户提供某种服务，而不仅仅是控制计算机的硬件。 2. 操作系统的共同之处: * 引导计算机硬件，以便操作系统和其它软件程序可以正常工作。 * 为使用操作系统的程序分配系统资源，如内存处理时间。 * 跟踪同时运行的多个程序。 * 为所有使用系统设备的程序提供规范的访问借口。 3. 操作系统中主要的部分: * 内核:操作系统的核心，用来在多个应用程序之间分配计算机资源。 * 设备的驱动程序:是一个允许内核访问硬件设备(如键盘，鼠标，硬盘，扫描器或显卡)的软件 * shell:是一个可以通过用户输入的命令计算机进行处理的软件。 * 工具软件:管理软件和操作系统特性的软件。 * 图形用户界面:是一种软件，它是基于在鼠标这个接口之上的，用户可以通过这个接口在图形化应用程序可以使用菜单，* 按钮以及层叠窗口来进行操作。 * 完整的linux的系统: 1. 允许linux和外设一起工作的硬件驱动程序。 2. 图形化桌面坏境和管理操作系统的图形界面工具 3. 应用程序 4. 方便用户在计算机上安装所有linux文件的程序 5. 用于监视和配置系统功能的网络和系统管理工具。 ---- # 常用的linux命令 **因为我用的是manjaro-linux，不同的发行版所用到的命令是不一样的。这些在这里也没什么好说的，因为我也是一个小白。** **我觉得每个人的私密工作一定要做好，不然谁都可以顺起你的电脑造起来，这就不太好了。** \n* passwd (更换用户的密码)\n* su + 用户名 (切换用户)\n* passwd -l + 用户名  (锁定用户)\n* passwd -S + 用户名  (解锁)\n* sl--小骚(小火车)\n* cmatrix(代码)\n* ls--是查看当前目录的所有文件\n* df--查看硬盘的空间 参数(-k -m -g)\n* du -sh +目录 (查看目录的大小)\n* swapon (查看分区的大小)\n**在Linux里一却都是文件，我想这句话对我们来说都不陌生了。**\n* touch + 文件名 (创建文件)\n* rm + 文件名 (删除文件)\n* grep (在文件中查找你想查找的内容)-n +(文件名)\n* grep -vn + 文件名 (显示在文件里没要查找的内容) \n* -i(忽略大小写)\n* -n(输出匹配的行号)\n* -V(显示版本)\n* -v(显示没匹配的内容)\n* -o(只显示匹配的部分，不显示行号)\n* -c(显示匹配的行的个数)\n* -L(查询多文件时，只显示文件名)\n1. ^(一行开始的标志)^big{匹配以big开头的行}\n2. $(一行结束的标志)$big{匹配以big结束的行}\n3. ?(匹配任意一个字符)big?yet{在两个字符中间匹配任意一个字符}\n4. x\\{m\\}(重复x字符m次)x\\{5\\}匹配重复x字符5次的行\n5. x\\{m,\\}(至少m次x字符)x\\{5,\\}匹配5次以上x字符的行\n6. x\\{m,n\\}(m到n次的x字符)x\\{1,10\\}匹配1～10次x字符的行\n7. [a-g] (查找a~g的字符)\n* 格式   ---    grep \"^abc\" 文件名\n----\n# 管道符\n> echo\n1. echo \"你好帅啊“ > a   //把输出的文字写进a文件里\n2. man ls >>a          //把ls的手册以追加的形式写进a文件里\n3. 假如在主目录里没有b文件\n4. ls -l b 2> a         //把错误信息写进a文件里\n5. ls -l b 2>> a        //和上面的意思一样\n-----\n# 比较文件 \n> diff\n* -a (以文本的形式比较两个文件)\n* -q (只输出两个文件是否有差异，不输出其它)\n* -s (比较两个文件是否相同)\n* diff -u (可以把两个文件的比较内容)\n* test(123)        test1(123456)  \n//只是把test和test1文件的内容显示出来\n* diff -u test test1 > file        \n//把前面两个文件比较的内容写进file文件里\n* patch -b test file           \n//把以补丁的形式把原先缺少内容的test文件补回到我们想看的样子\n>> cmp\n**比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置**\n----\n* -l(显示两个比较文件每个不同点的字节号和字节数，前者十进制显示，后者八进制显示)\n* -s(不显示错误信息退出)\n* -v(显示版本信息)\n>>> comm\n* -1(显示文件1没有的内容)\n* -2(显示文件2没有的内容)\n* -3(文件1和文件2同时出现的内容不显示)\n* -12(显示两个文件有的内容)\n* -23(显示文件1有而文件2没有的内容)\n* -123(什么内容都不显示)\n**值得注意的是，comm比较的是排序的文件，显示出来的格式是以一行一行的形式输出的。**\n----\n# SHELL\n**脚本是用户成功登录系统后启动，并始终作为用户与系统内核的交互接口。**\n* 系统都有一个默认的脚本，我们也可以在终端用find /bin/sh*命令查看我们有那几种脚本。\n* 我们也可以自定义文件的权限，以便实现文件的内容，简单点说就是脚本编程，通过改变文件的权限来把文件的实现。\n# 基本目录的解析\n**基本上每台linux电脑都会有一个名为家的目录，在linux下的一切都是以文件的形式存放在目录下的，我们还可以通过更改文件的权限来把文件里的内容效果实现出来，这说的就有点远了，让我们回到刚刚的目录，我们都知道文件是存放在目录下面的，所以想想都知道目录的重要性了。**\n* / ---         根目录\n* bin/ ---   存放必要的命令\n* dev/ ---   存放设备文件\n* etc/ ---   存放配置文件\n* home/ ---   主目录(存放用户的数据)\n* lib/ ---    存放必要的库\n* mnt/ ---    存放挂载的目录(一般为空)\n* root/ ---   超级用户的主目录\n* proc/ ---   虚拟目录(内存的映射)\n* sbin/ ---   存放用户经常使用的命令\n* usr/ ---    存放应用程序和文件(内存最大的目录) \n----\n# 文件权限\n**权限分为数字权限和隐藏权限**\n1. 数字权限 ---- 关键字--- chmod\n* 权限分为可读，可写，可执行。数字表示分为4,2,1\n* chmod 777  +文件名   更改文件的权限\n2. 隐藏文件\n* 关键字 --- chattr\n![参数解析](Noteslinux1/chattr.png)\n* chattr +i 文件名\n* 查看的命令 ----   lsattr +文件名\n----\n# 查找文件的命令\n> find\n**最大范围的查找文件，你也可以用这个命令来查找任何你想找的文件**\n* 分为时间查找和文件大小查找和名字查找\n1. 比如自己建立一个测试目录并名为Test/\n2. 里面都是以t开头的文件名\n3. 我们就是在这个目录下查找这些子文件\n* find ./ -name t\\* -ls\n* -cmin -10(十分钟更改过的文件)\n* -ctime -10(十小时更改过的文件)\n* -amin -10(十分钟存取的文件)\n* -atime -10(十小时存取的文件)\n* -size +10k(查找大小为10k的文件)\n**这里的用到了转义字符，不然系统会给我们报错的信息**\n----\n>> whereis\n**用来看查找可执行程序和应用程序和手册**\n* -b(只查找二进制文件)\n* -B(在指定的目录下查找二进制文件)\n* -f(使用-B参数，用来终止最后的目录)\n* -u(查找不包含指定类型的文件)\n","slug":"Noteslinux1","published":1,"updated":"2019-09-18T11:16:35.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgk0005goz7spzusjka","content":"<p>注释 <a id=\"more\"></a> # linux操作系统 &gt; 操作系统:是一种软件，用来帮助其它的程序控制计算机硬件并和用户进行交互。 1. 应用程序也是一种软件，用来向计算机的用户提供某种服务，而不仅仅是控制计算机的硬件。 2. 操作系统的共同之处: <em> 引导计算机硬件，以便操作系统和其它软件程序可以正常工作。 </em> 为使用操作系统的程序分配系统资源，如内存处理时间。 <em> 跟踪同时运行的多个程序。 </em> 为所有使用系统设备的程序提供规范的访问借口。 3. 操作系统中主要的部分: <em> 内核:操作系统的核心，用来在多个应用程序之间分配计算机资源。 </em> 设备的驱动程序:是一个允许内核访问硬件设备(如键盘，鼠标，硬盘，扫描器或显卡)的软件 <em> shell:是一个可以通过用户输入的命令计算机进行处理的软件。 </em> 工具软件:管理软件和操作系统特性的软件。 <em> 图形用户界面:是一种软件，它是基于在鼠标这个接口之上的，用户可以通过这个接口在图形化应用程序可以使用菜单，</em> 按钮以及层叠窗口来进行操作。 * 完整的linux的系统: 1. 允许linux和外设一起工作的硬件驱动程序。 2. 图形化桌面坏境和管理操作系统的图形界面工具 3. 应用程序 4. 方便用户在计算机上安装所有linux文件的程序 5. 用于监视和配置系统功能的网络和系统管理工具。 —- # 常用的linux命令 <strong>因为我用的是manjaro-linux，不同的发行版所用到的命令是不一样的。这些在这里也没什么好说的，因为我也是一个小白。</strong> <strong>我觉得每个人的私密工作一定要做好，不然谁都可以顺起你的电脑造起来，这就不太好了。</strong> </p>\n<ul>\n<li>passwd (更换用户的密码)</li>\n<li>su + 用户名 (切换用户)</li>\n<li>passwd -l + 用户名  (锁定用户)</li>\n<li>passwd -S + 用户名  (解锁)</li>\n<li>sl–小骚(小火车)</li>\n<li>cmatrix(代码)</li>\n<li>ls–是查看当前目录的所有文件</li>\n<li>df–查看硬盘的空间 参数(-k -m -g)</li>\n<li>du -sh +目录 (查看目录的大小)</li>\n<li>swapon (查看分区的大小)<br><strong>在Linux里一却都是文件，我想这句话对我们来说都不陌生了。</strong></li>\n<li>touch + 文件名 (创建文件)</li>\n<li>rm + 文件名 (删除文件)</li>\n<li>grep (在文件中查找你想查找的内容)-n +(文件名)</li>\n<li>grep -vn + 文件名 (显示在文件里没要查找的内容) </li>\n<li>-i(忽略大小写)</li>\n<li>-n(输出匹配的行号)</li>\n<li>-V(显示版本)</li>\n<li>-v(显示没匹配的内容)</li>\n<li>-o(只显示匹配的部分，不显示行号)</li>\n<li>-c(显示匹配的行的个数)</li>\n<li>-L(查询多文件时，只显示文件名)</li>\n</ul>\n<ol>\n<li>^(一行开始的标志)^big{匹配以big开头的行}</li>\n<li>$(一行结束的标志)$big{匹配以big结束的行}</li>\n<li>?(匹配任意一个字符)big?yet{在两个字符中间匹配任意一个字符}</li>\n<li>x{m}(重复x字符m次)x{5}匹配重复x字符5次的行</li>\n<li>x{m,}(至少m次x字符)x{5,}匹配5次以上x字符的行</li>\n<li>x{m,n}(m到n次的x字符)x{1,10}匹配1～10次x字符的行</li>\n<li>[a-g] (查找a~g的字符)</li>\n</ol>\n<ul>\n<li>格式   —    grep “^abc” 文件名</li>\n</ul>\n<hr>\n<h1 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h1><blockquote>\n<p>echo</p>\n<ol>\n<li>echo “你好帅啊“ &gt; a   //把输出的文字写进a文件里</li>\n<li>man ls &gt;&gt;a          //把ls的手册以追加的形式写进a文件里</li>\n<li>假如在主目录里没有b文件</li>\n<li>ls -l b 2&gt; a         //把错误信息写进a文件里</li>\n</ol>\n</blockquote>\n<ol start=\"5\">\n<li>ls -l b 2&gt;&gt; a        //和上面的意思一样</li>\n</ol>\n<hr>\n<h1 id=\"比较文件\"><a href=\"#比较文件\" class=\"headerlink\" title=\"比较文件\"></a>比较文件</h1><blockquote>\n<p>diff</p>\n<ul>\n<li>-a (以文本的形式比较两个文件)</li>\n<li>-q (只输出两个文件是否有差异，不输出其它)</li>\n<li>-s (比较两个文件是否相同)</li>\n<li>diff -u (可以把两个文件的比较内容)</li>\n<li>test(123)        test1(123456)<br>//只是把test和test1文件的内容显示出来</li>\n<li>diff -u test test1 &gt; file<br>//把前面两个文件比较的内容写进file文件里</li>\n<li>patch -b test file<br>//把以补丁的形式把原先缺少内容的test文件补回到我们想看的样子<blockquote>\n<p>cmp</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置\"><a href=\"#比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置\" class=\"headerlink\" title=\"比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置\"></a><strong>比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置</strong></h2><ul>\n<li>-l(显示两个比较文件每个不同点的字节号和字节数，前者十进制显示，后者八进制显示)</li>\n<li>-s(不显示错误信息退出)</li>\n<li>-v(显示版本信息)<blockquote>\n<blockquote>\n<blockquote>\n<p>comm</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>-1(显示文件1没有的内容)</li>\n<li>-2(显示文件2没有的内容)</li>\n<li>-3(文件1和文件2同时出现的内容不显示)</li>\n<li>-12(显示两个文件有的内容)</li>\n<li>-23(显示文件1有而文件2没有的内容)</li>\n<li>-123(什么内容都不显示)<br><strong>值得注意的是，comm比较的是排序的文件，显示出来的格式是以一行一行的形式输出的。</strong></li>\n</ul>\n<hr>\n<h1 id=\"SHELL\"><a href=\"#SHELL\" class=\"headerlink\" title=\"SHELL\"></a>SHELL</h1><p><strong>脚本是用户成功登录系统后启动，并始终作为用户与系统内核的交互接口。</strong></p>\n<ul>\n<li>系统都有一个默认的脚本，我们也可以在终端用find /bin/sh*命令查看我们有那几种脚本。</li>\n<li>我们也可以自定义文件的权限，以便实现文件的内容，简单点说就是脚本编程，通过改变文件的权限来把文件的实现。<h1 id=\"基本目录的解析\"><a href=\"#基本目录的解析\" class=\"headerlink\" title=\"基本目录的解析\"></a>基本目录的解析</h1><strong>基本上每台linux电脑都会有一个名为家的目录，在linux下的一切都是以文件的形式存放在目录下的，我们还可以通过更改文件的权限来把文件里的内容效果实现出来，这说的就有点远了，让我们回到刚刚的目录，我们都知道文件是存放在目录下面的，所以想想都知道目录的重要性了。</strong></li>\n<li>/ —         根目录</li>\n<li>bin/ —   存放必要的命令</li>\n<li>dev/ —   存放设备文件</li>\n<li>etc/ —   存放配置文件</li>\n<li>home/ —   主目录(存放用户的数据)</li>\n<li>lib/ —    存放必要的库</li>\n<li>mnt/ —    存放挂载的目录(一般为空)</li>\n<li>root/ —   超级用户的主目录</li>\n<li>proc/ —   虚拟目录(内存的映射)</li>\n<li>sbin/ —   存放用户经常使用的命令</li>\n<li>usr/ —    存放应用程序和文件(内存最大的目录) </li>\n</ul>\n<hr>\n<h1 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h1><p><strong>权限分为数字权限和隐藏权限</strong></p>\n<ol>\n<li>数字权限 —- 关键字— chmod</li>\n</ol>\n<ul>\n<li>权限分为可读，可写，可执行。数字表示分为4,2,1</li>\n<li>chmod 777  +文件名   更改文件的权限</li>\n</ul>\n<ol start=\"2\">\n<li>隐藏文件</li>\n</ol>\n<ul>\n<li>关键字 — chattr<br><img src=\"//EvanShady.github.io/2019/06/04/Noteslinux1/chattr.png\" alt=\"参数解析\"></li>\n<li>chattr +i 文件名</li>\n<li>查看的命令 —-   lsattr +文件名</li>\n</ul>\n<hr>\n<h1 id=\"查找文件的命令\"><a href=\"#查找文件的命令\" class=\"headerlink\" title=\"查找文件的命令\"></a>查找文件的命令</h1><blockquote>\n<p>find<br><strong>最大范围的查找文件，你也可以用这个命令来查找任何你想找的文件</strong></p>\n<ul>\n<li>分为时间查找和文件大小查找和名字查找</li>\n</ul>\n<ol>\n<li>比如自己建立一个测试目录并名为Test/</li>\n<li>里面都是以t开头的文件名</li>\n<li>我们就是在这个目录下查找这些子文件</li>\n</ol>\n<ul>\n<li>find ./ -name t* -ls</li>\n<li>-cmin -10(十分钟更改过的文件)</li>\n<li>-ctime -10(十小时更改过的文件)</li>\n<li>-amin -10(十分钟存取的文件)</li>\n<li>-atime -10(十小时存取的文件)</li>\n<li>-size +10k(查找大小为10k的文件)</li>\n</ul>\n</blockquote>\n<h2 id=\"这里的用到了转义字符，不然系统会给我们报错的信息\"><a href=\"#这里的用到了转义字符，不然系统会给我们报错的信息\" class=\"headerlink\" title=\"这里的用到了转义字符，不然系统会给我们报错的信息\"></a><strong>这里的用到了转义字符，不然系统会给我们报错的信息</strong></h2><blockquote>\n<blockquote>\n<p>whereis<br><strong>用来看查找可执行程序和应用程序和手册</strong></p>\n<ul>\n<li>-b(只查找二进制文件)</li>\n<li>-B(在指定的目录下查找二进制文件)</li>\n<li>-f(使用-B参数，用来终止最后的目录)</li>\n<li>-u(查找不包含指定类型的文件)</li>\n</ul>\n</blockquote>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>注释</p>","more":"# linux操作系统 &gt; 操作系统:是一种软件，用来帮助其它的程序控制计算机硬件并和用户进行交互。 1. 应用程序也是一种软件，用来向计算机的用户提供某种服务，而不仅仅是控制计算机的硬件。 2. 操作系统的共同之处: <em> 引导计算机硬件，以便操作系统和其它软件程序可以正常工作。 </em> 为使用操作系统的程序分配系统资源，如内存处理时间。 <em> 跟踪同时运行的多个程序。 </em> 为所有使用系统设备的程序提供规范的访问借口。 3. 操作系统中主要的部分: <em> 内核:操作系统的核心，用来在多个应用程序之间分配计算机资源。 </em> 设备的驱动程序:是一个允许内核访问硬件设备(如键盘，鼠标，硬盘，扫描器或显卡)的软件 <em> shell:是一个可以通过用户输入的命令计算机进行处理的软件。 </em> 工具软件:管理软件和操作系统特性的软件。 <em> 图形用户界面:是一种软件，它是基于在鼠标这个接口之上的，用户可以通过这个接口在图形化应用程序可以使用菜单，</em> 按钮以及层叠窗口来进行操作。 * 完整的linux的系统: 1. 允许linux和外设一起工作的硬件驱动程序。 2. 图形化桌面坏境和管理操作系统的图形界面工具 3. 应用程序 4. 方便用户在计算机上安装所有linux文件的程序 5. 用于监视和配置系统功能的网络和系统管理工具。 —- # 常用的linux命令 <strong>因为我用的是manjaro-linux，不同的发行版所用到的命令是不一样的。这些在这里也没什么好说的，因为我也是一个小白。</strong> <strong>我觉得每个人的私密工作一定要做好，不然谁都可以顺起你的电脑造起来，这就不太好了。</strong> <p></p>\n<ul>\n<li>passwd (更换用户的密码)</li>\n<li>su + 用户名 (切换用户)</li>\n<li>passwd -l + 用户名  (锁定用户)</li>\n<li>passwd -S + 用户名  (解锁)</li>\n<li>sl–小骚(小火车)</li>\n<li>cmatrix(代码)</li>\n<li>ls–是查看当前目录的所有文件</li>\n<li>df–查看硬盘的空间 参数(-k -m -g)</li>\n<li>du -sh +目录 (查看目录的大小)</li>\n<li>swapon (查看分区的大小)<br><strong>在Linux里一却都是文件，我想这句话对我们来说都不陌生了。</strong></li>\n<li>touch + 文件名 (创建文件)</li>\n<li>rm + 文件名 (删除文件)</li>\n<li>grep (在文件中查找你想查找的内容)-n +(文件名)</li>\n<li>grep -vn + 文件名 (显示在文件里没要查找的内容) </li>\n<li>-i(忽略大小写)</li>\n<li>-n(输出匹配的行号)</li>\n<li>-V(显示版本)</li>\n<li>-v(显示没匹配的内容)</li>\n<li>-o(只显示匹配的部分，不显示行号)</li>\n<li>-c(显示匹配的行的个数)</li>\n<li>-L(查询多文件时，只显示文件名)</li>\n</ul>\n<ol>\n<li>^(一行开始的标志)^big{匹配以big开头的行}</li>\n<li>$(一行结束的标志)$big{匹配以big结束的行}</li>\n<li>?(匹配任意一个字符)big?yet{在两个字符中间匹配任意一个字符}</li>\n<li>x{m}(重复x字符m次)x{5}匹配重复x字符5次的行</li>\n<li>x{m,}(至少m次x字符)x{5,}匹配5次以上x字符的行</li>\n<li>x{m,n}(m到n次的x字符)x{1,10}匹配1～10次x字符的行</li>\n<li>[a-g] (查找a~g的字符)</li>\n</ol>\n<ul>\n<li>格式   —    grep “^abc” 文件名</li>\n</ul>\n<hr>\n<h1 id=\"管道符\"><a href=\"#管道符\" class=\"headerlink\" title=\"管道符\"></a>管道符</h1><blockquote>\n<p>echo</p>\n<ol>\n<li>echo “你好帅啊“ &gt; a   //把输出的文字写进a文件里</li>\n<li>man ls &gt;&gt;a          //把ls的手册以追加的形式写进a文件里</li>\n<li>假如在主目录里没有b文件</li>\n<li>ls -l b 2&gt; a         //把错误信息写进a文件里</li>\n</ol>\n</blockquote>\n<ol start=\"5\">\n<li>ls -l b 2&gt;&gt; a        //和上面的意思一样</li>\n</ol>\n<hr>\n<h1 id=\"比较文件\"><a href=\"#比较文件\" class=\"headerlink\" title=\"比较文件\"></a>比较文件</h1><blockquote>\n<p>diff</p>\n<ul>\n<li>-a (以文本的形式比较两个文件)</li>\n<li>-q (只输出两个文件是否有差异，不输出其它)</li>\n<li>-s (比较两个文件是否相同)</li>\n<li>diff -u (可以把两个文件的比较内容)</li>\n<li>test(123)        test1(123456)<br>//只是把test和test1文件的内容显示出来</li>\n<li>diff -u test test1 &gt; file<br>//把前面两个文件比较的内容写进file文件里</li>\n<li>patch -b test file<br>//把以补丁的形式把原先缺少内容的test文件补回到我们想看的样子<blockquote>\n<p>cmp</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置\"><a href=\"#比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置\" class=\"headerlink\" title=\"比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置\"></a><strong>比较文件的命令，但一般用来比较文本文件，判断两个文件的不同之处，以及查看不同之处的位置</strong></h2><ul>\n<li>-l(显示两个比较文件每个不同点的字节号和字节数，前者十进制显示，后者八进制显示)</li>\n<li>-s(不显示错误信息退出)</li>\n<li>-v(显示版本信息)<blockquote>\n<blockquote>\n<blockquote>\n<p>comm</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>-1(显示文件1没有的内容)</li>\n<li>-2(显示文件2没有的内容)</li>\n<li>-3(文件1和文件2同时出现的内容不显示)</li>\n<li>-12(显示两个文件有的内容)</li>\n<li>-23(显示文件1有而文件2没有的内容)</li>\n<li>-123(什么内容都不显示)<br><strong>值得注意的是，comm比较的是排序的文件，显示出来的格式是以一行一行的形式输出的。</strong></li>\n</ul>\n<hr>\n<h1 id=\"SHELL\"><a href=\"#SHELL\" class=\"headerlink\" title=\"SHELL\"></a>SHELL</h1><p><strong>脚本是用户成功登录系统后启动，并始终作为用户与系统内核的交互接口。</strong></p>\n<ul>\n<li>系统都有一个默认的脚本，我们也可以在终端用find /bin/sh*命令查看我们有那几种脚本。</li>\n<li>我们也可以自定义文件的权限，以便实现文件的内容，简单点说就是脚本编程，通过改变文件的权限来把文件的实现。<h1 id=\"基本目录的解析\"><a href=\"#基本目录的解析\" class=\"headerlink\" title=\"基本目录的解析\"></a>基本目录的解析</h1><strong>基本上每台linux电脑都会有一个名为家的目录，在linux下的一切都是以文件的形式存放在目录下的，我们还可以通过更改文件的权限来把文件里的内容效果实现出来，这说的就有点远了，让我们回到刚刚的目录，我们都知道文件是存放在目录下面的，所以想想都知道目录的重要性了。</strong></li>\n<li>/ —         根目录</li>\n<li>bin/ —   存放必要的命令</li>\n<li>dev/ —   存放设备文件</li>\n<li>etc/ —   存放配置文件</li>\n<li>home/ —   主目录(存放用户的数据)</li>\n<li>lib/ —    存放必要的库</li>\n<li>mnt/ —    存放挂载的目录(一般为空)</li>\n<li>root/ —   超级用户的主目录</li>\n<li>proc/ —   虚拟目录(内存的映射)</li>\n<li>sbin/ —   存放用户经常使用的命令</li>\n<li>usr/ —    存放应用程序和文件(内存最大的目录) </li>\n</ul>\n<hr>\n<h1 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h1><p><strong>权限分为数字权限和隐藏权限</strong></p>\n<ol>\n<li>数字权限 —- 关键字— chmod</li>\n</ol>\n<ul>\n<li>权限分为可读，可写，可执行。数字表示分为4,2,1</li>\n<li>chmod 777  +文件名   更改文件的权限</li>\n</ul>\n<ol start=\"2\">\n<li>隐藏文件</li>\n</ol>\n<ul>\n<li>关键字 — chattr<br><img src=\"//EvanShady.github.io/2019/06/04/Noteslinux1/chattr.png\" alt=\"参数解析\"></li>\n<li>chattr +i 文件名</li>\n<li>查看的命令 —-   lsattr +文件名</li>\n</ul>\n<hr>\n<h1 id=\"查找文件的命令\"><a href=\"#查找文件的命令\" class=\"headerlink\" title=\"查找文件的命令\"></a>查找文件的命令</h1><blockquote>\n<p>find<br><strong>最大范围的查找文件，你也可以用这个命令来查找任何你想找的文件</strong></p>\n<ul>\n<li>分为时间查找和文件大小查找和名字查找</li>\n</ul>\n<ol>\n<li>比如自己建立一个测试目录并名为Test/</li>\n<li>里面都是以t开头的文件名</li>\n<li>我们就是在这个目录下查找这些子文件</li>\n</ol>\n<ul>\n<li>find ./ -name t* -ls</li>\n<li>-cmin -10(十分钟更改过的文件)</li>\n<li>-ctime -10(十小时更改过的文件)</li>\n<li>-amin -10(十分钟存取的文件)</li>\n<li>-atime -10(十小时存取的文件)</li>\n<li>-size +10k(查找大小为10k的文件)</li>\n</ul>\n</blockquote>\n<h2 id=\"这里的用到了转义字符，不然系统会给我们报错的信息\"><a href=\"#这里的用到了转义字符，不然系统会给我们报错的信息\" class=\"headerlink\" title=\"这里的用到了转义字符，不然系统会给我们报错的信息\"></a><strong>这里的用到了转义字符，不然系统会给我们报错的信息</strong></h2><blockquote>\n<blockquote>\n<p>whereis<br><strong>用来看查找可执行程序和应用程序和手册</strong></p>\n<ul>\n<li>-b(只查找二进制文件)</li>\n<li>-B(在指定的目录下查找二进制文件)</li>\n<li>-f(使用-B参数，用来终止最后的目录)</li>\n<li>-u(查找不包含指定类型的文件)</li>\n</ul>\n</blockquote>\n</blockquote>"},{"title":"c++Notes","date":"2019-05-21T07:13:50.000Z","_content":"      类\n<!--more-->\n\n\n# 关于类的一些理解\n----\n> 1:类是面对对象的编程，它是以对象为基本来进行编程的。这样的说法就是安慰一些我们这些编程人也可以每天面对对象，仅此而已。\n### 2:类有三种特性：封装,继承,多态。\n>> 类的封装，其实就是把成员变量设为私有的，也就是隐藏起来，然后再用方法/函数来实现你想要的结果。在类里面用set来进行封装，用get来返回。\n\n----\n# 类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\n**这里是用指针来new了一个空间，使用访问的时候也要用访问指针的方法来访问它，“->”**\n![main](c-Notes/YC4.png)\n![程序结果](c-Notes/YC5.png)\n\n----\n# this指针，它可以访问类里面的所有成员变量和函数，（this->加成员变量/成员函数）\n----\n> 构造函数也可以叫做重载函数，它的作用是初始化类的成员变量。\n>> 构造函数分为无参构造和有参构造；其实还有一个拷贝构造。\n1. 无参构造函数，也叫默认构造函数，随你喜欢。还有就是，无参构造函数是计算机自动调用的，就算你没调用它，计算机也会自动帮你调用。\n\n![无参构造函数](c-Notes/WC.png)\n\n----\n2. 有参构造函数，其实就是带参数的函数。\n\n![有参构造](c-Notes/YC.png)\n\n>>> 类里面的构造函数都是可以和show方法一起连用的，这样就可以看到构造函数无，有参之间的变化。\n\n![show](c-Notes/YC3.png)\n\n----\n\n![main函数](c-Notes/YC1.png)\n\n----\n![程序结果](c-Notes/YC2.png)\n\n----\n# 析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\n","source":"_posts/c-Notes.md","raw":"---\ntitle: c++Notes\ndate: 2019-05-21 15:13:50\ntags:\n---\n      类\n<!--more-->\n\n\n# 关于类的一些理解\n----\n> 1:类是面对对象的编程，它是以对象为基本来进行编程的。这样的说法就是安慰一些我们这些编程人也可以每天面对对象，仅此而已。\n### 2:类有三种特性：封装,继承,多态。\n>> 类的封装，其实就是把成员变量设为私有的，也就是隐藏起来，然后再用方法/函数来实现你想要的结果。在类里面用set来进行封装，用get来返回。\n\n----\n# 类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\n**这里是用指针来new了一个空间，使用访问的时候也要用访问指针的方法来访问它，“->”**\n![main](c-Notes/YC4.png)\n![程序结果](c-Notes/YC5.png)\n\n----\n# this指针，它可以访问类里面的所有成员变量和函数，（this->加成员变量/成员函数）\n----\n> 构造函数也可以叫做重载函数，它的作用是初始化类的成员变量。\n>> 构造函数分为无参构造和有参构造；其实还有一个拷贝构造。\n1. 无参构造函数，也叫默认构造函数，随你喜欢。还有就是，无参构造函数是计算机自动调用的，就算你没调用它，计算机也会自动帮你调用。\n\n![无参构造函数](c-Notes/WC.png)\n\n----\n2. 有参构造函数，其实就是带参数的函数。\n\n![有参构造](c-Notes/YC.png)\n\n>>> 类里面的构造函数都是可以和show方法一起连用的，这样就可以看到构造函数无，有参之间的变化。\n\n![show](c-Notes/YC3.png)\n\n----\n\n![main函数](c-Notes/YC1.png)\n\n----\n![程序结果](c-Notes/YC2.png)\n\n----\n# 析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\n","slug":"c-Notes","published":1,"updated":"2019-09-12T07:19:33.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgl0006goz7g1oakdww","content":"<pre><code>类\n</code></pre><a id=\"more\"></a>\n<h1 id=\"关于类的一些理解\"><a href=\"#关于类的一些理解\" class=\"headerlink\" title=\"关于类的一些理解\"></a>关于类的一些理解</h1><hr>\n<blockquote>\n<p>1:类是面对对象的编程，它是以对象为基本来进行编程的。这样的说法就是安慰一些我们这些编程人也可以每天面对对象，仅此而已。</p>\n</blockquote>\n<h3 id=\"2-类有三种特性：封装-继承-多态。\"><a href=\"#2-类有三种特性：封装-继承-多态。\" class=\"headerlink\" title=\"2:类有三种特性：封装,继承,多态。\"></a>2:类有三种特性：封装,继承,多态。</h3><blockquote>\n<blockquote>\n<p>类的封装，其实就是把成员变量设为私有的，也就是隐藏起来，然后再用方法/函数来实现你想要的结果。在类里面用set来进行封装，用get来返回。</p>\n</blockquote>\n</blockquote>\n<hr>\n<h1 id=\"类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\"><a href=\"#类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\" class=\"headerlink\" title=\"类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\"></a>类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！</h1><p><strong>这里是用指针来new了一个空间，使用访问的时候也要用访问指针的方法来访问它，“-&gt;”</strong><br><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC4.png\" alt=\"main\"><br><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC5.png\" alt=\"程序结果\"></p>\n<hr>\n<h1 id=\"this指针，它可以访问类里面的所有成员变量和函数，（this-gt-加成员变量-成员函数）\"><a href=\"#this指针，它可以访问类里面的所有成员变量和函数，（this-gt-加成员变量-成员函数）\" class=\"headerlink\" title=\"this指针，它可以访问类里面的所有成员变量和函数，（this-&gt;加成员变量/成员函数）\"></a>this指针，它可以访问类里面的所有成员变量和函数，（this-&gt;加成员变量/成员函数）</h1><hr>\n<blockquote>\n<p>构造函数也可以叫做重载函数，它的作用是初始化类的成员变量。</p>\n<blockquote>\n<p>构造函数分为无参构造和有参构造；其实还有一个拷贝构造。</p>\n<ol>\n<li>无参构造函数，也叫默认构造函数，随你喜欢。还有就是，无参构造函数是计算机自动调用的，就算你没调用它，计算机也会自动帮你调用。</li>\n</ol>\n</blockquote>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/WC.png\" alt=\"无参构造函数\"></p>\n<hr>\n<ol start=\"2\">\n<li>有参构造函数，其实就是带参数的函数。</li>\n</ol>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC.png\" alt=\"有参构造\"></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>类里面的构造函数都是可以和show方法一起连用的，这样就可以看到构造函数无，有参之间的变化。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC3.png\" alt=\"show\"></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC1.png\" alt=\"main函数\"></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC2.png\" alt=\"程序结果\"></p>\n<hr>\n<h1 id=\"析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\"><a href=\"#析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\" class=\"headerlink\" title=\"析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\"></a>析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。</h1>","site":{"data":{}},"excerpt":"<pre><code>类\n</code></pre>","more":"<h1 id=\"关于类的一些理解\"><a href=\"#关于类的一些理解\" class=\"headerlink\" title=\"关于类的一些理解\"></a>关于类的一些理解</h1><hr>\n<blockquote>\n<p>1:类是面对对象的编程，它是以对象为基本来进行编程的。这样的说法就是安慰一些我们这些编程人也可以每天面对对象，仅此而已。</p>\n</blockquote>\n<h3 id=\"2-类有三种特性：封装-继承-多态。\"><a href=\"#2-类有三种特性：封装-继承-多态。\" class=\"headerlink\" title=\"2:类有三种特性：封装,继承,多态。\"></a>2:类有三种特性：封装,继承,多态。</h3><blockquote>\n<blockquote>\n<p>类的封装，其实就是把成员变量设为私有的，也就是隐藏起来，然后再用方法/函数来实现你想要的结果。在类里面用set来进行封装，用get来返回。</p>\n</blockquote>\n</blockquote>\n<hr>\n<h1 id=\"类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\"><a href=\"#类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\" class=\"headerlink\" title=\"类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！\"></a>类还可以用指针来实现。用new在堆内存里申请一个空间，记得要用delete来释放空间！！！</h1><p><strong>这里是用指针来new了一个空间，使用访问的时候也要用访问指针的方法来访问它，“-&gt;”</strong><br><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC4.png\" alt=\"main\"><br><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC5.png\" alt=\"程序结果\"></p>\n<hr>\n<h1 id=\"this指针，它可以访问类里面的所有成员变量和函数，（this-gt-加成员变量-成员函数）\"><a href=\"#this指针，它可以访问类里面的所有成员变量和函数，（this-gt-加成员变量-成员函数）\" class=\"headerlink\" title=\"this指针，它可以访问类里面的所有成员变量和函数，（this-&gt;加成员变量/成员函数）\"></a>this指针，它可以访问类里面的所有成员变量和函数，（this-&gt;加成员变量/成员函数）</h1><hr>\n<blockquote>\n<p>构造函数也可以叫做重载函数，它的作用是初始化类的成员变量。</p>\n<blockquote>\n<p>构造函数分为无参构造和有参构造；其实还有一个拷贝构造。</p>\n<ol>\n<li>无参构造函数，也叫默认构造函数，随你喜欢。还有就是，无参构造函数是计算机自动调用的，就算你没调用它，计算机也会自动帮你调用。</li>\n</ol>\n</blockquote>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/WC.png\" alt=\"无参构造函数\"></p>\n<hr>\n<ol start=\"2\">\n<li>有参构造函数，其实就是带参数的函数。</li>\n</ol>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC.png\" alt=\"有参构造\"></p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>类里面的构造函数都是可以和show方法一起连用的，这样就可以看到构造函数无，有参之间的变化。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC3.png\" alt=\"show\"></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC1.png\" alt=\"main函数\"></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/05/21/c-Notes/YC2.png\" alt=\"程序结果\"></p>\n<hr>\n<h1 id=\"析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\"><a href=\"#析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\" class=\"headerlink\" title=\"析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。\"></a>析构函数其实是释放为指针成员变量的。比如你用指针new了一个新的成员变量，那在你程序完以后你得要释放它吧，总不能让它成为我们所畏惧的野指针，这时你就可以在析构函数里释放。</h1>"},{"title":"constellation","date":"2019-06-19T11:09:20.000Z","_content":"         星座\n<!--more-->\n\n# 星座\n* 根据输入的生日日期来输出星座\n```\n#include<iostream>\nusing namespace std;\nint main(){\n    int a(0),b(0);\n    string conste[12][2]{//把十二个星座按照月份放进数组里\n        {\"魔蟹座\",\"水瓶座\"},\n        {\"水瓶座\",\"双鱼座\"},\n        {\"双鱼座\",\"白羊座\"},\n        {\"白羊座\",\"金牛座\"},\n        {\"金牛座\",\"双子座\"},\n        {\"双子座\",\"巨蟹座\"},\n        {\"巨蟹座\",\"狮子座\"},\n        {\"狮子座\",\"处女座\"},\n        {\"处女座\",\"天秤座\"},\n        {\"天秤座\",\"天蝎座\"},\n        {\"天蝎座\",\"射手座\"},\n        {\"射手座\",\"魔蟹座\"},\n    };\n    int constel[]{20,19,21,20,21,22,23,23,23,24,23,22};\n    //把所有星座的转换日期放进数组里\n    cout<<\"请输入你生日的月份：\"<<endl;\n    cin>>a;\n    cout<<\"请输入你生日的日期：\"<<endl;\n    cin>>b;\n    cout<<\"你的星座是：\"<<conset[a-1][b/consetl[a-1]]<<endl;\n}\n```\n**这只是简单的打印星座，思路是，先把十二星座按照月份写进一个二位数组里面，然后再把每个星座的转换日期写进另外一个数组里，用输入的生日的几号来处以星座转换日期，得到的0为当前月份的前者，得到1为当前月份的后者。**\n","source":"_posts/constellation.md","raw":"---\ntitle: constellation\ndate: 2019-06-19 19:09:20\ntags:\n---\n         星座\n<!--more-->\n\n# 星座\n* 根据输入的生日日期来输出星座\n```\n#include<iostream>\nusing namespace std;\nint main(){\n    int a(0),b(0);\n    string conste[12][2]{//把十二个星座按照月份放进数组里\n        {\"魔蟹座\",\"水瓶座\"},\n        {\"水瓶座\",\"双鱼座\"},\n        {\"双鱼座\",\"白羊座\"},\n        {\"白羊座\",\"金牛座\"},\n        {\"金牛座\",\"双子座\"},\n        {\"双子座\",\"巨蟹座\"},\n        {\"巨蟹座\",\"狮子座\"},\n        {\"狮子座\",\"处女座\"},\n        {\"处女座\",\"天秤座\"},\n        {\"天秤座\",\"天蝎座\"},\n        {\"天蝎座\",\"射手座\"},\n        {\"射手座\",\"魔蟹座\"},\n    };\n    int constel[]{20,19,21,20,21,22,23,23,23,24,23,22};\n    //把所有星座的转换日期放进数组里\n    cout<<\"请输入你生日的月份：\"<<endl;\n    cin>>a;\n    cout<<\"请输入你生日的日期：\"<<endl;\n    cin>>b;\n    cout<<\"你的星座是：\"<<conset[a-1][b/consetl[a-1]]<<endl;\n}\n```\n**这只是简单的打印星座，思路是，先把十二星座按照月份写进一个二位数组里面，然后再把每个星座的转换日期写进另外一个数组里，用输入的生日的几号来处以星座转换日期，得到的0为当前月份的前者，得到1为当前月份的后者。**\n","slug":"constellation","published":1,"updated":"2019-09-12T07:18:59.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgl0007goz70yc7uq9d","content":"<pre><code>星座\n</code></pre><a id=\"more\"></a>\n<h1 id=\"星座\"><a href=\"#星座\" class=\"headerlink\" title=\"星座\"></a>星座</h1><ul>\n<li>根据输入的生日日期来输出星座<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int a(0),b(0);</span><br><span class=\"line\">    string conste[12][2]&#123;//把十二个星座按照月份放进数组里</span><br><span class=\"line\">        &#123;&quot;魔蟹座&quot;,&quot;水瓶座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;水瓶座&quot;,&quot;双鱼座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;双鱼座&quot;,&quot;白羊座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;白羊座&quot;,&quot;金牛座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;金牛座&quot;,&quot;双子座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;双子座&quot;,&quot;巨蟹座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;巨蟹座&quot;,&quot;狮子座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;狮子座&quot;,&quot;处女座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;处女座&quot;,&quot;天秤座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;天秤座&quot;,&quot;天蝎座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;天蝎座&quot;,&quot;射手座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;射手座&quot;,&quot;魔蟹座&quot;&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    int constel[]&#123;20,19,21,20,21,22,23,23,23,24,23,22&#125;;</span><br><span class=\"line\">    //把所有星座的转换日期放进数组里</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入你生日的月份：&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;a;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入你生日的日期：&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;b;</span><br><span class=\"line\">    cout&lt;&lt;&quot;你的星座是：&quot;&lt;&lt;conset[a-1][b/consetl[a-1]]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>这只是简单的打印星座，思路是，先把十二星座按照月份写进一个二位数组里面，然后再把每个星座的转换日期写进另外一个数组里，用输入的生日的几号来处以星座转换日期，得到的0为当前月份的前者，得到1为当前月份的后者。</strong></p>\n","site":{"data":{}},"excerpt":"<pre><code>星座\n</code></pre>","more":"<h1 id=\"星座\"><a href=\"#星座\" class=\"headerlink\" title=\"星座\"></a>星座</h1><ul>\n<li>根据输入的生日日期来输出星座<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int a(0),b(0);</span><br><span class=\"line\">    string conste[12][2]&#123;//把十二个星座按照月份放进数组里</span><br><span class=\"line\">        &#123;&quot;魔蟹座&quot;,&quot;水瓶座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;水瓶座&quot;,&quot;双鱼座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;双鱼座&quot;,&quot;白羊座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;白羊座&quot;,&quot;金牛座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;金牛座&quot;,&quot;双子座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;双子座&quot;,&quot;巨蟹座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;巨蟹座&quot;,&quot;狮子座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;狮子座&quot;,&quot;处女座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;处女座&quot;,&quot;天秤座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;天秤座&quot;,&quot;天蝎座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;天蝎座&quot;,&quot;射手座&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;射手座&quot;,&quot;魔蟹座&quot;&#125;,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    int constel[]&#123;20,19,21,20,21,22,23,23,23,24,23,22&#125;;</span><br><span class=\"line\">    //把所有星座的转换日期放进数组里</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入你生日的月份：&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;a;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入你生日的日期：&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;b;</span><br><span class=\"line\">    cout&lt;&lt;&quot;你的星座是：&quot;&lt;&lt;conset[a-1][b/consetl[a-1]]&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>这只是简单的打印星座，思路是，先把十二星座按照月份写进一个二位数组里面，然后再把每个星座的转换日期写进另外一个数组里，用输入的生日的几号来处以星座转换日期，得到的0为当前月份的前者，得到1为当前月份的后者。</strong></p>"},{"title":"Hello World","_content":"注释\n<!--more-->\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n```bash\n$ hexo n + 文件名 1. 在本地建立文件\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n```bash\n$ hexo s          2. 推送到本地库\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n```bash\n$ hexo g          3. 在本地生成\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n```bash\n$ hexo d          4. 推送到远程库\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n注释\n<!--more-->\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n```bash\n$ hexo n + 文件名 1. 在本地建立文件\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n```bash\n$ hexo s          2. 推送到本地库\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n```bash\n$ hexo g          3. 在本地生成\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n```bash\n$ hexo d          4. 推送到远程库\n```\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-09-10T09:11:24.860Z","updated":"2019-09-10T09:11:24.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgo000agoz7plj5s9wi","content":"<p>注释<br><a id=\"more\"></a><br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n + 文件名 1. 在本地建立文件</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s          2. 推送到本地库</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g          3. 在本地生成</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d          4. 推送到远程库</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>注释<br></p>","more":"<br>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<p></p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo n + 文件名 1. 在本地建立文件</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo s          2. 推送到本地库</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g          3. 在本地生成</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d          4. 推送到远程库</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"C++Book","date":"2019-06-12T06:31:03.000Z","_content":"                      c++\n <!--more-->\n# C++Book\n# 库\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    cout<<hello would<<endl;\n    return 0;\n}\n```\n**在上面的代码我们应该都知道我什么都没有实现，这只是在简单的阐述一下c++库的重要性，也可以说是让我们更深刻的认识到有些代码的意思是什么。**\n\n* #include,using (预编译指令) \n* iostream (是c++标准库，方便使用cout,cin,) \n* using namespace std (是命名空间,std,因为在库里大多数都有std命名空间的部分，所以规定这些名称为std)\n# 结构函数\n* 关键字struct+结构名\n```\n#include <iostream>\nusing namespace std;\nstruct point{\n    int a=5;\n    int b=10;\n};\nint main(){\n    point *p=new point;    //在堆内存里new了内存\n    p->a=10;\n    p->b=5;\n    cout<<p1->a<<\"\\t\"<<p1-><<endl;\n    point p1,p2;              //在栈内存里实现,还把poit里的参数全部给p2使用\n    cout<<p1.a<<\"\\t\"<<p1.b<<endl;\n    cout<<p2.a<<\"\\t\"<<p2.b<<endl;\n}\n```\n运行结果：\n```\n5    10\n5    10\n5    10\n```\n**其实结构和类是相似的**\n\n----\n# 联合函数\n* 关键字union+名字\n```\n#include <iostream>\nusing namespace std;\nunion test{\n    int a;\n    char b;\n};\nint main(){\n    test *p=new test;         //在堆内存new了内存\n    p->a=97;\n    cout<<p->a<<\"的字符表示是：\"<<p->b<<endl;\n    test t1;                  //在栈内存里实现\n    t1.a=65;\n    cout<<t1.a<<\"的字符表示是：\"<<t.b<<endl;\n}\n```\n**一样的和类相似，在栈和堆内存一样使用,不相同的是：联合函数你可以给变量的其中一个赋值，而另外一个变量会自己把已经赋值的那个变量的值赋给自己。**\n\n----\n# 枚举函数\n* 关键字enum+名字\n```\n#include <iostream>\nusing namespace std;\nenum Arrow{\n    eroos,ok,warning,\n}\nint main(){\n    Arrow a1=eroos;\n    Arrow a2=ok;\n    Arrow a3=warning;\n    cout<<a1<<a2<<a3<<endl;\n}\n```\n运行结果：\n```\n0\n1\n2\n```\n**枚举的特点：它是以字符的形式声明的，但输出的确实整数型的数字**\n\n----\n# 排序\n**排序的方法有很多，但我们只要理解一种就可以了。我选择冒泡排序**\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    int arr[]={3,10,5,11,6}\n    for(int i=5-1;i>0;i--){\n        //把第一个数字设置为最大的数字来跟剩下的数字一起来比较，所以这的次数是总数来减一\n        for(int j=0;j<i;j++>){\n            //把每一次大的循环里的数组的大值都往后一个交换位置\n            if(arr[j]>arr[j+1]){//条件满足就交换位置\n                int temp;\n                temp=arr[j];\n                arr[j]=arr[j+1];\n                arr[j+1]=temp;\n            }\n        }\n    }\n    cout<<\"排序后\"<<endl;\n    for(int i=0;i<5;i++){\n        cout<<arr[i]<<endl;\n    }\n}\n```\n运行结果\n```\n排序后\n3\n5\n6\n10\n11\n```\n# 递归函数\n**递归函数:调用的时候是使用栈内存来实现的，函数一层一层的往下递归，递归的同时会把函数停住，而计算机会重复的把信息保存到栈内存里，遇到递归停止的条件时又会一层一层的往上走在信息停止的那一步，从而实现递归的真正意义。值得注意的是，递归是栈内存的实现，它把信息放在最底层上。每当计算机往上走的时候都是从最低下中读取信息的。栈是先出后入的内存结构。**\n* 通俗一点的意思就是在本函数里调用自身函数。\n```\n#include <iostream>\nusing namespace std;\nint add(int i){\n    cout<<\"函数开始:i=\"<<i<<endl;\n    if(i=5){\n        return i;\n    }else\n    {\n        add(++i);\n    }\n    cout<<\"函数结束,返回值为：\"<<i<<endl;\n    return i;\n}\nint main(){\n    cout<<add(1)<<endl;\n}\n```\n函数的结果：`\n```\n函数开始：i=1\n函数开始：i=2\n函数开始：i=3\n函数开始：i=4\n函数开始：i=5\n函数结束，返回值为：5\n函数结束，返回值为：4\n函数结束，返回值为：3\n函数结束，返回值为：2\n函数结束，返回值为：1\n```\n* 这里的先是返回的自身函数调用的结果，这里编译器里是有五个变量来暂时存储自身函数的值，每当执行到函数返回的时候编译器都会从暂时存储那里把值返回给我们，还有一种理解，就是这个函数里的变量在每次自身函数调用的时候都被隐藏起来了，也就是说每次的自身函数的调用它都有不同的存储位置来让变量重新赋值。其实，递归函数是在返回的时候才是这种函数真真的意义，因为自身函数的最后一次刚好是函数返回值的第一次。\n```\n//阶乘的实现\n#include <iostream>\nusing namespace std;\nint test(int test1){\n    int val;\n    if(test1==1){//递归的停止条件\n        val=1;\n        return val;\n    }else{\n        val=test1*test(test1-1);\n        return val;\n    }\n}\nint main(){\n    cout<<\"实现阶乘,请输入一个数字:\"<<endl;\n    int t1;\n    cin>>t1;\n    cout<<test(t1)<<endl;\n}\n```\n**强调一下，递归的停止条件的重要性，一旦递归没遇到停止的条件就会无穷的死循环，直到计算机的内存都跑完!!!**\n```\n#include <iostream>\nusing namespace std;\nint test(int t1,int t2){\n    if(t2==0){\n        return 1;//递归的停止条件,t2==0,就返回1\n    }else{\n        return test(t1,t2-1)*t1;//上面返回的值来当作第一次的值，然后一直往上计算\n    }\n}\nint main(){\n    cout<<test(3,2)<<endl;\n}\n```\n运行结果\n```\n9\n```\n**递归的三大条件**\n* (有返回值类型，无返回值类型)\n1. 没有无穷的递归\n2. 每一种停止的情况都执行(返回)那种情况下的正确操作\n3. 所有递归函数的调用都能正确的执行操作，那么最后的结果一定是正确的\n----\n# 函数与指针\n* 指向函数的指针\n```\n#include <iostream>\nusing namespace std;\nint add(int a){\n    return a;\n}\nint test(int a){\n    return a;\n}\nint main(){\n    int (*p)(int a)=&add;//指向函数的指针\n    cout<<P(5)<<endl;\n    int (*ip[])(int a)={&add,&test};//指向多个函数的指针数组\n    cout<<ip[0](1)<<ip[1](2)<<endl;\n}\n```\n函数的结果：\n```\n5\n1\n2\n```\n* 这里的指针都是储存在栈内存里的。\n----\n# 预处理\n* 格式化代码，去除多余的空格和注释\n* 进行一些宏替换\n* 包含另外一段代码\n* 通过一些条件的判断，动态决定是否编译某段代码\n1. 宏定义\n\n**在定义宏的时候记得不要在定义的后面加分号！！！**\n----\n```\n#include <iostream>\nusing namespace std;\n#define MAX 9               //宏定义\n#define MAN2 MAX*MAX        //宏定义\nint main(){\n    cout<<MAX<<endl;\n    cout<<MAX2<<endl;\n}\n```\n运行结果为：\n```\n9\n81\n```\n2. 带参数的宏定义\n```\n#include <iostream>\nusing namespace std;\n#define MAX 3                        //无参宏定义\n#define space(x) ((x)*(x))           //声明一个带参数的宏定义\nint main(){\n    for(int i=1;i<=MAX;i++){\n        cout<<i<<\"的平方是：\"<<space(i)<<endl;\n    }\n}\n```\n运行结果是：\n```\n1的平方是：1\n2的平方是：4\n3的平方是：9\n```\n```\n#include <iostream>\nusing namespace std;\n#define add(a,b)(a+b)           //带参的宏定义\n#define test(x) #x         //#是连接\n#define test1(a*,* b) a##b        //a和b是连接在一起的\nint main(){\n    string s1(\"hello,\");        //字符串\n    string s2(\"world!\");\n    cout<<add(100,100)<<endl;\n    cout<<add(s1,s2)<<endl;     //使用宏来实现字符串的相加\n    cout<<test(hello world)<<endl;\n    int ab=10;\n    cout<<test1(a,b)<<endl;//这里的ab是连接起来的，所以在前面定义了ab的值，也就是说这里输出的只是变量ab的值，并不是说把a和b当作实参过去的。\n}\n```\n运行结果是：\n```\n200\nhello,world\nhelloworld\n10\n```\n**说明了宏的优点有:避免了强类型的检测**\n----\n3. 宏与常量，函数\n宏与常量有点相似，但当他们遇上指针和引用之后又会变成什么呢？\n```\n#include <iostream>\nusing namespace std;\n#define x 10\nconst int y=5;\nint main(){\n    const int &a=x;          //ok\n    const int *p=&y;         //ok\n    cout<<a<<\"\\t\"<<*p<<endl;\n}\n```\n运行结果：\n```\n10    5\n```\n**这里给宏使用了引用，给常量使用了指针。还在定义的前面都加了const类型。**\n**但是在这里还是不希望使用引用和指针的方式来操作宏和常量,把宏看作是简单的文本替换，这也是宏的原本意义。**\n\n**宏不允许重新定义，也就是说一个相同的宏只能被定义一次，要想修改宏的值，你只能先消除它，使用#undef关键来消除，然后你就可以重新定义了。**\n4. 在c++中有还有内置的宏\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    cout<<__TIME__<<endl; //输出当前代码运行的时间\n    cout<<__DATE<<endl;   //输出当前代码运行的日期\n    cout<<__LINE<<endl;   //输出当前代码的所在行号\n    cout<<__FIME__<<endl; //输出当前代码的文件路径\n}\n```\n5. #if #elif #else  #ifdef #ifndef\n```\n#include <iostream>\nusing namespace std;\n#define a 10\nint main(){\n    #if a<20\n    cout<<\"欢迎使用测试版\"<<endl;\n    #else\n    cout<<\"欢迎使用正版\"<<endl;\n    #endif\n    return 0;\n}\n```\n运行的结果：\n```\n欢迎使用测试版\n```\n**#if类似与我们在以前代码里的if，#else类似与else,#elif类似elseif**\n**#endif,很重要。如果没有它你的程序是跑不起来的。**\n---\n**在c++中有很多预定义函数，这其中有一中是异常处理函数，关键字(try)** \n```\n#include <iostream>\nusing namespace std;\nint main(){\n     __try{\n      int i;\n      cout<<\"请输入一个数字\"<<end;\n      cin>>i;\n      if(i<=0){\n      throw \"error\"\n     }\n      }catch(const char *p){//指定抛出异常的类型\n         cout<<p<<endl;\n      }catch(...){\n      cout<<\"在main函数里有异常\"<<endl;//任何抛出异常的类型都能接受,这里虽然是可以接受任何类型的异常但在前面已经有指定的抛出类型，所以在这里输出的是指定的抛出类型\n      }\n}\n```\n---\n**e.what(是用来打印异常抛出的)** \n```\n运行结果\nerror\n```\n---\n![不同的类型抛出](C-Book/c-Book4.png)\n- [ ] bad_typeid:\n- [ ] bad_cast\n- [ ] bad_alloc:在new一个内存时，如果没有足够的空间时会抛出异常来，\n- [ ] ios_base::failure:上一个的异常抛出打印的类型\n- [ ] logic_error---out_of_range:这是数组下标越界会抛出(out_of_range)类型的异常来\n\n```\n#include <iostream>\nusing namespace std;\n#define a 10\nint main(){\n    #ifdef a\n    cout<<\"欢迎使用正版\"<<endl;\n    #endif\n    return 0;\n    #ifndef\n    cout<<\"欢迎使用测试版\"<<endl;\n    #endif\n    return 0;\n}\n```\n**值得注意的是，#ifdef和#ifndef都要有#endif使用，#endif的意思应该是结束if**\n\n----\n# 预定义字符函数\n**预定义字符函数就是把字符转换成大，小写的字符，在计算机中，我们虽然是以字符的形式输入到计算机中，但计算机本身的运作却是以数字的形式来使用的。值得注意的是，书上写的需要头文件但我这里是不需要头文件的，可能是版本的问题吧，如果有报错的话就加个头文件(cctype)**\n1. toupper()(把字符转换成大写的)\n2. tolower()(小写) \n3. isupper()(如果字符是大写的就为true，否则false)\n4. islower()(同上)\n5. isspace()(如果字符是空白字符就为true,否则false)，一般这个识别的都跟着cin.get()这个函数，因为它识别空格，你可以在它识别空格的时候输出一些东西，下面有个小列子。\n```\n#include <iostream>\nusing namespace std;\nvoid test(){\n    char a,b;\n    cout<<\"请输入字符\"<<endl;\n    cin>>b;\n    a=toupper(b)\n    cout<<c<<endl;\n    if(isupper(b)){//条件一开始为false\n        cout<<\"转换成功\\t\"<<a<<endl;\n    }else{\n        cout<<\"转换失败\"<<endl;\n    }\n}\nint main(){\n    test();\n    char c;\n    cout<<\"请输入字符\"<<endl;\n    do{\n        cin.get(c);//逐步输入字符\n        if(isspace(c)){//判断是否符合条件     空格\n            cout<<'--';\n        }else{\n            cout<<c<<endl;\n        }\n    }while(c!='.');\n    cin.get();//识别空格，是空格就打印下面的那句话\n    cout<<\"空格\"<<endl;\n}\n```\n运行结果\n```\n请输入字符\na\n转换成功   A\n请输入字符\nadd test\nadd--test--.\n```\n----\n# 类\n   **类的特征**\n   -----\n1. 类同时具有成员变量和成员函数。\n2. 成员可变成私有和共有\n3. 正常下类的成员变量是私有的\n4. 类的私有成员只能在本类的函数里面定义和调用\n5. 类的成员函数可以像普通的函数一样重载\n6. 一个类可将另外一个类作为自己的成员变量的类性使用\n7. 函数的i形参可以是类的类型\n8. 类可以是函数的返回值类型\n----\n**类的基本**\n* 所有的成员变量设为私有的\n* 用户程序员通过函数作为成员变量的接口来访问变量和完善的规定如何使用每一个公共成员函数\n* 任何辅助函数都设为私有的\n----\n* 以前的数据和操作的过程都不是独立的，而c++允许我们将一些数据和操作数据的过程放在同一个地方，并封装成一个独立的个体。\n* 万物皆对象，这句话对c++程序员来说并不陌生。这并不代表我们缺少对象，对于我们这种高质男来说从来没担心过搞不到对象，因为我们随时随地都可以new一个对象出来，这不是一般人可以做到的，只有真的走进来了才可以的，虽然这个操作在c++中也不算是什么高难度的操作，但我们又不是学到这里就完事的。类和结构是完全可以交换的，唯一不一样的是结构的默认特性是public,而类的默认特性是private。\n----\n1. 数据类型:由值的集合以及为那些值定义的一组基本运算构成 \n2. 抽像数据类型(ADT):使用数据类型的程序员访问不了值和运算的细节 \n* 封装，是用简单明了的公有函数的方式为外部程序提供对象操作接口。\n# 成员对象\n* 分为三种：public,private，protected\n1. 公有对象：不管是在类里还是在外部都能被访问到。\n2. 私有对象：只能在本类中访问到。\n3. 保护对象：只能在本类中访问到，在外部是访问不到的。\n# 运算符重载\n1. 重载运算符，至少要有一个参数的类型是类\n2. 重载的函数可以是类的友元函数也可以是成员函数\n3. 不能新建运算符\n4. 不能改变获取的形参操作符的意义\n5. 不能改变操作符的优先级\n6. 不能重载一下操作符(.(圆点)::(作用域)...)    \n```\nclass Son;//先声明Son类\nclass Bos{\nfriend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员\nfriend ostream &operator<<(ostream &os,Bos bos);//友元函数，用来访问类的私有成员\nprivate:\n    int a=10;\n    int b=5;\n}\nclass Son{\nfriend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员\nfriend ostream &operator<<(ostream &os,Bos bos);//友元函数，用来访问类的私有成员\nprivate:\n    int a=5;\n    int b=10;\n}\nint operator+(Bos bos,Son son){//运算符重载加号\n    int a=bos.a+bos.b;\n    int b=son.a+son.b;\n    return a,b;\n}\nostream &operator<<(ostream &os,Bos bos){//运算符重载<<号\n    os<<\"a=\"<<bos.a<<\"b=\"<<bos.b<<endl;//把成员变量连接在cout流中\n    return os;//返回cout，这样就能在main函数中直接打印\n}\nint main(){\n    Bos bos;\n    Son son\n    cout<<bos+son<<endl;//这要是没有重载加号，是运行不过的\n    cout<<bos<<endl;//没有重载<<也是运行不过来的\n}\n```\n**谨慎参考，纯属本人理解。ostream,是因为要用到cout流，因为输出流是属于ostream里面的，&,是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。**\n----\n# const mutable\n* 众所周知，const是常量类型。而mutable是可变的，就像是普通变量。\n# vector\n```\n#include <iostream>\n#include <vector>\nusing namespace std;\nint main(){\n    vector <int >a{10,20,3,5,1};\n    a.insert(a.begin(),8);//在向量最前面插入数字8\n    sort(a.begin(),a.end());//升序\n    vector <int >::iterator it;//打印\n    for(it=a.begin();it!=a.end();it++){\n        cout<<*it<<\"      \";\n    }\n    reverse(a.begin(),a.end());//逆序\n    for(it=a.begin();it!=a.end();it++){\n        cout<<*it<<\"      \";\n    }\n    a.clear();//清除向量\n    vector <int > b;\n    a.swap(b);\n    for(it=b.begin();it!=b.end();it++){\n        cout<<*it<<\"      \";\n    }\n```\n---\n```\n运行结果\n1    3    5   8   10   20\n20   10   8   5   3   1\n20   10   8   5   3   1\n```\n```\n# include <iostream>\nusing namespace std;\nint main (){\n      int numb[]={10,20,23,11,}\n      int numb1[4]={0};\n      memcpy(numb1,numb,sizeof(numb));\n      for(int i=0;i<4;i++){\n      cout<<numb1[i]<<'   ';\n      }\n}\n```\n---\n\n```\n运行结果\n10   20   23   11\n```\n---\n\n- [ ] **静态成员函数和静态成员变量**\n\n```\n#include <iostream>\nusing namespace std;\n\".h\"\n# include <iostream>\nclass Test{\n      private:\n      static int a;\n      int b;\n      public:\n      Test(int _a){\n      a=_a;\n      ++b;\n      }\n      static void show(Test tt){//静态成员函数中通过对象来引用非静态成员\n      cout<<\"tt.a=\"<tt.a<<endl;\n      cout<<\"Test::b=\"<<Test::b<<endl;\n      cout<<\"tt.b=\"<<tt.b<<endl;\n      }\n}\nint Test::b=0;//这是放在main函数上面的\nint main(){\n        Test t1(100);\n        Test t2(200);\n        Test::show(t1);\n        Test::show(t2);//静态成员函数调用时不用对象名 \n\n}\n```\n```\n运行结果为：\ntt.a=100\nTest::b=2\ntt.b=2\ntt.a=200\nTest::b=2\ntt.b=2\n```\n\n# 继承\n```\nclass Teacher{\n    string _name;\n    int _year;\n    Teacher(string name,int year){\n        this->_name=name;\n        this->_year=year;\n    }\n    void show(){\n        cout<<this->_name<<\"老师的年龄是：\"<<this->_year<<endl;\n    }\n}\nclass Student::puble Teacher{\npublic:\n       Student(string name,int year):Teacher(name,year){\n       }\n}\n```\n**上面的基类用的是构造函数来给自己赋初始化的，所以在派生类也要写上自己的构造函数才算继承基类。**\n\n```\nint main(){\n    Student s1(\"小明\",18);\n    s1.show();\n}\n```\n运行结果是：\n```\n小明的年龄是：18 \n```\n**这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。**\n----\n* 继承的方式有三种：public private protected\n公有继承, 私有继承, 保护继承\n1. 公有继承：是以公有的形式来继承的基类，这也就意味着在基类是什么类型的在派生类也是一样的关系。\n2. 私有继承：是以私有的形式来继承的基类,就是说继承下来的基类都是以私有的形式来继承的。\n3. 保护继承：是以保护的形式来继承的基类，它是基于公有继承和私有继承的中间，如果你不想在外界被访问到，又想在派生类中被访问，这就可以用保护的形式来继承下来了，但基类的私有成员对象在保护的派生类中依然是私有成员对象。\n![继承的方式](C-Book/c-Book.png)\n**派生类不会自动的继承基类的构造函数**\n# 隐藏\n* 我们以后难免会在派生类里定义属于它自己的成员变量和成员函数，但当我们在声明和定义的时候有时也会不小心的把成员变量和成员函数与基类的成员变量和成员函数名字相同，这是我们的程序就会出现名字隐藏的现象，对于隐藏就是说当我们的派生类与基类中有名字相同的，就可能会出现隐藏。如果不知道什么时候被隐藏了什么，我们可以加上作用域去看看，在这里，我的建议是，尽量不要在继承类里面用同样的名字，不然你会很自闭的。\n* 基类的析构函数最好加上关键字（virtual）写成虚函数，这样在派生类的时候的就能自动调用，而对于，纯虚函数，在派生类中是要重写的性质，因为在基类的纯虚函数是空函数一个，它的本质就是一定要在派生类里面实现它的意义。一个良好的习惯：最好把基类的析构函数写成虚的，这样在派生类中是会自动调用的。\n\n**纯虚函数是不能对它进行实例化的，也就是说不能给它创建对象，这是要注意的重点，不能说你定义的是一个纯虚函数，然后你又在main函数里给它创建一个对象来进行一些操作。** \n\n\n**在实际开发中，你可以定义一个抽象基类，只完成部分功能，未完成的功能交给派生类去实现(谁派生谁实现)。这部分的功能往往是基类不需要的，或者是在基类中实现不了的，虽然基类完成不了，但强制交给了派生类去实现，否则一样不能被实例化。** \n\n**抽象基类除了限制了派生类，也实现了多态(也就是说在main函数里，你可以使用基类来调用派生类里面重写的纯虚函数)。** \n\n# 抽象类\n* 其实就是在类里面把函数写成是纯虚函数，这样在派生类里就剩下重写这些虚函数。一般把抽象类用来设计一套统一的接口。\n![例子](C-Book/c-Book2.png)\n![例子](C-Book/c-Book1.png)\n![运行结果](C-Book/c-Book3.png)\n**重新认识了类的继承，这里我没有用到构造函数来给成员变量赋值，因为用了构造函数会变的很自闭，发正我是完全不能理解的那种，所以我用来另外一种方法，虽然算不上什么，但我觉得自己理解写出来的东西是可以的。孙悟空吃唐僧，这是多么厉害的，我想这个结果连孙悟空自己也不敢想的，我帮他实现了，嘻嘻。**\n* 这里的基类是不能被实例化的，因为基类里面的show方法，我用的是纯虚函数来写的，不能被实例化，但在派生类要实现，你不实现的话，你写这个虚函数就没意义了，基类的纯虚函数在派生类你一定要写进去，不要编译器会报错的，\n# 拷贝构造函数\n**在类中有指针又要多个类的对象的时候最好写一下类的拷贝构造函数**\n1. 在程序中的拷贝是浅拷贝，也就是说在类中只是简单的把普通类型的成员变量复制给另外一个类的对象。但在有引用或者有指针的类里面，如果我们没有声明另外的拷贝构造函数的话，我们的程序就会报错。\n2. 拷贝构造函数的形参必须是类的类型,该参数必须传引用,而且还要在前面使用const修饰符\n3. 使用拷贝构造函数在本类中要有指针变量或者多对象\n# 模板\n* 关键字 template \n```\n#include <iostream>\nusing namespace std;\ntemplate <typename T>\nT add (T a, T b){\n    return a+b;\n}\nint main(){\n    cout<<add(1,2)<<endl;;\n    cout<<add(10.1,10.2)<<endl;;\n}\n```\n运行结果:\n```\n3\n20.3\n```\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    double numb(55.55);\n    coutw<<numb<<endl;\n    cout.setf(ios::fixed);\n    cout.setf(ios::showpoint)\n    cout.precision(1);\n    cout<<numb<<endl;\n}\n```\n运行结果：\n```\n55.55\n55.5\n```\n# 拷贝构造函数\n* test.h\n```\nclass Test{\n    string _name;\n    int _*age;\n    Test(string name,int age){\n        _name=name;\n        _age=new int (age);\n        cout<<\"有参构造函数\"<<endl;\n    }\n    void(){\n        cout<<_name<<\"的年龄\"<<_age<<endl;\n    }\n    //深拷贝构造函数\n    Test(const Test &t){//把类作为函数的参数\n        _name=t._name;\n        _age=new int (*t._age);//这里用的是指针来new,因为在本类中它就是以指针的方式来存放的，所以你也只能以指针的形式来启用它。\n        cout<<\"拷贝构造函数\"<<endl;\n    }\n    ~Test(){\n        delete age;\n        cout<<\"析构函数\"<<endl;\n    }\n}\n```\n* main\n```\n#include <iostream>\nusing space std;\nint main(){\n    Test t1(\"小明\",10);\n    t1.show();\n    //类的使用在这以上是没有问题的，这就是浅拷贝额构造函数\n    //当我们要在有指针(*)或者引用(&)的类中使用二次构造函数，那么我们就要写一个深的拷贝构造函数\n    Test t2(t1);//这个类的复制是要有深的拷贝构造函数来配合的。因为它符合条件\n    t2.show();\n}\n```\n* 程序运行结果\n```\n有参构造函数\n小明的年龄10\n拷贝构造函数\n小明的年龄10\n析构函数\n析构函数\n```\n**其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题,这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。**\n----\n# 类模板\n\n```\ntemplate <class T>//因为要使用模板，所以在定义模板\nclass Apple{\n  friend ostream &operator<<(ostream &out,Apple &a){//这里定义的是友元函数，用输出流来输出两个对象的相加\n      out<<a.c<<\"+\"<<a.n<<endl;\n      return out;\n  }\nprivate:\n    T c;//泛性的成员变量\n    T n;\n    Apple(T _a,T_b){//构造函数\n    this->c=_a;\n    this->n=_b;\n    }\n    Apple <int> operator+(Apple &a){//这里调用的是类的构造函数来实现两个对象的相加并把相应的数值存放在本类的成员变量中。\n    Apple addsum(this->c+a.c,this->n+a.n);\n    return addsum;\n    }\n\n}\n#include <iostream>\n#include \"Apple.h\"\nusing namespace std;\nint main(){\n     Apple <int>a(10,20); \n     Apple <int>a1(20,30);\n     Apple <int>c=a+a1;\n     cout<<c<<endl;\n}\n```\n```\n\n运行结果\n30+50\n```\n**注意事项** \n\n![模板类](C-Book/c-Book5.png) \n","source":"_posts/C-Book.md","raw":"---\ntitle: C++Book\ndate: 2019-06-12 14:31:03\ntags:\n---\n                      c++\n <!--more-->\n# C++Book\n# 库\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    cout<<hello would<<endl;\n    return 0;\n}\n```\n**在上面的代码我们应该都知道我什么都没有实现，这只是在简单的阐述一下c++库的重要性，也可以说是让我们更深刻的认识到有些代码的意思是什么。**\n\n* #include,using (预编译指令) \n* iostream (是c++标准库，方便使用cout,cin,) \n* using namespace std (是命名空间,std,因为在库里大多数都有std命名空间的部分，所以规定这些名称为std)\n# 结构函数\n* 关键字struct+结构名\n```\n#include <iostream>\nusing namespace std;\nstruct point{\n    int a=5;\n    int b=10;\n};\nint main(){\n    point *p=new point;    //在堆内存里new了内存\n    p->a=10;\n    p->b=5;\n    cout<<p1->a<<\"\\t\"<<p1-><<endl;\n    point p1,p2;              //在栈内存里实现,还把poit里的参数全部给p2使用\n    cout<<p1.a<<\"\\t\"<<p1.b<<endl;\n    cout<<p2.a<<\"\\t\"<<p2.b<<endl;\n}\n```\n运行结果：\n```\n5    10\n5    10\n5    10\n```\n**其实结构和类是相似的**\n\n----\n# 联合函数\n* 关键字union+名字\n```\n#include <iostream>\nusing namespace std;\nunion test{\n    int a;\n    char b;\n};\nint main(){\n    test *p=new test;         //在堆内存new了内存\n    p->a=97;\n    cout<<p->a<<\"的字符表示是：\"<<p->b<<endl;\n    test t1;                  //在栈内存里实现\n    t1.a=65;\n    cout<<t1.a<<\"的字符表示是：\"<<t.b<<endl;\n}\n```\n**一样的和类相似，在栈和堆内存一样使用,不相同的是：联合函数你可以给变量的其中一个赋值，而另外一个变量会自己把已经赋值的那个变量的值赋给自己。**\n\n----\n# 枚举函数\n* 关键字enum+名字\n```\n#include <iostream>\nusing namespace std;\nenum Arrow{\n    eroos,ok,warning,\n}\nint main(){\n    Arrow a1=eroos;\n    Arrow a2=ok;\n    Arrow a3=warning;\n    cout<<a1<<a2<<a3<<endl;\n}\n```\n运行结果：\n```\n0\n1\n2\n```\n**枚举的特点：它是以字符的形式声明的，但输出的确实整数型的数字**\n\n----\n# 排序\n**排序的方法有很多，但我们只要理解一种就可以了。我选择冒泡排序**\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    int arr[]={3,10,5,11,6}\n    for(int i=5-1;i>0;i--){\n        //把第一个数字设置为最大的数字来跟剩下的数字一起来比较，所以这的次数是总数来减一\n        for(int j=0;j<i;j++>){\n            //把每一次大的循环里的数组的大值都往后一个交换位置\n            if(arr[j]>arr[j+1]){//条件满足就交换位置\n                int temp;\n                temp=arr[j];\n                arr[j]=arr[j+1];\n                arr[j+1]=temp;\n            }\n        }\n    }\n    cout<<\"排序后\"<<endl;\n    for(int i=0;i<5;i++){\n        cout<<arr[i]<<endl;\n    }\n}\n```\n运行结果\n```\n排序后\n3\n5\n6\n10\n11\n```\n# 递归函数\n**递归函数:调用的时候是使用栈内存来实现的，函数一层一层的往下递归，递归的同时会把函数停住，而计算机会重复的把信息保存到栈内存里，遇到递归停止的条件时又会一层一层的往上走在信息停止的那一步，从而实现递归的真正意义。值得注意的是，递归是栈内存的实现，它把信息放在最底层上。每当计算机往上走的时候都是从最低下中读取信息的。栈是先出后入的内存结构。**\n* 通俗一点的意思就是在本函数里调用自身函数。\n```\n#include <iostream>\nusing namespace std;\nint add(int i){\n    cout<<\"函数开始:i=\"<<i<<endl;\n    if(i=5){\n        return i;\n    }else\n    {\n        add(++i);\n    }\n    cout<<\"函数结束,返回值为：\"<<i<<endl;\n    return i;\n}\nint main(){\n    cout<<add(1)<<endl;\n}\n```\n函数的结果：`\n```\n函数开始：i=1\n函数开始：i=2\n函数开始：i=3\n函数开始：i=4\n函数开始：i=5\n函数结束，返回值为：5\n函数结束，返回值为：4\n函数结束，返回值为：3\n函数结束，返回值为：2\n函数结束，返回值为：1\n```\n* 这里的先是返回的自身函数调用的结果，这里编译器里是有五个变量来暂时存储自身函数的值，每当执行到函数返回的时候编译器都会从暂时存储那里把值返回给我们，还有一种理解，就是这个函数里的变量在每次自身函数调用的时候都被隐藏起来了，也就是说每次的自身函数的调用它都有不同的存储位置来让变量重新赋值。其实，递归函数是在返回的时候才是这种函数真真的意义，因为自身函数的最后一次刚好是函数返回值的第一次。\n```\n//阶乘的实现\n#include <iostream>\nusing namespace std;\nint test(int test1){\n    int val;\n    if(test1==1){//递归的停止条件\n        val=1;\n        return val;\n    }else{\n        val=test1*test(test1-1);\n        return val;\n    }\n}\nint main(){\n    cout<<\"实现阶乘,请输入一个数字:\"<<endl;\n    int t1;\n    cin>>t1;\n    cout<<test(t1)<<endl;\n}\n```\n**强调一下，递归的停止条件的重要性，一旦递归没遇到停止的条件就会无穷的死循环，直到计算机的内存都跑完!!!**\n```\n#include <iostream>\nusing namespace std;\nint test(int t1,int t2){\n    if(t2==0){\n        return 1;//递归的停止条件,t2==0,就返回1\n    }else{\n        return test(t1,t2-1)*t1;//上面返回的值来当作第一次的值，然后一直往上计算\n    }\n}\nint main(){\n    cout<<test(3,2)<<endl;\n}\n```\n运行结果\n```\n9\n```\n**递归的三大条件**\n* (有返回值类型，无返回值类型)\n1. 没有无穷的递归\n2. 每一种停止的情况都执行(返回)那种情况下的正确操作\n3. 所有递归函数的调用都能正确的执行操作，那么最后的结果一定是正确的\n----\n# 函数与指针\n* 指向函数的指针\n```\n#include <iostream>\nusing namespace std;\nint add(int a){\n    return a;\n}\nint test(int a){\n    return a;\n}\nint main(){\n    int (*p)(int a)=&add;//指向函数的指针\n    cout<<P(5)<<endl;\n    int (*ip[])(int a)={&add,&test};//指向多个函数的指针数组\n    cout<<ip[0](1)<<ip[1](2)<<endl;\n}\n```\n函数的结果：\n```\n5\n1\n2\n```\n* 这里的指针都是储存在栈内存里的。\n----\n# 预处理\n* 格式化代码，去除多余的空格和注释\n* 进行一些宏替换\n* 包含另外一段代码\n* 通过一些条件的判断，动态决定是否编译某段代码\n1. 宏定义\n\n**在定义宏的时候记得不要在定义的后面加分号！！！**\n----\n```\n#include <iostream>\nusing namespace std;\n#define MAX 9               //宏定义\n#define MAN2 MAX*MAX        //宏定义\nint main(){\n    cout<<MAX<<endl;\n    cout<<MAX2<<endl;\n}\n```\n运行结果为：\n```\n9\n81\n```\n2. 带参数的宏定义\n```\n#include <iostream>\nusing namespace std;\n#define MAX 3                        //无参宏定义\n#define space(x) ((x)*(x))           //声明一个带参数的宏定义\nint main(){\n    for(int i=1;i<=MAX;i++){\n        cout<<i<<\"的平方是：\"<<space(i)<<endl;\n    }\n}\n```\n运行结果是：\n```\n1的平方是：1\n2的平方是：4\n3的平方是：9\n```\n```\n#include <iostream>\nusing namespace std;\n#define add(a,b)(a+b)           //带参的宏定义\n#define test(x) #x         //#是连接\n#define test1(a*,* b) a##b        //a和b是连接在一起的\nint main(){\n    string s1(\"hello,\");        //字符串\n    string s2(\"world!\");\n    cout<<add(100,100)<<endl;\n    cout<<add(s1,s2)<<endl;     //使用宏来实现字符串的相加\n    cout<<test(hello world)<<endl;\n    int ab=10;\n    cout<<test1(a,b)<<endl;//这里的ab是连接起来的，所以在前面定义了ab的值，也就是说这里输出的只是变量ab的值，并不是说把a和b当作实参过去的。\n}\n```\n运行结果是：\n```\n200\nhello,world\nhelloworld\n10\n```\n**说明了宏的优点有:避免了强类型的检测**\n----\n3. 宏与常量，函数\n宏与常量有点相似，但当他们遇上指针和引用之后又会变成什么呢？\n```\n#include <iostream>\nusing namespace std;\n#define x 10\nconst int y=5;\nint main(){\n    const int &a=x;          //ok\n    const int *p=&y;         //ok\n    cout<<a<<\"\\t\"<<*p<<endl;\n}\n```\n运行结果：\n```\n10    5\n```\n**这里给宏使用了引用，给常量使用了指针。还在定义的前面都加了const类型。**\n**但是在这里还是不希望使用引用和指针的方式来操作宏和常量,把宏看作是简单的文本替换，这也是宏的原本意义。**\n\n**宏不允许重新定义，也就是说一个相同的宏只能被定义一次，要想修改宏的值，你只能先消除它，使用#undef关键来消除，然后你就可以重新定义了。**\n4. 在c++中有还有内置的宏\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    cout<<__TIME__<<endl; //输出当前代码运行的时间\n    cout<<__DATE<<endl;   //输出当前代码运行的日期\n    cout<<__LINE<<endl;   //输出当前代码的所在行号\n    cout<<__FIME__<<endl; //输出当前代码的文件路径\n}\n```\n5. #if #elif #else  #ifdef #ifndef\n```\n#include <iostream>\nusing namespace std;\n#define a 10\nint main(){\n    #if a<20\n    cout<<\"欢迎使用测试版\"<<endl;\n    #else\n    cout<<\"欢迎使用正版\"<<endl;\n    #endif\n    return 0;\n}\n```\n运行的结果：\n```\n欢迎使用测试版\n```\n**#if类似与我们在以前代码里的if，#else类似与else,#elif类似elseif**\n**#endif,很重要。如果没有它你的程序是跑不起来的。**\n---\n**在c++中有很多预定义函数，这其中有一中是异常处理函数，关键字(try)** \n```\n#include <iostream>\nusing namespace std;\nint main(){\n     __try{\n      int i;\n      cout<<\"请输入一个数字\"<<end;\n      cin>>i;\n      if(i<=0){\n      throw \"error\"\n     }\n      }catch(const char *p){//指定抛出异常的类型\n         cout<<p<<endl;\n      }catch(...){\n      cout<<\"在main函数里有异常\"<<endl;//任何抛出异常的类型都能接受,这里虽然是可以接受任何类型的异常但在前面已经有指定的抛出类型，所以在这里输出的是指定的抛出类型\n      }\n}\n```\n---\n**e.what(是用来打印异常抛出的)** \n```\n运行结果\nerror\n```\n---\n![不同的类型抛出](C-Book/c-Book4.png)\n- [ ] bad_typeid:\n- [ ] bad_cast\n- [ ] bad_alloc:在new一个内存时，如果没有足够的空间时会抛出异常来，\n- [ ] ios_base::failure:上一个的异常抛出打印的类型\n- [ ] logic_error---out_of_range:这是数组下标越界会抛出(out_of_range)类型的异常来\n\n```\n#include <iostream>\nusing namespace std;\n#define a 10\nint main(){\n    #ifdef a\n    cout<<\"欢迎使用正版\"<<endl;\n    #endif\n    return 0;\n    #ifndef\n    cout<<\"欢迎使用测试版\"<<endl;\n    #endif\n    return 0;\n}\n```\n**值得注意的是，#ifdef和#ifndef都要有#endif使用，#endif的意思应该是结束if**\n\n----\n# 预定义字符函数\n**预定义字符函数就是把字符转换成大，小写的字符，在计算机中，我们虽然是以字符的形式输入到计算机中，但计算机本身的运作却是以数字的形式来使用的。值得注意的是，书上写的需要头文件但我这里是不需要头文件的，可能是版本的问题吧，如果有报错的话就加个头文件(cctype)**\n1. toupper()(把字符转换成大写的)\n2. tolower()(小写) \n3. isupper()(如果字符是大写的就为true，否则false)\n4. islower()(同上)\n5. isspace()(如果字符是空白字符就为true,否则false)，一般这个识别的都跟着cin.get()这个函数，因为它识别空格，你可以在它识别空格的时候输出一些东西，下面有个小列子。\n```\n#include <iostream>\nusing namespace std;\nvoid test(){\n    char a,b;\n    cout<<\"请输入字符\"<<endl;\n    cin>>b;\n    a=toupper(b)\n    cout<<c<<endl;\n    if(isupper(b)){//条件一开始为false\n        cout<<\"转换成功\\t\"<<a<<endl;\n    }else{\n        cout<<\"转换失败\"<<endl;\n    }\n}\nint main(){\n    test();\n    char c;\n    cout<<\"请输入字符\"<<endl;\n    do{\n        cin.get(c);//逐步输入字符\n        if(isspace(c)){//判断是否符合条件     空格\n            cout<<'--';\n        }else{\n            cout<<c<<endl;\n        }\n    }while(c!='.');\n    cin.get();//识别空格，是空格就打印下面的那句话\n    cout<<\"空格\"<<endl;\n}\n```\n运行结果\n```\n请输入字符\na\n转换成功   A\n请输入字符\nadd test\nadd--test--.\n```\n----\n# 类\n   **类的特征**\n   -----\n1. 类同时具有成员变量和成员函数。\n2. 成员可变成私有和共有\n3. 正常下类的成员变量是私有的\n4. 类的私有成员只能在本类的函数里面定义和调用\n5. 类的成员函数可以像普通的函数一样重载\n6. 一个类可将另外一个类作为自己的成员变量的类性使用\n7. 函数的i形参可以是类的类型\n8. 类可以是函数的返回值类型\n----\n**类的基本**\n* 所有的成员变量设为私有的\n* 用户程序员通过函数作为成员变量的接口来访问变量和完善的规定如何使用每一个公共成员函数\n* 任何辅助函数都设为私有的\n----\n* 以前的数据和操作的过程都不是独立的，而c++允许我们将一些数据和操作数据的过程放在同一个地方，并封装成一个独立的个体。\n* 万物皆对象，这句话对c++程序员来说并不陌生。这并不代表我们缺少对象，对于我们这种高质男来说从来没担心过搞不到对象，因为我们随时随地都可以new一个对象出来，这不是一般人可以做到的，只有真的走进来了才可以的，虽然这个操作在c++中也不算是什么高难度的操作，但我们又不是学到这里就完事的。类和结构是完全可以交换的，唯一不一样的是结构的默认特性是public,而类的默认特性是private。\n----\n1. 数据类型:由值的集合以及为那些值定义的一组基本运算构成 \n2. 抽像数据类型(ADT):使用数据类型的程序员访问不了值和运算的细节 \n* 封装，是用简单明了的公有函数的方式为外部程序提供对象操作接口。\n# 成员对象\n* 分为三种：public,private，protected\n1. 公有对象：不管是在类里还是在外部都能被访问到。\n2. 私有对象：只能在本类中访问到。\n3. 保护对象：只能在本类中访问到，在外部是访问不到的。\n# 运算符重载\n1. 重载运算符，至少要有一个参数的类型是类\n2. 重载的函数可以是类的友元函数也可以是成员函数\n3. 不能新建运算符\n4. 不能改变获取的形参操作符的意义\n5. 不能改变操作符的优先级\n6. 不能重载一下操作符(.(圆点)::(作用域)...)    \n```\nclass Son;//先声明Son类\nclass Bos{\nfriend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员\nfriend ostream &operator<<(ostream &os,Bos bos);//友元函数，用来访问类的私有成员\nprivate:\n    int a=10;\n    int b=5;\n}\nclass Son{\nfriend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员\nfriend ostream &operator<<(ostream &os,Bos bos);//友元函数，用来访问类的私有成员\nprivate:\n    int a=5;\n    int b=10;\n}\nint operator+(Bos bos,Son son){//运算符重载加号\n    int a=bos.a+bos.b;\n    int b=son.a+son.b;\n    return a,b;\n}\nostream &operator<<(ostream &os,Bos bos){//运算符重载<<号\n    os<<\"a=\"<<bos.a<<\"b=\"<<bos.b<<endl;//把成员变量连接在cout流中\n    return os;//返回cout，这样就能在main函数中直接打印\n}\nint main(){\n    Bos bos;\n    Son son\n    cout<<bos+son<<endl;//这要是没有重载加号，是运行不过的\n    cout<<bos<<endl;//没有重载<<也是运行不过来的\n}\n```\n**谨慎参考，纯属本人理解。ostream,是因为要用到cout流，因为输出流是属于ostream里面的，&,是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。**\n----\n# const mutable\n* 众所周知，const是常量类型。而mutable是可变的，就像是普通变量。\n# vector\n```\n#include <iostream>\n#include <vector>\nusing namespace std;\nint main(){\n    vector <int >a{10,20,3,5,1};\n    a.insert(a.begin(),8);//在向量最前面插入数字8\n    sort(a.begin(),a.end());//升序\n    vector <int >::iterator it;//打印\n    for(it=a.begin();it!=a.end();it++){\n        cout<<*it<<\"      \";\n    }\n    reverse(a.begin(),a.end());//逆序\n    for(it=a.begin();it!=a.end();it++){\n        cout<<*it<<\"      \";\n    }\n    a.clear();//清除向量\n    vector <int > b;\n    a.swap(b);\n    for(it=b.begin();it!=b.end();it++){\n        cout<<*it<<\"      \";\n    }\n```\n---\n```\n运行结果\n1    3    5   8   10   20\n20   10   8   5   3   1\n20   10   8   5   3   1\n```\n```\n# include <iostream>\nusing namespace std;\nint main (){\n      int numb[]={10,20,23,11,}\n      int numb1[4]={0};\n      memcpy(numb1,numb,sizeof(numb));\n      for(int i=0;i<4;i++){\n      cout<<numb1[i]<<'   ';\n      }\n}\n```\n---\n\n```\n运行结果\n10   20   23   11\n```\n---\n\n- [ ] **静态成员函数和静态成员变量**\n\n```\n#include <iostream>\nusing namespace std;\n\".h\"\n# include <iostream>\nclass Test{\n      private:\n      static int a;\n      int b;\n      public:\n      Test(int _a){\n      a=_a;\n      ++b;\n      }\n      static void show(Test tt){//静态成员函数中通过对象来引用非静态成员\n      cout<<\"tt.a=\"<tt.a<<endl;\n      cout<<\"Test::b=\"<<Test::b<<endl;\n      cout<<\"tt.b=\"<<tt.b<<endl;\n      }\n}\nint Test::b=0;//这是放在main函数上面的\nint main(){\n        Test t1(100);\n        Test t2(200);\n        Test::show(t1);\n        Test::show(t2);//静态成员函数调用时不用对象名 \n\n}\n```\n```\n运行结果为：\ntt.a=100\nTest::b=2\ntt.b=2\ntt.a=200\nTest::b=2\ntt.b=2\n```\n\n# 继承\n```\nclass Teacher{\n    string _name;\n    int _year;\n    Teacher(string name,int year){\n        this->_name=name;\n        this->_year=year;\n    }\n    void show(){\n        cout<<this->_name<<\"老师的年龄是：\"<<this->_year<<endl;\n    }\n}\nclass Student::puble Teacher{\npublic:\n       Student(string name,int year):Teacher(name,year){\n       }\n}\n```\n**上面的基类用的是构造函数来给自己赋初始化的，所以在派生类也要写上自己的构造函数才算继承基类。**\n\n```\nint main(){\n    Student s1(\"小明\",18);\n    s1.show();\n}\n```\n运行结果是：\n```\n小明的年龄是：18 \n```\n**这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。**\n----\n* 继承的方式有三种：public private protected\n公有继承, 私有继承, 保护继承\n1. 公有继承：是以公有的形式来继承的基类，这也就意味着在基类是什么类型的在派生类也是一样的关系。\n2. 私有继承：是以私有的形式来继承的基类,就是说继承下来的基类都是以私有的形式来继承的。\n3. 保护继承：是以保护的形式来继承的基类，它是基于公有继承和私有继承的中间，如果你不想在外界被访问到，又想在派生类中被访问，这就可以用保护的形式来继承下来了，但基类的私有成员对象在保护的派生类中依然是私有成员对象。\n![继承的方式](C-Book/c-Book.png)\n**派生类不会自动的继承基类的构造函数**\n# 隐藏\n* 我们以后难免会在派生类里定义属于它自己的成员变量和成员函数，但当我们在声明和定义的时候有时也会不小心的把成员变量和成员函数与基类的成员变量和成员函数名字相同，这是我们的程序就会出现名字隐藏的现象，对于隐藏就是说当我们的派生类与基类中有名字相同的，就可能会出现隐藏。如果不知道什么时候被隐藏了什么，我们可以加上作用域去看看，在这里，我的建议是，尽量不要在继承类里面用同样的名字，不然你会很自闭的。\n* 基类的析构函数最好加上关键字（virtual）写成虚函数，这样在派生类的时候的就能自动调用，而对于，纯虚函数，在派生类中是要重写的性质，因为在基类的纯虚函数是空函数一个，它的本质就是一定要在派生类里面实现它的意义。一个良好的习惯：最好把基类的析构函数写成虚的，这样在派生类中是会自动调用的。\n\n**纯虚函数是不能对它进行实例化的，也就是说不能给它创建对象，这是要注意的重点，不能说你定义的是一个纯虚函数，然后你又在main函数里给它创建一个对象来进行一些操作。** \n\n\n**在实际开发中，你可以定义一个抽象基类，只完成部分功能，未完成的功能交给派生类去实现(谁派生谁实现)。这部分的功能往往是基类不需要的，或者是在基类中实现不了的，虽然基类完成不了，但强制交给了派生类去实现，否则一样不能被实例化。** \n\n**抽象基类除了限制了派生类，也实现了多态(也就是说在main函数里，你可以使用基类来调用派生类里面重写的纯虚函数)。** \n\n# 抽象类\n* 其实就是在类里面把函数写成是纯虚函数，这样在派生类里就剩下重写这些虚函数。一般把抽象类用来设计一套统一的接口。\n![例子](C-Book/c-Book2.png)\n![例子](C-Book/c-Book1.png)\n![运行结果](C-Book/c-Book3.png)\n**重新认识了类的继承，这里我没有用到构造函数来给成员变量赋值，因为用了构造函数会变的很自闭，发正我是完全不能理解的那种，所以我用来另外一种方法，虽然算不上什么，但我觉得自己理解写出来的东西是可以的。孙悟空吃唐僧，这是多么厉害的，我想这个结果连孙悟空自己也不敢想的，我帮他实现了，嘻嘻。**\n* 这里的基类是不能被实例化的，因为基类里面的show方法，我用的是纯虚函数来写的，不能被实例化，但在派生类要实现，你不实现的话，你写这个虚函数就没意义了，基类的纯虚函数在派生类你一定要写进去，不要编译器会报错的，\n# 拷贝构造函数\n**在类中有指针又要多个类的对象的时候最好写一下类的拷贝构造函数**\n1. 在程序中的拷贝是浅拷贝，也就是说在类中只是简单的把普通类型的成员变量复制给另外一个类的对象。但在有引用或者有指针的类里面，如果我们没有声明另外的拷贝构造函数的话，我们的程序就会报错。\n2. 拷贝构造函数的形参必须是类的类型,该参数必须传引用,而且还要在前面使用const修饰符\n3. 使用拷贝构造函数在本类中要有指针变量或者多对象\n# 模板\n* 关键字 template \n```\n#include <iostream>\nusing namespace std;\ntemplate <typename T>\nT add (T a, T b){\n    return a+b;\n}\nint main(){\n    cout<<add(1,2)<<endl;;\n    cout<<add(10.1,10.2)<<endl;;\n}\n```\n运行结果:\n```\n3\n20.3\n```\n```\n#include <iostream>\nusing namespace std;\nint main(){\n    double numb(55.55);\n    coutw<<numb<<endl;\n    cout.setf(ios::fixed);\n    cout.setf(ios::showpoint)\n    cout.precision(1);\n    cout<<numb<<endl;\n}\n```\n运行结果：\n```\n55.55\n55.5\n```\n# 拷贝构造函数\n* test.h\n```\nclass Test{\n    string _name;\n    int _*age;\n    Test(string name,int age){\n        _name=name;\n        _age=new int (age);\n        cout<<\"有参构造函数\"<<endl;\n    }\n    void(){\n        cout<<_name<<\"的年龄\"<<_age<<endl;\n    }\n    //深拷贝构造函数\n    Test(const Test &t){//把类作为函数的参数\n        _name=t._name;\n        _age=new int (*t._age);//这里用的是指针来new,因为在本类中它就是以指针的方式来存放的，所以你也只能以指针的形式来启用它。\n        cout<<\"拷贝构造函数\"<<endl;\n    }\n    ~Test(){\n        delete age;\n        cout<<\"析构函数\"<<endl;\n    }\n}\n```\n* main\n```\n#include <iostream>\nusing space std;\nint main(){\n    Test t1(\"小明\",10);\n    t1.show();\n    //类的使用在这以上是没有问题的，这就是浅拷贝额构造函数\n    //当我们要在有指针(*)或者引用(&)的类中使用二次构造函数，那么我们就要写一个深的拷贝构造函数\n    Test t2(t1);//这个类的复制是要有深的拷贝构造函数来配合的。因为它符合条件\n    t2.show();\n}\n```\n* 程序运行结果\n```\n有参构造函数\n小明的年龄10\n拷贝构造函数\n小明的年龄10\n析构函数\n析构函数\n```\n**其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题,这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。**\n----\n# 类模板\n\n```\ntemplate <class T>//因为要使用模板，所以在定义模板\nclass Apple{\n  friend ostream &operator<<(ostream &out,Apple &a){//这里定义的是友元函数，用输出流来输出两个对象的相加\n      out<<a.c<<\"+\"<<a.n<<endl;\n      return out;\n  }\nprivate:\n    T c;//泛性的成员变量\n    T n;\n    Apple(T _a,T_b){//构造函数\n    this->c=_a;\n    this->n=_b;\n    }\n    Apple <int> operator+(Apple &a){//这里调用的是类的构造函数来实现两个对象的相加并把相应的数值存放在本类的成员变量中。\n    Apple addsum(this->c+a.c,this->n+a.n);\n    return addsum;\n    }\n\n}\n#include <iostream>\n#include \"Apple.h\"\nusing namespace std;\nint main(){\n     Apple <int>a(10,20); \n     Apple <int>a1(20,30);\n     Apple <int>c=a+a1;\n     cout<<c<<endl;\n}\n```\n```\n\n运行结果\n30+50\n```\n**注意事项** \n\n![模板类](C-Book/c-Book5.png) \n","slug":"C-Book","published":1,"updated":"2019-08-20T12:46:37.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgs000bgoz7tr5cbwlo","content":"<pre><code>c++\n</code></pre> <a id=\"more\"></a>\n<h1 id=\"C-Book\"><a href=\"#C-Book\" class=\"headerlink\" title=\"C++Book\"></a>C++Book</h1><h1 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;hello would&lt;&lt;endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>在上面的代码我们应该都知道我什么都没有实现，这只是在简单的阐述一下c++库的重要性，也可以说是让我们更深刻的认识到有些代码的意思是什么。</strong></p>\n<ul>\n<li>#include,using (预编译指令) </li>\n<li>iostream (是c++标准库，方便使用cout,cin,) </li>\n<li>using namespace std (是命名空间,std,因为在库里大多数都有std命名空间的部分，所以规定这些名称为std)<h1 id=\"结构函数\"><a href=\"#结构函数\" class=\"headerlink\" title=\"结构函数\"></a>结构函数</h1></li>\n<li>关键字struct+结构名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">struct point&#123;</span><br><span class=\"line\">    int a=5;</span><br><span class=\"line\">    int b=10;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    point *p=new point;    //在堆内存里new了内存</span><br><span class=\"line\">    p-&gt;a=10;</span><br><span class=\"line\">    p-&gt;b=5;</span><br><span class=\"line\">    cout&lt;&lt;p1-&gt;a&lt;&lt;&quot;\\t&quot;&lt;&lt;p1-&gt;&lt;&lt;endl;</span><br><span class=\"line\">    point p1,p2;              //在栈内存里实现,还把poit里的参数全部给p2使用</span><br><span class=\"line\">    cout&lt;&lt;p1.a&lt;&lt;&quot;\\t&quot;&lt;&lt;p1.b&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;p2.a&lt;&lt;&quot;\\t&quot;&lt;&lt;p2.b&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5    10</span><br><span class=\"line\">5    10</span><br><span class=\"line\">5    10</span><br></pre></td></tr></table></figure></p>\n<p><strong>其实结构和类是相似的</strong></p>\n<hr>\n<h1 id=\"联合函数\"><a href=\"#联合函数\" class=\"headerlink\" title=\"联合函数\"></a>联合函数</h1><ul>\n<li>关键字union+名字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">union test&#123;</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    char b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test *p=new test;         //在堆内存new了内存</span><br><span class=\"line\">    p-&gt;a=97;</span><br><span class=\"line\">    cout&lt;&lt;p-&gt;a&lt;&lt;&quot;的字符表示是：&quot;&lt;&lt;p-&gt;b&lt;&lt;endl;</span><br><span class=\"line\">    test t1;                  //在栈内存里实现</span><br><span class=\"line\">    t1.a=65;</span><br><span class=\"line\">    cout&lt;&lt;t1.a&lt;&lt;&quot;的字符表示是：&quot;&lt;&lt;t.b&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>一样的和类相似，在栈和堆内存一样使用,不相同的是：联合函数你可以给变量的其中一个赋值，而另外一个变量会自己把已经赋值的那个变量的值赋给自己。</strong></p>\n<hr>\n<h1 id=\"枚举函数\"><a href=\"#枚举函数\" class=\"headerlink\" title=\"枚举函数\"></a>枚举函数</h1><ul>\n<li>关键字enum+名字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">enum Arrow&#123;</span><br><span class=\"line\">    eroos,ok,warning,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Arrow a1=eroos;</span><br><span class=\"line\">    Arrow a2=ok;</span><br><span class=\"line\">    Arrow a3=warning;</span><br><span class=\"line\">    cout&lt;&lt;a1&lt;&lt;a2&lt;&lt;a3&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></p>\n<p><strong>枚举的特点：它是以字符的形式声明的，但输出的确实整数型的数字</strong></p>\n<hr>\n<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><p><strong>排序的方法有很多，但我们只要理解一种就可以了。我选择冒泡排序</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int arr[]=&#123;3,10,5,11,6&#125;</span><br><span class=\"line\">    for(int i=5-1;i&gt;0;i--)&#123;</span><br><span class=\"line\">        //把第一个数字设置为最大的数字来跟剩下的数字一起来比较，所以这的次数是总数来减一</span><br><span class=\"line\">        for(int j=0;j&lt;i;j++&gt;)&#123;</span><br><span class=\"line\">            //把每一次大的循环里的数组的大值都往后一个交换位置</span><br><span class=\"line\">            if(arr[j]&gt;arr[j+1])&#123;//条件满足就交换位置</span><br><span class=\"line\">                int temp;</span><br><span class=\"line\">                temp=arr[j];</span><br><span class=\"line\">                arr[j]=arr[j+1];</span><br><span class=\"line\">                arr[j+1]=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;&quot;排序后&quot;&lt;&lt;endl;</span><br><span class=\"line\">    for(int i=0;i&lt;5;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排序后</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h1><p><strong>递归函数:调用的时候是使用栈内存来实现的，函数一层一层的往下递归，递归的同时会把函数停住，而计算机会重复的把信息保存到栈内存里，遇到递归停止的条件时又会一层一层的往上走在信息停止的那一步，从而实现递归的真正意义。值得注意的是，递归是栈内存的实现，它把信息放在最底层上。每当计算机往上走的时候都是从最低下中读取信息的。栈是先出后入的内存结构。</strong></p>\n<ul>\n<li>通俗一点的意思就是在本函数里调用自身函数。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int add(int i)&#123;</span><br><span class=\"line\">    cout&lt;&lt;&quot;函数开始:i=&quot;&lt;&lt;i&lt;&lt;endl;</span><br><span class=\"line\">    if(i=5)&#123;</span><br><span class=\"line\">        return i;</span><br><span class=\"line\">    &#125;else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add(++i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;&quot;函数结束,返回值为：&quot;&lt;&lt;i&lt;&lt;endl;</span><br><span class=\"line\">    return i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;add(1)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数的结果：`<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数开始：i=1</span><br><span class=\"line\">函数开始：i=2</span><br><span class=\"line\">函数开始：i=3</span><br><span class=\"line\">函数开始：i=4</span><br><span class=\"line\">函数开始：i=5</span><br><span class=\"line\">函数结束，返回值为：5</span><br><span class=\"line\">函数结束，返回值为：4</span><br><span class=\"line\">函数结束，返回值为：3</span><br><span class=\"line\">函数结束，返回值为：2</span><br><span class=\"line\">函数结束，返回值为：1</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的先是返回的自身函数调用的结果，这里编译器里是有五个变量来暂时存储自身函数的值，每当执行到函数返回的时候编译器都会从暂时存储那里把值返回给我们，还有一种理解，就是这个函数里的变量在每次自身函数调用的时候都被隐藏起来了，也就是说每次的自身函数的调用它都有不同的存储位置来让变量重新赋值。其实，递归函数是在返回的时候才是这种函数真真的意义，因为自身函数的最后一次刚好是函数返回值的第一次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//阶乘的实现</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int test(int test1)&#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    if(test1==1)&#123;//递归的停止条件</span><br><span class=\"line\">        val=1;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        val=test1*test(test1-1);</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;&quot;实现阶乘,请输入一个数字:&quot;&lt;&lt;endl;</span><br><span class=\"line\">    int t1;</span><br><span class=\"line\">    cin&gt;&gt;t1;</span><br><span class=\"line\">    cout&lt;&lt;test(t1)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>强调一下，递归的停止条件的重要性，一旦递归没遇到停止的条件就会无穷的死循环，直到计算机的内存都跑完!!!</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int test(int t1,int t2)&#123;</span><br><span class=\"line\">    if(t2==0)&#123;</span><br><span class=\"line\">        return 1;//递归的停止条件,t2==0,就返回1</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return test(t1,t2-1)*t1;//上面返回的值来当作第一次的值，然后一直往上计算</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;test(3,2)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure></p>\n<p><strong>递归的三大条件</strong></p>\n<ul>\n<li>(有返回值类型，无返回值类型)</li>\n</ul>\n<ol>\n<li>没有无穷的递归</li>\n<li>每一种停止的情况都执行(返回)那种情况下的正确操作</li>\n<li>所有递归函数的调用都能正确的执行操作，那么最后的结果一定是正确的</li>\n</ol>\n<hr>\n<h1 id=\"函数与指针\"><a href=\"#函数与指针\" class=\"headerlink\" title=\"函数与指针\"></a>函数与指针</h1><ul>\n<li>指向函数的指针<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int add(int a)&#123;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int test(int a)&#123;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int (*p)(int a)=&amp;add;//指向函数的指针</span><br><span class=\"line\">    cout&lt;&lt;P(5)&lt;&lt;endl;</span><br><span class=\"line\">    int (*ip[])(int a)=&#123;&amp;add,&amp;test&#125;;//指向多个函数的指针数组</span><br><span class=\"line\">    cout&lt;&lt;ip[0](1)&lt;&lt;ip[1](2)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的指针都是储存在栈内存里的。</li>\n</ul>\n<hr>\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><ul>\n<li>格式化代码，去除多余的空格和注释</li>\n<li>进行一些宏替换</li>\n<li>包含另外一段代码</li>\n<li>通过一些条件的判断，动态决定是否编译某段代码</li>\n</ul>\n<ol>\n<li>宏定义</li>\n</ol>\n<h2 id=\"在定义宏的时候记得不要在定义的后面加分号！！！\"><a href=\"#在定义宏的时候记得不要在定义的后面加分号！！！\" class=\"headerlink\" title=\"在定义宏的时候记得不要在定义的后面加分号！！！\"></a><strong>在定义宏的时候记得不要在定义的后面加分号！！！</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define MAX 9               //宏定义</span><br><span class=\"line\">#define MAN2 MAX*MAX        //宏定义</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;MAX&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;MAX2&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br><span class=\"line\">81</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>带参数的宏定义<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define MAX 3                        //无参宏定义</span><br><span class=\"line\">#define space(x) ((x)*(x))           //声明一个带参数的宏定义</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    for(int i=1;i&lt;=MAX;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;i&lt;&lt;&quot;的平方是：&quot;&lt;&lt;space(i)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1的平方是：1</span><br><span class=\"line\">2的平方是：4</span><br><span class=\"line\">3的平方是：9</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define add(a,b)(a+b)           //带参的宏定义</span><br><span class=\"line\">#define test(x) #x         //#是连接</span><br><span class=\"line\">#define test1(a*,* b) a##b        //a和b是连接在一起的</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    string s1(&quot;hello,&quot;);        //字符串</span><br><span class=\"line\">    string s2(&quot;world!&quot;);</span><br><span class=\"line\">    cout&lt;&lt;add(100,100)&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;add(s1,s2)&lt;&lt;endl;     //使用宏来实现字符串的相加</span><br><span class=\"line\">    cout&lt;&lt;test(hello world)&lt;&lt;endl;</span><br><span class=\"line\">    int ab=10;</span><br><span class=\"line\">    cout&lt;&lt;test1(a,b)&lt;&lt;endl;//这里的ab是连接起来的，所以在前面定义了ab的值，也就是说这里输出的只是变量ab的值，并不是说把a和b当作实参过去的。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200</span><br><span class=\"line\">hello,world</span><br><span class=\"line\">helloworld</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明了宏的优点有-避免了强类型的检测\"><a href=\"#说明了宏的优点有-避免了强类型的检测\" class=\"headerlink\" title=\"说明了宏的优点有:避免了强类型的检测\"></a><strong>说明了宏的优点有:避免了强类型的检测</strong></h2><ol start=\"3\">\n<li>宏与常量，函数<br>宏与常量有点相似，但当他们遇上指针和引用之后又会变成什么呢？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define x 10</span><br><span class=\"line\">const int y=5;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    const int &amp;a=x;          //ok</span><br><span class=\"line\">    const int *p=&amp;y;         //ok</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;&quot;\\t&quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10    5</span><br></pre></td></tr></table></figure></p>\n<p><strong>这里给宏使用了引用，给常量使用了指针。还在定义的前面都加了const类型。</strong><br><strong>但是在这里还是不希望使用引用和指针的方式来操作宏和常量,把宏看作是简单的文本替换，这也是宏的原本意义。</strong></p>\n<p><strong>宏不允许重新定义，也就是说一个相同的宏只能被定义一次，要想修改宏的值，你只能先消除它，使用#undef关键来消除，然后你就可以重新定义了。</strong></p>\n<ol start=\"4\">\n<li><p>在c++中有还有内置的宏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;__TIME__&lt;&lt;endl; //输出当前代码运行的时间</span><br><span class=\"line\">    cout&lt;&lt;__DATE&lt;&lt;endl;   //输出当前代码运行的日期</span><br><span class=\"line\">    cout&lt;&lt;__LINE&lt;&lt;endl;   //输出当前代码的所在行号</span><br><span class=\"line\">    cout&lt;&lt;__FIME__&lt;&lt;endl; //输出当前代码的文件路径</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#if #elif #else  #ifdef #ifndef</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define a 10</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    #if a&lt;20</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用测试版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #else</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用正版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">欢迎使用测试版</span><br></pre></td></tr></table></figure></p>\n<p><strong>#if类似与我们在以前代码里的if，#else类似与else,#elif类似elseif</strong></p>\n<h2 id=\"endif-很重要。如果没有它你的程序是跑不起来的。\"><a href=\"#endif-很重要。如果没有它你的程序是跑不起来的。\" class=\"headerlink\" title=\"#endif,很重要。如果没有它你的程序是跑不起来的。\"></a><strong>#endif,很重要。如果没有它你的程序是跑不起来的。</strong></h2><p><strong>在c++中有很多预定义函数，这其中有一中是异常处理函数，关键字(try)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">     __try&#123;</span><br><span class=\"line\">      int i;</span><br><span class=\"line\">      cout&lt;&lt;&quot;请输入一个数字&quot;&lt;&lt;end;</span><br><span class=\"line\">      cin&gt;&gt;i;</span><br><span class=\"line\">      if(i&lt;=0)&#123;</span><br><span class=\"line\">      throw &quot;error&quot;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      &#125;catch(const char *p)&#123;//指定抛出异常的类型</span><br><span class=\"line\">         cout&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\">      &#125;catch(...)&#123;</span><br><span class=\"line\">      cout&lt;&lt;&quot;在main函数里有异常&quot;&lt;&lt;endl;//任何抛出异常的类型都能接受,这里虽然是可以接受任何类型的异常但在前面已经有指定的抛出类型，所以在这里输出的是指定的抛出类型</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>e.what(是用来打印异常抛出的)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">error</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book4.png\" alt=\"不同的类型抛出\"></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> bad_typeid:</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> bad_cast</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> bad_alloc:在new一个内存时，如果没有足够的空间时会抛出异常来，</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> ios_base::failure:上一个的异常抛出打印的类型</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> logic_error—out_of_range:这是数组下标越界会抛出(out_of_range)类型的异常来</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define a 10</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    #ifdef a</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用正版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">    #ifndef</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用测试版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>值得注意的是，#ifdef和#ifndef都要有#endif使用，#endif的意思应该是结束if</strong></p>\n<hr>\n<h1 id=\"预定义字符函数\"><a href=\"#预定义字符函数\" class=\"headerlink\" title=\"预定义字符函数\"></a>预定义字符函数</h1><p><strong>预定义字符函数就是把字符转换成大，小写的字符，在计算机中，我们虽然是以字符的形式输入到计算机中，但计算机本身的运作却是以数字的形式来使用的。值得注意的是，书上写的需要头文件但我这里是不需要头文件的，可能是版本的问题吧，如果有报错的话就加个头文件(cctype)</strong></p>\n<ol>\n<li>toupper()(把字符转换成大写的)</li>\n<li>tolower()(小写) </li>\n<li>isupper()(如果字符是大写的就为true，否则false)</li>\n<li>islower()(同上)</li>\n<li>isspace()(如果字符是空白字符就为true,否则false)，一般这个识别的都跟着cin.get()这个函数，因为它识别空格，你可以在它识别空格的时候输出一些东西，下面有个小列子。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test()&#123;</span><br><span class=\"line\">    char a,b;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入字符&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;b;</span><br><span class=\"line\">    a=toupper(b)</span><br><span class=\"line\">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">    if(isupper(b))&#123;//条件一开始为false</span><br><span class=\"line\">        cout&lt;&lt;&quot;转换成功\\t&quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        cout&lt;&lt;&quot;转换失败&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    char c;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入字符&quot;&lt;&lt;endl;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        cin.get(c);//逐步输入字符</span><br><span class=\"line\">        if(isspace(c))&#123;//判断是否符合条件     空格</span><br><span class=\"line\">            cout&lt;&lt;&apos;--&apos;;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;while(c!=&apos;.&apos;);</span><br><span class=\"line\">    cin.get();//识别空格，是空格就打印下面的那句话</span><br><span class=\"line\">    cout&lt;&lt;&quot;空格&quot;&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入字符</span><br><span class=\"line\">a</span><br><span class=\"line\">转换成功   A</span><br><span class=\"line\">请输入字符</span><br><span class=\"line\">add test</span><br><span class=\"line\">add--test--.</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"类的特征\"><a href=\"#类的特征\" class=\"headerlink\" title=\"   类的特征\"></a>   <strong>类的特征</strong></h2><ol>\n<li>类同时具有成员变量和成员函数。</li>\n<li>成员可变成私有和共有</li>\n<li>正常下类的成员变量是私有的</li>\n<li>类的私有成员只能在本类的函数里面定义和调用</li>\n<li>类的成员函数可以像普通的函数一样重载</li>\n<li>一个类可将另外一个类作为自己的成员变量的类性使用</li>\n<li>函数的i形参可以是类的类型</li>\n<li>类可以是函数的返回值类型</li>\n</ol>\n<hr>\n<p><strong>类的基本</strong></p>\n<ul>\n<li>所有的成员变量设为私有的</li>\n<li>用户程序员通过函数作为成员变量的接口来访问变量和完善的规定如何使用每一个公共成员函数</li>\n<li>任何辅助函数都设为私有的</li>\n</ul>\n<hr>\n<ul>\n<li>以前的数据和操作的过程都不是独立的，而c++允许我们将一些数据和操作数据的过程放在同一个地方，并封装成一个独立的个体。</li>\n<li>万物皆对象，这句话对c++程序员来说并不陌生。这并不代表我们缺少对象，对于我们这种高质男来说从来没担心过搞不到对象，因为我们随时随地都可以new一个对象出来，这不是一般人可以做到的，只有真的走进来了才可以的，虽然这个操作在c++中也不算是什么高难度的操作，但我们又不是学到这里就完事的。类和结构是完全可以交换的，唯一不一样的是结构的默认特性是public,而类的默认特性是private。</li>\n</ul>\n<hr>\n<ol>\n<li>数据类型:由值的集合以及为那些值定义的一组基本运算构成 </li>\n<li>抽像数据类型(ADT):使用数据类型的程序员访问不了值和运算的细节 </li>\n</ol>\n<ul>\n<li>封装，是用简单明了的公有函数的方式为外部程序提供对象操作接口。<h1 id=\"成员对象\"><a href=\"#成员对象\" class=\"headerlink\" title=\"成员对象\"></a>成员对象</h1></li>\n<li>分为三种：public,private，protected</li>\n</ul>\n<ol>\n<li>公有对象：不管是在类里还是在外部都能被访问到。</li>\n<li>私有对象：只能在本类中访问到。</li>\n<li>保护对象：只能在本类中访问到，在外部是访问不到的。<h1 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h1></li>\n<li>重载运算符，至少要有一个参数的类型是类</li>\n<li>重载的函数可以是类的友元函数也可以是成员函数</li>\n<li>不能新建运算符</li>\n<li>不能改变获取的形参操作符的意义</li>\n<li>不能改变操作符的优先级</li>\n<li>不能重载一下操作符(.(圆点)::(作用域)…)    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Son;//先声明Son类</span><br><span class=\"line\">class Bos&#123;</span><br><span class=\"line\">friend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">friend ostream &amp;operator&lt;&lt;(ostream &amp;os,Bos bos);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int a=10;</span><br><span class=\"line\">    int b=5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son&#123;</span><br><span class=\"line\">friend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">friend ostream &amp;operator&lt;&lt;(ostream &amp;os,Bos bos);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int a=5;</span><br><span class=\"line\">    int b=10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int operator+(Bos bos,Son son)&#123;//运算符重载加号</span><br><span class=\"line\">    int a=bos.a+bos.b;</span><br><span class=\"line\">    int b=son.a+son.b;</span><br><span class=\"line\">    return a,b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ostream &amp;operator&lt;&lt;(ostream &amp;os,Bos bos)&#123;//运算符重载&lt;&lt;号</span><br><span class=\"line\">    os&lt;&lt;&quot;a=&quot;&lt;&lt;bos.a&lt;&lt;&quot;b=&quot;&lt;&lt;bos.b&lt;&lt;endl;//把成员变量连接在cout流中</span><br><span class=\"line\">    return os;//返回cout，这样就能在main函数中直接打印</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Bos bos;</span><br><span class=\"line\">    Son son</span><br><span class=\"line\">    cout&lt;&lt;bos+son&lt;&lt;endl;//这要是没有重载加号，是运行不过的</span><br><span class=\"line\">    cout&lt;&lt;bos&lt;&lt;endl;//没有重载&lt;&lt;也是运行不过来的</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"谨慎参考，纯属本人理解。ostream-是因为要用到cout流，因为输出流是属于ostream里面的，-amp-是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。\"><a href=\"#谨慎参考，纯属本人理解。ostream-是因为要用到cout流，因为输出流是属于ostream里面的，-amp-是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。\" class=\"headerlink\" title=\"谨慎参考，纯属本人理解。ostream,是因为要用到cout流，因为输出流是属于ostream里面的，&amp;,是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。\"></a><strong>谨慎参考，纯属本人理解。ostream,是因为要用到cout流，因为输出流是属于ostream里面的，&amp;,是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。</strong></h2><h1 id=\"const-mutable\"><a href=\"#const-mutable\" class=\"headerlink\" title=\"const mutable\"></a>const mutable</h1><ul>\n<li>众所周知，const是常量类型。而mutable是可变的，就像是普通变量。<h1 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    vector &lt;int &gt;a&#123;10,20,3,5,1&#125;;</span><br><span class=\"line\">    a.insert(a.begin(),8);//在向量最前面插入数字8</span><br><span class=\"line\">    sort(a.begin(),a.end());//升序</span><br><span class=\"line\">    vector &lt;int &gt;::iterator it;//打印</span><br><span class=\"line\">    for(it=a.begin();it!=a.end();it++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;*it&lt;&lt;&quot;      &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reverse(a.begin(),a.end());//逆序</span><br><span class=\"line\">    for(it=a.begin();it!=a.end();it++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;*it&lt;&lt;&quot;      &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.clear();//清除向量</span><br><span class=\"line\">    vector &lt;int &gt; b;</span><br><span class=\"line\">    a.swap(b);</span><br><span class=\"line\">    for(it=b.begin();it!=b.end();it++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;*it&lt;&lt;&quot;      &quot;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">1    3    5   8   10   20</span><br><span class=\"line\">20   10   8   5   3   1</span><br><span class=\"line\">20   10   8   5   3   1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main ()&#123;</span><br><span class=\"line\">      int numb[]=&#123;10,20,23,11,&#125;</span><br><span class=\"line\">      int numb1[4]=&#123;0&#125;;</span><br><span class=\"line\">      memcpy(numb1,numb,sizeof(numb));</span><br><span class=\"line\">      for(int i=0;i&lt;4;i++)&#123;</span><br><span class=\"line\">      cout&lt;&lt;numb1[i]&lt;&lt;&apos;   &apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">10   20   23   11</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <strong>静态成员函数和静态成员变量</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">&quot;.h&quot;</span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\">class Test&#123;</span><br><span class=\"line\">      private:</span><br><span class=\"line\">      static int a;</span><br><span class=\"line\">      int b;</span><br><span class=\"line\">      public:</span><br><span class=\"line\">      Test(int _a)&#123;</span><br><span class=\"line\">      a=_a;</span><br><span class=\"line\">      ++b;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      static void show(Test tt)&#123;//静态成员函数中通过对象来引用非静态成员</span><br><span class=\"line\">      cout&lt;&lt;&quot;tt.a=&quot;&lt;tt.a&lt;&lt;endl;</span><br><span class=\"line\">      cout&lt;&lt;&quot;Test::b=&quot;&lt;&lt;Test::b&lt;&lt;endl;</span><br><span class=\"line\">      cout&lt;&lt;&quot;tt.b=&quot;&lt;&lt;tt.b&lt;&lt;endl;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int Test::b=0;//这是放在main函数上面的</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">        Test t1(100);</span><br><span class=\"line\">        Test t2(200);</span><br><span class=\"line\">        Test::show(t1);</span><br><span class=\"line\">        Test::show(t2);//静态成员函数调用时不用对象名 </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果为：</span><br><span class=\"line\">tt.a=100</span><br><span class=\"line\">Test::b=2</span><br><span class=\"line\">tt.b=2</span><br><span class=\"line\">tt.a=200</span><br><span class=\"line\">Test::b=2</span><br><span class=\"line\">tt.b=2</span><br></pre></td></tr></table></figure>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Teacher&#123;</span><br><span class=\"line\">    string _name;</span><br><span class=\"line\">    int _year;</span><br><span class=\"line\">    Teacher(string name,int year)&#123;</span><br><span class=\"line\">        this-&gt;_name=name;</span><br><span class=\"line\">        this-&gt;_year=year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void show()&#123;</span><br><span class=\"line\">        cout&lt;&lt;this-&gt;_name&lt;&lt;&quot;老师的年龄是：&quot;&lt;&lt;this-&gt;_year&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Student::puble Teacher&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">       Student(string name,int year):Teacher(name,year)&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>上面的基类用的是构造函数来给自己赋初始化的，所以在派生类也要写上自己的构造函数才算继承基类。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Student s1(&quot;小明&quot;,18);</span><br><span class=\"line\">    s1.show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明的年龄是：18</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。\"><a href=\"#这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。\" class=\"headerlink\" title=\"这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。\"></a><strong>这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。</strong></h2><ul>\n<li>继承的方式有三种：public private protected<br>公有继承, 私有继承, 保护继承</li>\n</ul>\n<ol>\n<li>公有继承：是以公有的形式来继承的基类，这也就意味着在基类是什么类型的在派生类也是一样的关系。</li>\n<li>私有继承：是以私有的形式来继承的基类,就是说继承下来的基类都是以私有的形式来继承的。</li>\n<li>保护继承：是以保护的形式来继承的基类，它是基于公有继承和私有继承的中间，如果你不想在外界被访问到，又想在派生类中被访问，这就可以用保护的形式来继承下来了，但基类的私有成员对象在保护的派生类中依然是私有成员对象。<br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book.png\" alt=\"继承的方式\"><br><strong>派生类不会自动的继承基类的构造函数</strong><h1 id=\"隐藏\"><a href=\"#隐藏\" class=\"headerlink\" title=\"隐藏\"></a>隐藏</h1></li>\n</ol>\n<ul>\n<li>我们以后难免会在派生类里定义属于它自己的成员变量和成员函数，但当我们在声明和定义的时候有时也会不小心的把成员变量和成员函数与基类的成员变量和成员函数名字相同，这是我们的程序就会出现名字隐藏的现象，对于隐藏就是说当我们的派生类与基类中有名字相同的，就可能会出现隐藏。如果不知道什么时候被隐藏了什么，我们可以加上作用域去看看，在这里，我的建议是，尽量不要在继承类里面用同样的名字，不然你会很自闭的。</li>\n<li>基类的析构函数最好加上关键字（virtual）写成虚函数，这样在派生类的时候的就能自动调用，而对于，纯虚函数，在派生类中是要重写的性质，因为在基类的纯虚函数是空函数一个，它的本质就是一定要在派生类里面实现它的意义。一个良好的习惯：最好把基类的析构函数写成虚的，这样在派生类中是会自动调用的。</li>\n</ul>\n<p><strong>纯虚函数是不能对它进行实例化的，也就是说不能给它创建对象，这是要注意的重点，不能说你定义的是一个纯虚函数，然后你又在main函数里给它创建一个对象来进行一些操作。</strong> </p>\n<p><strong>在实际开发中，你可以定义一个抽象基类，只完成部分功能，未完成的功能交给派生类去实现(谁派生谁实现)。这部分的功能往往是基类不需要的，或者是在基类中实现不了的，虽然基类完成不了，但强制交给了派生类去实现，否则一样不能被实例化。</strong> </p>\n<p><strong>抽象基类除了限制了派生类，也实现了多态(也就是说在main函数里，你可以使用基类来调用派生类里面重写的纯虚函数)。</strong> </p>\n<h1 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h1><ul>\n<li>其实就是在类里面把函数写成是纯虚函数，这样在派生类里就剩下重写这些虚函数。一般把抽象类用来设计一套统一的接口。<br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book2.png\" alt=\"例子\"><br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book1.png\" alt=\"例子\"><br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book3.png\" alt=\"运行结果\"><br><strong>重新认识了类的继承，这里我没有用到构造函数来给成员变量赋值，因为用了构造函数会变的很自闭，发正我是完全不能理解的那种，所以我用来另外一种方法，虽然算不上什么，但我觉得自己理解写出来的东西是可以的。孙悟空吃唐僧，这是多么厉害的，我想这个结果连孙悟空自己也不敢想的，我帮他实现了，嘻嘻。</strong></li>\n<li>这里的基类是不能被实例化的，因为基类里面的show方法，我用的是纯虚函数来写的，不能被实例化，但在派生类要实现，你不实现的话，你写这个虚函数就没意义了，基类的纯虚函数在派生类你一定要写进去，不要编译器会报错的，<h1 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h1><strong>在类中有指针又要多个类的对象的时候最好写一下类的拷贝构造函数</strong></li>\n</ul>\n<ol>\n<li>在程序中的拷贝是浅拷贝，也就是说在类中只是简单的把普通类型的成员变量复制给另外一个类的对象。但在有引用或者有指针的类里面，如果我们没有声明另外的拷贝构造函数的话，我们的程序就会报错。</li>\n<li>拷贝构造函数的形参必须是类的类型,该参数必须传引用,而且还要在前面使用const修饰符</li>\n<li>使用拷贝构造函数在本类中要有指针变量或者多对象<h1 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h1></li>\n</ol>\n<ul>\n<li>关键字 template <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">T add (T a, T b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;add(1,2)&lt;&lt;endl;;</span><br><span class=\"line\">    cout&lt;&lt;add(10.1,10.2)&lt;&lt;endl;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">20.3</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double numb(55.55);</span><br><span class=\"line\">    coutw&lt;&lt;numb&lt;&lt;endl;</span><br><span class=\"line\">    cout.setf(ios::fixed);</span><br><span class=\"line\">    cout.setf(ios::showpoint)</span><br><span class=\"line\">    cout.precision(1);</span><br><span class=\"line\">    cout&lt;&lt;numb&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">55.55</span><br><span class=\"line\">55.5</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"拷贝构造函数-1\"><a href=\"#拷贝构造函数-1\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h1><ul>\n<li><p>test.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test&#123;</span><br><span class=\"line\">    string _name;</span><br><span class=\"line\">    int _*age;</span><br><span class=\"line\">    Test(string name,int age)&#123;</span><br><span class=\"line\">        _name=name;</span><br><span class=\"line\">        _age=new int (age);</span><br><span class=\"line\">        cout&lt;&lt;&quot;有参构造函数&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void()&#123;</span><br><span class=\"line\">        cout&lt;&lt;_name&lt;&lt;&quot;的年龄&quot;&lt;&lt;_age&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //深拷贝构造函数</span><br><span class=\"line\">    Test(const Test &amp;t)&#123;//把类作为函数的参数</span><br><span class=\"line\">        _name=t._name;</span><br><span class=\"line\">        _age=new int (*t._age);//这里用的是指针来new,因为在本类中它就是以指针的方式来存放的，所以你也只能以指针的形式来启用它。</span><br><span class=\"line\">        cout&lt;&lt;&quot;拷贝构造函数&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Test()&#123;</span><br><span class=\"line\">        delete age;</span><br><span class=\"line\">        cout&lt;&lt;&quot;析构函数&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using space std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Test t1(&quot;小明&quot;,10);</span><br><span class=\"line\">    t1.show();</span><br><span class=\"line\">    //类的使用在这以上是没有问题的，这就是浅拷贝额构造函数</span><br><span class=\"line\">    //当我们要在有指针(*)或者引用(&amp;)的类中使用二次构造函数，那么我们就要写一个深的拷贝构造函数</span><br><span class=\"line\">    Test t2(t1);//这个类的复制是要有深的拷贝构造函数来配合的。因为它符合条件</span><br><span class=\"line\">    t2.show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>程序运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有参构造函数</span><br><span class=\"line\">小明的年龄10</span><br><span class=\"line\">拷贝构造函数</span><br><span class=\"line\">小明的年龄10</span><br><span class=\"line\">析构函数</span><br><span class=\"line\">析构函数</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题-这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。\"><a href=\"#其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题-这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。\" class=\"headerlink\" title=\"其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题,这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。\"></a><strong>其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题,这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。</strong></h2><h1 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;//因为要使用模板，所以在定义模板</span><br><span class=\"line\">class Apple&#123;</span><br><span class=\"line\">  friend ostream &amp;operator&lt;&lt;(ostream &amp;out,Apple &amp;a)&#123;//这里定义的是友元函数，用输出流来输出两个对象的相加</span><br><span class=\"line\">      out&lt;&lt;a.c&lt;&lt;&quot;+&quot;&lt;&lt;a.n&lt;&lt;endl;</span><br><span class=\"line\">      return out;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    T c;//泛性的成员变量</span><br><span class=\"line\">    T n;</span><br><span class=\"line\">    Apple(T _a,T_b)&#123;//构造函数</span><br><span class=\"line\">    this-&gt;c=_a;</span><br><span class=\"line\">    this-&gt;n=_b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Apple &lt;int&gt; operator+(Apple &amp;a)&#123;//这里调用的是类的构造函数来实现两个对象的相加并把相应的数值存放在本类的成员变量中。</span><br><span class=\"line\">    Apple addsum(this-&gt;c+a.c,this-&gt;n+a.n);</span><br><span class=\"line\">    return addsum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &quot;Apple.h&quot;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">     Apple &lt;int&gt;a(10,20); </span><br><span class=\"line\">     Apple &lt;int&gt;a1(20,30);</span><br><span class=\"line\">     Apple &lt;int&gt;c=a+a1;</span><br><span class=\"line\">     cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">运行结果</span><br><span class=\"line\">30+50</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong> </p>\n<p><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book5.png\" alt=\"模板类\"> </p>\n","site":{"data":{}},"excerpt":"<pre><code>c++\n</code></pre>","more":"<h1 id=\"C-Book\"><a href=\"#C-Book\" class=\"headerlink\" title=\"C++Book\"></a>C++Book</h1><h1 id=\"库\"><a href=\"#库\" class=\"headerlink\" title=\"库\"></a>库</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;hello would&lt;&lt;endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>在上面的代码我们应该都知道我什么都没有实现，这只是在简单的阐述一下c++库的重要性，也可以说是让我们更深刻的认识到有些代码的意思是什么。</strong></p>\n<ul>\n<li>#include,using (预编译指令) </li>\n<li>iostream (是c++标准库，方便使用cout,cin,) </li>\n<li>using namespace std (是命名空间,std,因为在库里大多数都有std命名空间的部分，所以规定这些名称为std)<h1 id=\"结构函数\"><a href=\"#结构函数\" class=\"headerlink\" title=\"结构函数\"></a>结构函数</h1></li>\n<li>关键字struct+结构名<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">struct point&#123;</span><br><span class=\"line\">    int a=5;</span><br><span class=\"line\">    int b=10;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    point *p=new point;    //在堆内存里new了内存</span><br><span class=\"line\">    p-&gt;a=10;</span><br><span class=\"line\">    p-&gt;b=5;</span><br><span class=\"line\">    cout&lt;&lt;p1-&gt;a&lt;&lt;&quot;\\t&quot;&lt;&lt;p1-&gt;&lt;&lt;endl;</span><br><span class=\"line\">    point p1,p2;              //在栈内存里实现,还把poit里的参数全部给p2使用</span><br><span class=\"line\">    cout&lt;&lt;p1.a&lt;&lt;&quot;\\t&quot;&lt;&lt;p1.b&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;p2.a&lt;&lt;&quot;\\t&quot;&lt;&lt;p2.b&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5    10</span><br><span class=\"line\">5    10</span><br><span class=\"line\">5    10</span><br></pre></td></tr></table></figure></p>\n<p><strong>其实结构和类是相似的</strong></p>\n<hr>\n<h1 id=\"联合函数\"><a href=\"#联合函数\" class=\"headerlink\" title=\"联合函数\"></a>联合函数</h1><ul>\n<li>关键字union+名字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">union test&#123;</span><br><span class=\"line\">    int a;</span><br><span class=\"line\">    char b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test *p=new test;         //在堆内存new了内存</span><br><span class=\"line\">    p-&gt;a=97;</span><br><span class=\"line\">    cout&lt;&lt;p-&gt;a&lt;&lt;&quot;的字符表示是：&quot;&lt;&lt;p-&gt;b&lt;&lt;endl;</span><br><span class=\"line\">    test t1;                  //在栈内存里实现</span><br><span class=\"line\">    t1.a=65;</span><br><span class=\"line\">    cout&lt;&lt;t1.a&lt;&lt;&quot;的字符表示是：&quot;&lt;&lt;t.b&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>一样的和类相似，在栈和堆内存一样使用,不相同的是：联合函数你可以给变量的其中一个赋值，而另外一个变量会自己把已经赋值的那个变量的值赋给自己。</strong></p>\n<hr>\n<h1 id=\"枚举函数\"><a href=\"#枚举函数\" class=\"headerlink\" title=\"枚举函数\"></a>枚举函数</h1><ul>\n<li>关键字enum+名字<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">enum Arrow&#123;</span><br><span class=\"line\">    eroos,ok,warning,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Arrow a1=eroos;</span><br><span class=\"line\">    Arrow a2=ok;</span><br><span class=\"line\">    Arrow a3=warning;</span><br><span class=\"line\">    cout&lt;&lt;a1&lt;&lt;a2&lt;&lt;a3&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></p>\n<p><strong>枚举的特点：它是以字符的形式声明的，但输出的确实整数型的数字</strong></p>\n<hr>\n<h1 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h1><p><strong>排序的方法有很多，但我们只要理解一种就可以了。我选择冒泡排序</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int arr[]=&#123;3,10,5,11,6&#125;</span><br><span class=\"line\">    for(int i=5-1;i&gt;0;i--)&#123;</span><br><span class=\"line\">        //把第一个数字设置为最大的数字来跟剩下的数字一起来比较，所以这的次数是总数来减一</span><br><span class=\"line\">        for(int j=0;j&lt;i;j++&gt;)&#123;</span><br><span class=\"line\">            //把每一次大的循环里的数组的大值都往后一个交换位置</span><br><span class=\"line\">            if(arr[j]&gt;arr[j+1])&#123;//条件满足就交换位置</span><br><span class=\"line\">                int temp;</span><br><span class=\"line\">                temp=arr[j];</span><br><span class=\"line\">                arr[j]=arr[j+1];</span><br><span class=\"line\">                arr[j+1]=temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;&quot;排序后&quot;&lt;&lt;endl;</span><br><span class=\"line\">    for(int i=0;i&lt;5;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;arr[i]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排序后</span><br><span class=\"line\">3</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"递归函数\"><a href=\"#递归函数\" class=\"headerlink\" title=\"递归函数\"></a>递归函数</h1><p><strong>递归函数:调用的时候是使用栈内存来实现的，函数一层一层的往下递归，递归的同时会把函数停住，而计算机会重复的把信息保存到栈内存里，遇到递归停止的条件时又会一层一层的往上走在信息停止的那一步，从而实现递归的真正意义。值得注意的是，递归是栈内存的实现，它把信息放在最底层上。每当计算机往上走的时候都是从最低下中读取信息的。栈是先出后入的内存结构。</strong></p>\n<ul>\n<li>通俗一点的意思就是在本函数里调用自身函数。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int add(int i)&#123;</span><br><span class=\"line\">    cout&lt;&lt;&quot;函数开始:i=&quot;&lt;&lt;i&lt;&lt;endl;</span><br><span class=\"line\">    if(i=5)&#123;</span><br><span class=\"line\">        return i;</span><br><span class=\"line\">    &#125;else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        add(++i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;&quot;函数结束,返回值为：&quot;&lt;&lt;i&lt;&lt;endl;</span><br><span class=\"line\">    return i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;add(1)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数的结果：`<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数开始：i=1</span><br><span class=\"line\">函数开始：i=2</span><br><span class=\"line\">函数开始：i=3</span><br><span class=\"line\">函数开始：i=4</span><br><span class=\"line\">函数开始：i=5</span><br><span class=\"line\">函数结束，返回值为：5</span><br><span class=\"line\">函数结束，返回值为：4</span><br><span class=\"line\">函数结束，返回值为：3</span><br><span class=\"line\">函数结束，返回值为：2</span><br><span class=\"line\">函数结束，返回值为：1</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的先是返回的自身函数调用的结果，这里编译器里是有五个变量来暂时存储自身函数的值，每当执行到函数返回的时候编译器都会从暂时存储那里把值返回给我们，还有一种理解，就是这个函数里的变量在每次自身函数调用的时候都被隐藏起来了，也就是说每次的自身函数的调用它都有不同的存储位置来让变量重新赋值。其实，递归函数是在返回的时候才是这种函数真真的意义，因为自身函数的最后一次刚好是函数返回值的第一次。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//阶乘的实现</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int test(int test1)&#123;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    if(test1==1)&#123;//递归的停止条件</span><br><span class=\"line\">        val=1;</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        val=test1*test(test1-1);</span><br><span class=\"line\">        return val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;&quot;实现阶乘,请输入一个数字:&quot;&lt;&lt;endl;</span><br><span class=\"line\">    int t1;</span><br><span class=\"line\">    cin&gt;&gt;t1;</span><br><span class=\"line\">    cout&lt;&lt;test(t1)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>强调一下，递归的停止条件的重要性，一旦递归没遇到停止的条件就会无穷的死循环，直到计算机的内存都跑完!!!</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int test(int t1,int t2)&#123;</span><br><span class=\"line\">    if(t2==0)&#123;</span><br><span class=\"line\">        return 1;//递归的停止条件,t2==0,就返回1</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        return test(t1,t2-1)*t1;//上面返回的值来当作第一次的值，然后一直往上计算</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;test(3,2)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure></p>\n<p><strong>递归的三大条件</strong></p>\n<ul>\n<li>(有返回值类型，无返回值类型)</li>\n</ul>\n<ol>\n<li>没有无穷的递归</li>\n<li>每一种停止的情况都执行(返回)那种情况下的正确操作</li>\n<li>所有递归函数的调用都能正确的执行操作，那么最后的结果一定是正确的</li>\n</ol>\n<hr>\n<h1 id=\"函数与指针\"><a href=\"#函数与指针\" class=\"headerlink\" title=\"函数与指针\"></a>函数与指针</h1><ul>\n<li>指向函数的指针<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int add(int a)&#123;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int test(int a)&#123;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    int (*p)(int a)=&amp;add;//指向函数的指针</span><br><span class=\"line\">    cout&lt;&lt;P(5)&lt;&lt;endl;</span><br><span class=\"line\">    int (*ip[])(int a)=&#123;&amp;add,&amp;test&#125;;//指向多个函数的指针数组</span><br><span class=\"line\">    cout&lt;&lt;ip[0](1)&lt;&lt;ip[1](2)&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>函数的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>这里的指针都是储存在栈内存里的。</li>\n</ul>\n<hr>\n<h1 id=\"预处理\"><a href=\"#预处理\" class=\"headerlink\" title=\"预处理\"></a>预处理</h1><ul>\n<li>格式化代码，去除多余的空格和注释</li>\n<li>进行一些宏替换</li>\n<li>包含另外一段代码</li>\n<li>通过一些条件的判断，动态决定是否编译某段代码</li>\n</ul>\n<ol>\n<li>宏定义</li>\n</ol>\n<h2 id=\"在定义宏的时候记得不要在定义的后面加分号！！！\"><a href=\"#在定义宏的时候记得不要在定义的后面加分号！！！\" class=\"headerlink\" title=\"在定义宏的时候记得不要在定义的后面加分号！！！\"></a><strong>在定义宏的时候记得不要在定义的后面加分号！！！</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define MAX 9               //宏定义</span><br><span class=\"line\">#define MAN2 MAX*MAX        //宏定义</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;MAX&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;MAX2&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br><span class=\"line\">81</span><br></pre></td></tr></table></figure></p>\n<ol start=\"2\">\n<li>带参数的宏定义<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define MAX 3                        //无参宏定义</span><br><span class=\"line\">#define space(x) ((x)*(x))           //声明一个带参数的宏定义</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    for(int i=1;i&lt;=MAX;i++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;i&lt;&lt;&quot;的平方是：&quot;&lt;&lt;space(i)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1的平方是：1</span><br><span class=\"line\">2的平方是：4</span><br><span class=\"line\">3的平方是：9</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define add(a,b)(a+b)           //带参的宏定义</span><br><span class=\"line\">#define test(x) #x         //#是连接</span><br><span class=\"line\">#define test1(a*,* b) a##b        //a和b是连接在一起的</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    string s1(&quot;hello,&quot;);        //字符串</span><br><span class=\"line\">    string s2(&quot;world!&quot;);</span><br><span class=\"line\">    cout&lt;&lt;add(100,100)&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;add(s1,s2)&lt;&lt;endl;     //使用宏来实现字符串的相加</span><br><span class=\"line\">    cout&lt;&lt;test(hello world)&lt;&lt;endl;</span><br><span class=\"line\">    int ab=10;</span><br><span class=\"line\">    cout&lt;&lt;test1(a,b)&lt;&lt;endl;//这里的ab是连接起来的，所以在前面定义了ab的值，也就是说这里输出的只是变量ab的值，并不是说把a和b当作实参过去的。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">200</span><br><span class=\"line\">hello,world</span><br><span class=\"line\">helloworld</span><br><span class=\"line\">10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"说明了宏的优点有-避免了强类型的检测\"><a href=\"#说明了宏的优点有-避免了强类型的检测\" class=\"headerlink\" title=\"说明了宏的优点有:避免了强类型的检测\"></a><strong>说明了宏的优点有:避免了强类型的检测</strong></h2><ol start=\"3\">\n<li>宏与常量，函数<br>宏与常量有点相似，但当他们遇上指针和引用之后又会变成什么呢？<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define x 10</span><br><span class=\"line\">const int y=5;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    const int &amp;a=x;          //ok</span><br><span class=\"line\">    const int *p=&amp;y;         //ok</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;&quot;\\t&quot;&lt;&lt;*p&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10    5</span><br></pre></td></tr></table></figure></p>\n<p><strong>这里给宏使用了引用，给常量使用了指针。还在定义的前面都加了const类型。</strong><br><strong>但是在这里还是不希望使用引用和指针的方式来操作宏和常量,把宏看作是简单的文本替换，这也是宏的原本意义。</strong></p>\n<p><strong>宏不允许重新定义，也就是说一个相同的宏只能被定义一次，要想修改宏的值，你只能先消除它，使用#undef关键来消除，然后你就可以重新定义了。</strong></p>\n<ol start=\"4\">\n<li><p>在c++中有还有内置的宏</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;__TIME__&lt;&lt;endl; //输出当前代码运行的时间</span><br><span class=\"line\">    cout&lt;&lt;__DATE&lt;&lt;endl;   //输出当前代码运行的日期</span><br><span class=\"line\">    cout&lt;&lt;__LINE&lt;&lt;endl;   //输出当前代码的所在行号</span><br><span class=\"line\">    cout&lt;&lt;__FIME__&lt;&lt;endl; //输出当前代码的文件路径</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#if #elif #else  #ifdef #ifndef</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define a 10</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    #if a&lt;20</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用测试版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #else</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用正版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">欢迎使用测试版</span><br></pre></td></tr></table></figure></p>\n<p><strong>#if类似与我们在以前代码里的if，#else类似与else,#elif类似elseif</strong></p>\n<h2 id=\"endif-很重要。如果没有它你的程序是跑不起来的。\"><a href=\"#endif-很重要。如果没有它你的程序是跑不起来的。\" class=\"headerlink\" title=\"#endif,很重要。如果没有它你的程序是跑不起来的。\"></a><strong>#endif,很重要。如果没有它你的程序是跑不起来的。</strong></h2><p><strong>在c++中有很多预定义函数，这其中有一中是异常处理函数，关键字(try)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">     __try&#123;</span><br><span class=\"line\">      int i;</span><br><span class=\"line\">      cout&lt;&lt;&quot;请输入一个数字&quot;&lt;&lt;end;</span><br><span class=\"line\">      cin&gt;&gt;i;</span><br><span class=\"line\">      if(i&lt;=0)&#123;</span><br><span class=\"line\">      throw &quot;error&quot;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">      &#125;catch(const char *p)&#123;//指定抛出异常的类型</span><br><span class=\"line\">         cout&lt;&lt;p&lt;&lt;endl;</span><br><span class=\"line\">      &#125;catch(...)&#123;</span><br><span class=\"line\">      cout&lt;&lt;&quot;在main函数里有异常&quot;&lt;&lt;endl;//任何抛出异常的类型都能接受,这里虽然是可以接受任何类型的异常但在前面已经有指定的抛出类型，所以在这里输出的是指定的抛出类型</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><strong>e.what(是用来打印异常抛出的)</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">error</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book4.png\" alt=\"不同的类型抛出\"></p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> bad_typeid:</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> bad_cast</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> bad_alloc:在new一个内存时，如果没有足够的空间时会抛出异常来，</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> ios_base::failure:上一个的异常抛出打印的类型</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> logic_error—out_of_range:这是数组下标越界会抛出(out_of_range)类型的异常来</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define a 10</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    #ifdef a</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用正版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">    #ifndef</span><br><span class=\"line\">    cout&lt;&lt;&quot;欢迎使用测试版&quot;&lt;&lt;endl;</span><br><span class=\"line\">    #endif</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>值得注意的是，#ifdef和#ifndef都要有#endif使用，#endif的意思应该是结束if</strong></p>\n<hr>\n<h1 id=\"预定义字符函数\"><a href=\"#预定义字符函数\" class=\"headerlink\" title=\"预定义字符函数\"></a>预定义字符函数</h1><p><strong>预定义字符函数就是把字符转换成大，小写的字符，在计算机中，我们虽然是以字符的形式输入到计算机中，但计算机本身的运作却是以数字的形式来使用的。值得注意的是，书上写的需要头文件但我这里是不需要头文件的，可能是版本的问题吧，如果有报错的话就加个头文件(cctype)</strong></p>\n<ol>\n<li>toupper()(把字符转换成大写的)</li>\n<li>tolower()(小写) </li>\n<li>isupper()(如果字符是大写的就为true，否则false)</li>\n<li>islower()(同上)</li>\n<li>isspace()(如果字符是空白字符就为true,否则false)，一般这个识别的都跟着cin.get()这个函数，因为它识别空格，你可以在它识别空格的时候输出一些东西，下面有个小列子。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test()&#123;</span><br><span class=\"line\">    char a,b;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入字符&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;b;</span><br><span class=\"line\">    a=toupper(b)</span><br><span class=\"line\">    cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">    if(isupper(b))&#123;//条件一开始为false</span><br><span class=\"line\">        cout&lt;&lt;&quot;转换成功\\t&quot;&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        cout&lt;&lt;&quot;转换失败&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test();</span><br><span class=\"line\">    char c;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入字符&quot;&lt;&lt;endl;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">        cin.get(c);//逐步输入字符</span><br><span class=\"line\">        if(isspace(c))&#123;//判断是否符合条件     空格</span><br><span class=\"line\">            cout&lt;&lt;&apos;--&apos;;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;while(c!=&apos;.&apos;);</span><br><span class=\"line\">    cin.get();//识别空格，是空格就打印下面的那句话</span><br><span class=\"line\">    cout&lt;&lt;&quot;空格&quot;&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入字符</span><br><span class=\"line\">a</span><br><span class=\"line\">转换成功   A</span><br><span class=\"line\">请输入字符</span><br><span class=\"line\">add test</span><br><span class=\"line\">add--test--.</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h1><h2 id=\"类的特征\"><a href=\"#类的特征\" class=\"headerlink\" title=\"   类的特征\"></a>   <strong>类的特征</strong></h2><ol>\n<li>类同时具有成员变量和成员函数。</li>\n<li>成员可变成私有和共有</li>\n<li>正常下类的成员变量是私有的</li>\n<li>类的私有成员只能在本类的函数里面定义和调用</li>\n<li>类的成员函数可以像普通的函数一样重载</li>\n<li>一个类可将另外一个类作为自己的成员变量的类性使用</li>\n<li>函数的i形参可以是类的类型</li>\n<li>类可以是函数的返回值类型</li>\n</ol>\n<hr>\n<p><strong>类的基本</strong></p>\n<ul>\n<li>所有的成员变量设为私有的</li>\n<li>用户程序员通过函数作为成员变量的接口来访问变量和完善的规定如何使用每一个公共成员函数</li>\n<li>任何辅助函数都设为私有的</li>\n</ul>\n<hr>\n<ul>\n<li>以前的数据和操作的过程都不是独立的，而c++允许我们将一些数据和操作数据的过程放在同一个地方，并封装成一个独立的个体。</li>\n<li>万物皆对象，这句话对c++程序员来说并不陌生。这并不代表我们缺少对象，对于我们这种高质男来说从来没担心过搞不到对象，因为我们随时随地都可以new一个对象出来，这不是一般人可以做到的，只有真的走进来了才可以的，虽然这个操作在c++中也不算是什么高难度的操作，但我们又不是学到这里就完事的。类和结构是完全可以交换的，唯一不一样的是结构的默认特性是public,而类的默认特性是private。</li>\n</ul>\n<hr>\n<ol>\n<li>数据类型:由值的集合以及为那些值定义的一组基本运算构成 </li>\n<li>抽像数据类型(ADT):使用数据类型的程序员访问不了值和运算的细节 </li>\n</ol>\n<ul>\n<li>封装，是用简单明了的公有函数的方式为外部程序提供对象操作接口。<h1 id=\"成员对象\"><a href=\"#成员对象\" class=\"headerlink\" title=\"成员对象\"></a>成员对象</h1></li>\n<li>分为三种：public,private，protected</li>\n</ul>\n<ol>\n<li>公有对象：不管是在类里还是在外部都能被访问到。</li>\n<li>私有对象：只能在本类中访问到。</li>\n<li>保护对象：只能在本类中访问到，在外部是访问不到的。<h1 id=\"运算符重载\"><a href=\"#运算符重载\" class=\"headerlink\" title=\"运算符重载\"></a>运算符重载</h1></li>\n<li>重载运算符，至少要有一个参数的类型是类</li>\n<li>重载的函数可以是类的友元函数也可以是成员函数</li>\n<li>不能新建运算符</li>\n<li>不能改变获取的形参操作符的意义</li>\n<li>不能改变操作符的优先级</li>\n<li>不能重载一下操作符(.(圆点)::(作用域)…)    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Son;//先声明Son类</span><br><span class=\"line\">class Bos&#123;</span><br><span class=\"line\">friend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">friend ostream &amp;operator&lt;&lt;(ostream &amp;os,Bos bos);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int a=10;</span><br><span class=\"line\">    int b=5;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Son&#123;</span><br><span class=\"line\">friend int operator+(Bos bos,Son son);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">friend ostream &amp;operator&lt;&lt;(ostream &amp;os,Bos bos);//友元函数，用来访问类的私有成员</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int a=5;</span><br><span class=\"line\">    int b=10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int operator+(Bos bos,Son son)&#123;//运算符重载加号</span><br><span class=\"line\">    int a=bos.a+bos.b;</span><br><span class=\"line\">    int b=son.a+son.b;</span><br><span class=\"line\">    return a,b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ostream &amp;operator&lt;&lt;(ostream &amp;os,Bos bos)&#123;//运算符重载&lt;&lt;号</span><br><span class=\"line\">    os&lt;&lt;&quot;a=&quot;&lt;&lt;bos.a&lt;&lt;&quot;b=&quot;&lt;&lt;bos.b&lt;&lt;endl;//把成员变量连接在cout流中</span><br><span class=\"line\">    return os;//返回cout，这样就能在main函数中直接打印</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Bos bos;</span><br><span class=\"line\">    Son son</span><br><span class=\"line\">    cout&lt;&lt;bos+son&lt;&lt;endl;//这要是没有重载加号，是运行不过的</span><br><span class=\"line\">    cout&lt;&lt;bos&lt;&lt;endl;//没有重载&lt;&lt;也是运行不过来的</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"谨慎参考，纯属本人理解。ostream-是因为要用到cout流，因为输出流是属于ostream里面的，-amp-是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。\"><a href=\"#谨慎参考，纯属本人理解。ostream-是因为要用到cout流，因为输出流是属于ostream里面的，-amp-是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。\" class=\"headerlink\" title=\"谨慎参考，纯属本人理解。ostream,是因为要用到cout流，因为输出流是属于ostream里面的，&amp;,是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。\"></a><strong>谨慎参考，纯属本人理解。ostream,是因为要用到cout流，因为输出流是属于ostream里面的，&amp;,是因为返回的是一个输出流，所以要加个引用来指引。还有就是，重载函数的参数只能是两个，反正在我电脑是两个，超过了就给老子报错，我太难了。</strong></h2><h1 id=\"const-mutable\"><a href=\"#const-mutable\" class=\"headerlink\" title=\"const mutable\"></a>const mutable</h1><ul>\n<li>众所周知，const是常量类型。而mutable是可变的，就像是普通变量。<h1 id=\"vector\"><a href=\"#vector\" class=\"headerlink\" title=\"vector\"></a>vector</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    vector &lt;int &gt;a&#123;10,20,3,5,1&#125;;</span><br><span class=\"line\">    a.insert(a.begin(),8);//在向量最前面插入数字8</span><br><span class=\"line\">    sort(a.begin(),a.end());//升序</span><br><span class=\"line\">    vector &lt;int &gt;::iterator it;//打印</span><br><span class=\"line\">    for(it=a.begin();it!=a.end();it++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;*it&lt;&lt;&quot;      &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    reverse(a.begin(),a.end());//逆序</span><br><span class=\"line\">    for(it=a.begin();it!=a.end();it++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;*it&lt;&lt;&quot;      &quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a.clear();//清除向量</span><br><span class=\"line\">    vector &lt;int &gt; b;</span><br><span class=\"line\">    a.swap(b);</span><br><span class=\"line\">    for(it=b.begin();it!=b.end();it++)&#123;</span><br><span class=\"line\">        cout&lt;&lt;*it&lt;&lt;&quot;      &quot;;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">1    3    5   8   10   20</span><br><span class=\"line\">20   10   8   5   3   1</span><br><span class=\"line\">20   10   8   5   3   1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main ()&#123;</span><br><span class=\"line\">      int numb[]=&#123;10,20,23,11,&#125;</span><br><span class=\"line\">      int numb1[4]=&#123;0&#125;;</span><br><span class=\"line\">      memcpy(numb1,numb,sizeof(numb));</span><br><span class=\"line\">      for(int i=0;i&lt;4;i++)&#123;</span><br><span class=\"line\">      cout&lt;&lt;numb1[i]&lt;&lt;&apos;   &apos;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">10   20   23   11</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <strong>静态成员函数和静态成员变量</strong></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">&quot;.h&quot;</span><br><span class=\"line\"># include &lt;iostream&gt;</span><br><span class=\"line\">class Test&#123;</span><br><span class=\"line\">      private:</span><br><span class=\"line\">      static int a;</span><br><span class=\"line\">      int b;</span><br><span class=\"line\">      public:</span><br><span class=\"line\">      Test(int _a)&#123;</span><br><span class=\"line\">      a=_a;</span><br><span class=\"line\">      ++b;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      static void show(Test tt)&#123;//静态成员函数中通过对象来引用非静态成员</span><br><span class=\"line\">      cout&lt;&lt;&quot;tt.a=&quot;&lt;tt.a&lt;&lt;endl;</span><br><span class=\"line\">      cout&lt;&lt;&quot;Test::b=&quot;&lt;&lt;Test::b&lt;&lt;endl;</span><br><span class=\"line\">      cout&lt;&lt;&quot;tt.b=&quot;&lt;&lt;tt.b&lt;&lt;endl;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int Test::b=0;//这是放在main函数上面的</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">        Test t1(100);</span><br><span class=\"line\">        Test t2(200);</span><br><span class=\"line\">        Test::show(t1);</span><br><span class=\"line\">        Test::show(t2);//静态成员函数调用时不用对象名 </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果为：</span><br><span class=\"line\">tt.a=100</span><br><span class=\"line\">Test::b=2</span><br><span class=\"line\">tt.b=2</span><br><span class=\"line\">tt.a=200</span><br><span class=\"line\">Test::b=2</span><br><span class=\"line\">tt.b=2</span><br></pre></td></tr></table></figure>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Teacher&#123;</span><br><span class=\"line\">    string _name;</span><br><span class=\"line\">    int _year;</span><br><span class=\"line\">    Teacher(string name,int year)&#123;</span><br><span class=\"line\">        this-&gt;_name=name;</span><br><span class=\"line\">        this-&gt;_year=year;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void show()&#123;</span><br><span class=\"line\">        cout&lt;&lt;this-&gt;_name&lt;&lt;&quot;老师的年龄是：&quot;&lt;&lt;this-&gt;_year&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Student::puble Teacher&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">       Student(string name,int year):Teacher(name,year)&#123;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>上面的基类用的是构造函数来给自己赋初始化的，所以在派生类也要写上自己的构造函数才算继承基类。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Student s1(&quot;小明&quot;,18);</span><br><span class=\"line\">    s1.show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小明的年龄是：18</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。\"><a href=\"#这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。\" class=\"headerlink\" title=\"这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。\"></a><strong>这里比较特殊的就是成员变量一般是构造函数给的初始化值，但我们在继承的时候往往会遇到问题，就是在声明子类的构造函数会报错，这时我们只能在子类的构造函数中给父类的成员变量赋值，这样才能算是真正的继承下来。</strong></h2><ul>\n<li>继承的方式有三种：public private protected<br>公有继承, 私有继承, 保护继承</li>\n</ul>\n<ol>\n<li>公有继承：是以公有的形式来继承的基类，这也就意味着在基类是什么类型的在派生类也是一样的关系。</li>\n<li>私有继承：是以私有的形式来继承的基类,就是说继承下来的基类都是以私有的形式来继承的。</li>\n<li>保护继承：是以保护的形式来继承的基类，它是基于公有继承和私有继承的中间，如果你不想在外界被访问到，又想在派生类中被访问，这就可以用保护的形式来继承下来了，但基类的私有成员对象在保护的派生类中依然是私有成员对象。<br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book.png\" alt=\"继承的方式\"><br><strong>派生类不会自动的继承基类的构造函数</strong><h1 id=\"隐藏\"><a href=\"#隐藏\" class=\"headerlink\" title=\"隐藏\"></a>隐藏</h1></li>\n</ol>\n<ul>\n<li>我们以后难免会在派生类里定义属于它自己的成员变量和成员函数，但当我们在声明和定义的时候有时也会不小心的把成员变量和成员函数与基类的成员变量和成员函数名字相同，这是我们的程序就会出现名字隐藏的现象，对于隐藏就是说当我们的派生类与基类中有名字相同的，就可能会出现隐藏。如果不知道什么时候被隐藏了什么，我们可以加上作用域去看看，在这里，我的建议是，尽量不要在继承类里面用同样的名字，不然你会很自闭的。</li>\n<li>基类的析构函数最好加上关键字（virtual）写成虚函数，这样在派生类的时候的就能自动调用，而对于，纯虚函数，在派生类中是要重写的性质，因为在基类的纯虚函数是空函数一个，它的本质就是一定要在派生类里面实现它的意义。一个良好的习惯：最好把基类的析构函数写成虚的，这样在派生类中是会自动调用的。</li>\n</ul>\n<p><strong>纯虚函数是不能对它进行实例化的，也就是说不能给它创建对象，这是要注意的重点，不能说你定义的是一个纯虚函数，然后你又在main函数里给它创建一个对象来进行一些操作。</strong> </p>\n<p><strong>在实际开发中，你可以定义一个抽象基类，只完成部分功能，未完成的功能交给派生类去实现(谁派生谁实现)。这部分的功能往往是基类不需要的，或者是在基类中实现不了的，虽然基类完成不了，但强制交给了派生类去实现，否则一样不能被实例化。</strong> </p>\n<p><strong>抽象基类除了限制了派生类，也实现了多态(也就是说在main函数里，你可以使用基类来调用派生类里面重写的纯虚函数)。</strong> </p>\n<h1 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h1><ul>\n<li>其实就是在类里面把函数写成是纯虚函数，这样在派生类里就剩下重写这些虚函数。一般把抽象类用来设计一套统一的接口。<br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book2.png\" alt=\"例子\"><br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book1.png\" alt=\"例子\"><br><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book3.png\" alt=\"运行结果\"><br><strong>重新认识了类的继承，这里我没有用到构造函数来给成员变量赋值，因为用了构造函数会变的很自闭，发正我是完全不能理解的那种，所以我用来另外一种方法，虽然算不上什么，但我觉得自己理解写出来的东西是可以的。孙悟空吃唐僧，这是多么厉害的，我想这个结果连孙悟空自己也不敢想的，我帮他实现了，嘻嘻。</strong></li>\n<li>这里的基类是不能被实例化的，因为基类里面的show方法，我用的是纯虚函数来写的，不能被实例化，但在派生类要实现，你不实现的话，你写这个虚函数就没意义了，基类的纯虚函数在派生类你一定要写进去，不要编译器会报错的，<h1 id=\"拷贝构造函数\"><a href=\"#拷贝构造函数\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h1><strong>在类中有指针又要多个类的对象的时候最好写一下类的拷贝构造函数</strong></li>\n</ul>\n<ol>\n<li>在程序中的拷贝是浅拷贝，也就是说在类中只是简单的把普通类型的成员变量复制给另外一个类的对象。但在有引用或者有指针的类里面，如果我们没有声明另外的拷贝构造函数的话，我们的程序就会报错。</li>\n<li>拷贝构造函数的形参必须是类的类型,该参数必须传引用,而且还要在前面使用const修饰符</li>\n<li>使用拷贝构造函数在本类中要有指针变量或者多对象<h1 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h1></li>\n</ol>\n<ul>\n<li>关键字 template <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">template &lt;typename T&gt;</span><br><span class=\"line\">T add (T a, T b)&#123;</span><br><span class=\"line\">    return a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    cout&lt;&lt;add(1,2)&lt;&lt;endl;;</span><br><span class=\"line\">    cout&lt;&lt;add(10.1,10.2)&lt;&lt;endl;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">20.3</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double numb(55.55);</span><br><span class=\"line\">    coutw&lt;&lt;numb&lt;&lt;endl;</span><br><span class=\"line\">    cout.setf(ios::fixed);</span><br><span class=\"line\">    cout.setf(ios::showpoint)</span><br><span class=\"line\">    cout.precision(1);</span><br><span class=\"line\">    cout&lt;&lt;numb&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">55.55</span><br><span class=\"line\">55.5</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"拷贝构造函数-1\"><a href=\"#拷贝构造函数-1\" class=\"headerlink\" title=\"拷贝构造函数\"></a>拷贝构造函数</h1><ul>\n<li><p>test.h</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test&#123;</span><br><span class=\"line\">    string _name;</span><br><span class=\"line\">    int _*age;</span><br><span class=\"line\">    Test(string name,int age)&#123;</span><br><span class=\"line\">        _name=name;</span><br><span class=\"line\">        _age=new int (age);</span><br><span class=\"line\">        cout&lt;&lt;&quot;有参构造函数&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void()&#123;</span><br><span class=\"line\">        cout&lt;&lt;_name&lt;&lt;&quot;的年龄&quot;&lt;&lt;_age&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //深拷贝构造函数</span><br><span class=\"line\">    Test(const Test &amp;t)&#123;//把类作为函数的参数</span><br><span class=\"line\">        _name=t._name;</span><br><span class=\"line\">        _age=new int (*t._age);//这里用的是指针来new,因为在本类中它就是以指针的方式来存放的，所以你也只能以指针的形式来启用它。</span><br><span class=\"line\">        cout&lt;&lt;&quot;拷贝构造函数&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ~Test()&#123;</span><br><span class=\"line\">        delete age;</span><br><span class=\"line\">        cout&lt;&lt;&quot;析构函数&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>main</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using space std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    Test t1(&quot;小明&quot;,10);</span><br><span class=\"line\">    t1.show();</span><br><span class=\"line\">    //类的使用在这以上是没有问题的，这就是浅拷贝额构造函数</span><br><span class=\"line\">    //当我们要在有指针(*)或者引用(&amp;)的类中使用二次构造函数，那么我们就要写一个深的拷贝构造函数</span><br><span class=\"line\">    Test t2(t1);//这个类的复制是要有深的拷贝构造函数来配合的。因为它符合条件</span><br><span class=\"line\">    t2.show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>程序运行结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有参构造函数</span><br><span class=\"line\">小明的年龄10</span><br><span class=\"line\">拷贝构造函数</span><br><span class=\"line\">小明的年龄10</span><br><span class=\"line\">析构函数</span><br><span class=\"line\">析构函数</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题-这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。\"><a href=\"#其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题-这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。\" class=\"headerlink\" title=\"其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题,这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。\"></a><strong>其实，拷不拷贝我们要认得类的成员变量有没有指针和引用，一般来说计算机会帮我们直接赋值的，深的拷贝构造函数的问题就是当我们第一次使用构造函数的时候，计算机会跟着自动调用析构函数，把我们之前定义的指针变量给销了，这也得不到我们程序想要的结果啊，不但没有走到我们想要的答案，反倒会给我们的程序报错，这就是个致命的问题,这是我们就只能去解救这个问题，所以我们要用到深的拷贝构造函数。其实在上面的的程序只是简单的想把t1的值赋给t2来间接的让t2有值。</strong></h2><h1 id=\"类模板\"><a href=\"#类模板\" class=\"headerlink\" title=\"类模板\"></a>类模板</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;//因为要使用模板，所以在定义模板</span><br><span class=\"line\">class Apple&#123;</span><br><span class=\"line\">  friend ostream &amp;operator&lt;&lt;(ostream &amp;out,Apple &amp;a)&#123;//这里定义的是友元函数，用输出流来输出两个对象的相加</span><br><span class=\"line\">      out&lt;&lt;a.c&lt;&lt;&quot;+&quot;&lt;&lt;a.n&lt;&lt;endl;</span><br><span class=\"line\">      return out;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    T c;//泛性的成员变量</span><br><span class=\"line\">    T n;</span><br><span class=\"line\">    Apple(T _a,T_b)&#123;//构造函数</span><br><span class=\"line\">    this-&gt;c=_a;</span><br><span class=\"line\">    this-&gt;n=_b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Apple &lt;int&gt; operator+(Apple &amp;a)&#123;//这里调用的是类的构造函数来实现两个对象的相加并把相应的数值存放在本类的成员变量中。</span><br><span class=\"line\">    Apple addsum(this-&gt;c+a.c,this-&gt;n+a.n);</span><br><span class=\"line\">    return addsum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &quot;Apple.h&quot;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">     Apple &lt;int&gt;a(10,20); </span><br><span class=\"line\">     Apple &lt;int&gt;a1(20,30);</span><br><span class=\"line\">     Apple &lt;int&gt;c=a+a1;</span><br><span class=\"line\">     cout&lt;&lt;c&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">运行结果</span><br><span class=\"line\">30+50</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong> </p>\n<p><img src=\"//EvanShady.github.io/2019/06/12/C-Book/c-Book5.png\" alt=\"模板类\"> </p>"},{"title":"file","date":"2019-05-31T05:57:01.000Z","_content":"注释\n<!--more-->\n# 流\n**c++中的流，可以让我们做很多我们想不到的操作，文件流，输入和输出流。**\n1. 文件流的头文件(fstream)\n2. 输入和输出流的头文件(istream)\n* 把输入流当做函数的参数\n```\n#include <iostream>\nusing namespace std;\nvoid test(istream &a){\n    do{\n    char A;\n    cout<<请输入字符<<endl;\n    a.get(A);//这里是以一个字符的形式输入\n    cout.put(A);//是以字符串的形式输出\n    }while(A!=' ');//把条件设为变量不能等于空格\n}\nint main(){\n    test(cin);\n}\n```\n运行结果\n```\n请输入字符\nabc\nabc\n```\n----\n# 文件\n> 文件有两种类型：\n* 文本文件--以ASCLL码形式存储在计算机中。\n* 二进制文件--以二进制写进计算机。\n>> 分为三种类型：1.写文件（ofstream）,2.读文件（ifstream）3.（fstream）。\n* 写入文件分为5大部分：\n1. 先把写文件的头文件包含进去。\n2. 然后确定你要写的文件的类型\n3. 之后确定文件的名字和打开的方式\n4. 把内容写进去\n5. 关闭文件\n![打开方式](file/file.png)\n```\n#include<iostream>\n#include<fstream>//引入写文件的头文件\nusing namespace std;\nvoid test(){\n    ofstream ofs;// 文件的类型 写入文件\n    ofs.open(\"test.txt\",ios::out);文件名和打开的方式(写的方式)\n    ofs<<\"你好！\"<<endl;把你要写进文件的内容写进去\n    ofs.close(); 关闭文件\n}\nvoid test1(){\n    ifstream ifs;//文件类型，读文件\n    ifs.open(\"test.txt\",ios::in);//打开的文件名和打开方式(读的方式)\n    if(!ifs.is_open()){//判断打开文件\n        cout<<\"文件打开失败\"<<endl;\n    }\n    string buf;\n    while(getline(ifs,buf)){//以一行的形式读入编译器并输出\n        cout<<buf<<endl;\n    }\n    ifs.close();关闭文件\n}\nint main(){\n    test();//调用test函数\n    test1();//调用函数\n}\n```\n## 对于写的内容追加到文件中的命令是如下：\n```\n#include <iostream>\n#include <fstream>\nusing namestape std;\nint main(){\n    ofstream ofs;//声明文件的形式\n    ofs.open(\"test\",ios::app);//打开的方式\n    ofs<<\"你好\"<<endl;//写进的内容\n    ofs.close();//关闭文件\n    ifstream ifs;//声明文件的形式\n    ifs.open(\"test\",ios::in);//打开的方式\n    if(!ifs.isopen()){//判断文件的打开是否成功\n        cout<<\"文件打开失败\"<<endl;\n    }\n    ifs.close();//关闭文件\n}\n```\n* 在这里运行几次之后的结果会和第一次的不一样，因为在这里是以追加的形式向文件中写入你的内容。\n![运行结果](file/file1.png)\n# 用输出流来控制小数点\n* 这里是用输出流来控制小数点的个数\n```\n#include <iostream>\n#include <iomanip>//下面的函数会用到这个头文件\nusing namespace std;\nint main(){\n    double a(10.1234)\n    cout<<a<<endl;\n    cout.setf(ios::fixed);//小数点后的位数,默认为6个数位\n    cout.setf(ios::showpoint);//打印小数点和小数点的个数，默认为6个数位\n    cout<<a<<endl;\n    cout<<setw(2)<<setprecision(2)<<a<<endl;//给出小数点后的几位数\n    cout<<setw(6)<<a<<endl;\n}\n\n```\n运行结果：\n```\n10.1234\n10.123400\n10.12\n 10.12\n```\n# 四舍五入\n* 简单的把数字四舍五入\n```\n#include <iostream>\n#include <cmath>//在c++中有很多预定义的算术函数，都需要用到这个头文件\nusing namespace std;\nint main(){\n    double numb(0);\n    int test(0);\n    cout<<\"请输入要四舍五入的数字：\"<<endl;\n    cin>>numb;\n    test=static_cast<int >(floor(numb+0.5));//把四舍五入后的数字强制转换成int类型\n    cout<<test<<endl;\n}\n```\n//简单的输出算术平方跟\n```\n#include <iostream>\n#include <cmath>//c++与定义的函数调用\nusing namespace std;\nint main(){\n    double test(9.0),test1(0);\n    test1=sqrt(test);//预定义平方跟函数\n    cout<<test1<<endl;\n    cout.setf(ios::fixed);\n    cout.setf(ios::showpoint);\n    cout<<setw(6)<<setprecision(2)<<test1<<endl;\n    cout<<pow(3,2)<<endl;\n    //pow函数，实现的是数字的几次方，前面的参数是数字，后面的参数是几次方,但函数返回的是double类性的数，因为我们上面把输出流设置成小数点后2位，本来的结果应该是9。\n}\n```\n运行结果：\n```\n3\n  3.00\n9.00\n```\n**在c++中还有很多类似于写好的函数放在不一样的c++库中,这样的做法无非就是方便了我们这些短命子以后不用自己在写一遍实现的代码。比如我们经常用到的cin cout 这些都是放在一个库里面的我们需要的时候都是从iostrean库中的调用的。其实在这些里面还有很多很好玩的，比如上面用到的利用输出流来控制我们的变量输出格式，这些虽然看起来简单，但要我们代码来一一实现的话就有点小自闭了，也没什么必要这么做，因为现在都有现成的了，为什么不要？要是还想知道c++里还有哪些好玩的库，你自己以后慢慢寻找。** \n# 随机数字\n**生成的随机数字的范围是1～6**\n```\n#include <iostream>\n#include <cstdlib>//随机种子的头文件\nusing namespace std;\nvoid test(){\n    srand(time(0));\n    int a,b;\n    cout<<\"请输入最大的数字\"<<endl;\n    cin>>a;\n    cout<<\"请输入最小的数字\"<<endl;\n    cin>>b;\n    if(b==0){\n        cout<<(rand()%a)+1<<endl;\n    }else{\n        cout<<(rand()%a)+b<<endl;\n    }\n}\nint main (){\n    srand(time(0));//声明时间种子\n    cout<<(rand()%6)+1<<endl;模6(得到的是0～5)+1(是把数字都加上1)\n}\n```\n# 黑盒\n* 也叫做函数的抽象化。\n","source":"_posts/file.md","raw":"---\ntitle: file\ndate: 2019-05-31 13:57:01\ntags:\n---\n注释\n<!--more-->\n# 流\n**c++中的流，可以让我们做很多我们想不到的操作，文件流，输入和输出流。**\n1. 文件流的头文件(fstream)\n2. 输入和输出流的头文件(istream)\n* 把输入流当做函数的参数\n```\n#include <iostream>\nusing namespace std;\nvoid test(istream &a){\n    do{\n    char A;\n    cout<<请输入字符<<endl;\n    a.get(A);//这里是以一个字符的形式输入\n    cout.put(A);//是以字符串的形式输出\n    }while(A!=' ');//把条件设为变量不能等于空格\n}\nint main(){\n    test(cin);\n}\n```\n运行结果\n```\n请输入字符\nabc\nabc\n```\n----\n# 文件\n> 文件有两种类型：\n* 文本文件--以ASCLL码形式存储在计算机中。\n* 二进制文件--以二进制写进计算机。\n>> 分为三种类型：1.写文件（ofstream）,2.读文件（ifstream）3.（fstream）。\n* 写入文件分为5大部分：\n1. 先把写文件的头文件包含进去。\n2. 然后确定你要写的文件的类型\n3. 之后确定文件的名字和打开的方式\n4. 把内容写进去\n5. 关闭文件\n![打开方式](file/file.png)\n```\n#include<iostream>\n#include<fstream>//引入写文件的头文件\nusing namespace std;\nvoid test(){\n    ofstream ofs;// 文件的类型 写入文件\n    ofs.open(\"test.txt\",ios::out);文件名和打开的方式(写的方式)\n    ofs<<\"你好！\"<<endl;把你要写进文件的内容写进去\n    ofs.close(); 关闭文件\n}\nvoid test1(){\n    ifstream ifs;//文件类型，读文件\n    ifs.open(\"test.txt\",ios::in);//打开的文件名和打开方式(读的方式)\n    if(!ifs.is_open()){//判断打开文件\n        cout<<\"文件打开失败\"<<endl;\n    }\n    string buf;\n    while(getline(ifs,buf)){//以一行的形式读入编译器并输出\n        cout<<buf<<endl;\n    }\n    ifs.close();关闭文件\n}\nint main(){\n    test();//调用test函数\n    test1();//调用函数\n}\n```\n## 对于写的内容追加到文件中的命令是如下：\n```\n#include <iostream>\n#include <fstream>\nusing namestape std;\nint main(){\n    ofstream ofs;//声明文件的形式\n    ofs.open(\"test\",ios::app);//打开的方式\n    ofs<<\"你好\"<<endl;//写进的内容\n    ofs.close();//关闭文件\n    ifstream ifs;//声明文件的形式\n    ifs.open(\"test\",ios::in);//打开的方式\n    if(!ifs.isopen()){//判断文件的打开是否成功\n        cout<<\"文件打开失败\"<<endl;\n    }\n    ifs.close();//关闭文件\n}\n```\n* 在这里运行几次之后的结果会和第一次的不一样，因为在这里是以追加的形式向文件中写入你的内容。\n![运行结果](file/file1.png)\n# 用输出流来控制小数点\n* 这里是用输出流来控制小数点的个数\n```\n#include <iostream>\n#include <iomanip>//下面的函数会用到这个头文件\nusing namespace std;\nint main(){\n    double a(10.1234)\n    cout<<a<<endl;\n    cout.setf(ios::fixed);//小数点后的位数,默认为6个数位\n    cout.setf(ios::showpoint);//打印小数点和小数点的个数，默认为6个数位\n    cout<<a<<endl;\n    cout<<setw(2)<<setprecision(2)<<a<<endl;//给出小数点后的几位数\n    cout<<setw(6)<<a<<endl;\n}\n\n```\n运行结果：\n```\n10.1234\n10.123400\n10.12\n 10.12\n```\n# 四舍五入\n* 简单的把数字四舍五入\n```\n#include <iostream>\n#include <cmath>//在c++中有很多预定义的算术函数，都需要用到这个头文件\nusing namespace std;\nint main(){\n    double numb(0);\n    int test(0);\n    cout<<\"请输入要四舍五入的数字：\"<<endl;\n    cin>>numb;\n    test=static_cast<int >(floor(numb+0.5));//把四舍五入后的数字强制转换成int类型\n    cout<<test<<endl;\n}\n```\n//简单的输出算术平方跟\n```\n#include <iostream>\n#include <cmath>//c++与定义的函数调用\nusing namespace std;\nint main(){\n    double test(9.0),test1(0);\n    test1=sqrt(test);//预定义平方跟函数\n    cout<<test1<<endl;\n    cout.setf(ios::fixed);\n    cout.setf(ios::showpoint);\n    cout<<setw(6)<<setprecision(2)<<test1<<endl;\n    cout<<pow(3,2)<<endl;\n    //pow函数，实现的是数字的几次方，前面的参数是数字，后面的参数是几次方,但函数返回的是double类性的数，因为我们上面把输出流设置成小数点后2位，本来的结果应该是9。\n}\n```\n运行结果：\n```\n3\n  3.00\n9.00\n```\n**在c++中还有很多类似于写好的函数放在不一样的c++库中,这样的做法无非就是方便了我们这些短命子以后不用自己在写一遍实现的代码。比如我们经常用到的cin cout 这些都是放在一个库里面的我们需要的时候都是从iostrean库中的调用的。其实在这些里面还有很多很好玩的，比如上面用到的利用输出流来控制我们的变量输出格式，这些虽然看起来简单，但要我们代码来一一实现的话就有点小自闭了，也没什么必要这么做，因为现在都有现成的了，为什么不要？要是还想知道c++里还有哪些好玩的库，你自己以后慢慢寻找。** \n# 随机数字\n**生成的随机数字的范围是1～6**\n```\n#include <iostream>\n#include <cstdlib>//随机种子的头文件\nusing namespace std;\nvoid test(){\n    srand(time(0));\n    int a,b;\n    cout<<\"请输入最大的数字\"<<endl;\n    cin>>a;\n    cout<<\"请输入最小的数字\"<<endl;\n    cin>>b;\n    if(b==0){\n        cout<<(rand()%a)+1<<endl;\n    }else{\n        cout<<(rand()%a)+b<<endl;\n    }\n}\nint main (){\n    srand(time(0));//声明时间种子\n    cout<<(rand()%6)+1<<endl;模6(得到的是0～5)+1(是把数字都加上1)\n}\n```\n# 黑盒\n* 也叫做函数的抽象化。\n","slug":"file","published":1,"updated":"2019-09-12T05:12:30.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgv000dgoz7qwzyjtgz","content":"<p>注释<br><a id=\"more\"></a></p>\n<h1 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h1><p><strong>c++中的流，可以让我们做很多我们想不到的操作，文件流，输入和输出流。</strong></p>\n<ol>\n<li>文件流的头文件(fstream)</li>\n<li>输入和输出流的头文件(istream)</li>\n</ol>\n<ul>\n<li>把输入流当做函数的参数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test(istream &amp;a)&#123;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">    char A;</span><br><span class=\"line\">    cout&lt;&lt;请输入字符&lt;&lt;endl;</span><br><span class=\"line\">    a.get(A);//这里是以一个字符的形式输入</span><br><span class=\"line\">    cout.put(A);//是以字符串的形式输出</span><br><span class=\"line\">    &#125;while(A!=&apos; &apos;);//把条件设为变量不能等于空格</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test(cin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入字符</span><br><span class=\"line\">abc</span><br><span class=\"line\">abc</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><blockquote>\n<p>文件有两种类型：</p>\n<ul>\n<li>文本文件–以ASCLL码形式存储在计算机中。</li>\n<li>二进制文件–以二进制写进计算机。<blockquote>\n<p>分为三种类型：1.写文件（ofstream）,2.读文件（ifstream）3.（fstream）。</p>\n</blockquote>\n</li>\n<li>写入文件分为5大部分：</li>\n</ul>\n<ol>\n<li>先把写文件的头文件包含进去。</li>\n<li>然后确定你要写的文件的类型</li>\n<li>之后确定文件的名字和打开的方式</li>\n<li>把内容写进去</li>\n<li>关闭文件<br><img src=\"//EvanShady.github.io/2019/05/31/file/file.png\" alt=\"打开方式\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;fstream&gt;//引入写文件的头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test()&#123;</span><br><span class=\"line\">    ofstream ofs;// 文件的类型 写入文件</span><br><span class=\"line\">    ofs.open(&quot;test.txt&quot;,ios::out);文件名和打开的方式(写的方式)</span><br><span class=\"line\">    ofs&lt;&lt;&quot;你好！&quot;&lt;&lt;endl;把你要写进文件的内容写进去</span><br><span class=\"line\">    ofs.close(); 关闭文件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void test1()&#123;</span><br><span class=\"line\">    ifstream ifs;//文件类型，读文件</span><br><span class=\"line\">    ifs.open(&quot;test.txt&quot;,ios::in);//打开的文件名和打开方式(读的方式)</span><br><span class=\"line\">    if(!ifs.is_open())&#123;//判断打开文件</span><br><span class=\"line\">        cout&lt;&lt;&quot;文件打开失败&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    string buf;</span><br><span class=\"line\">    while(getline(ifs,buf))&#123;//以一行的形式读入编译器并输出</span><br><span class=\"line\">        cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ifs.close();关闭文件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test();//调用test函数</span><br><span class=\"line\">    test1();//调用函数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"对于写的内容追加到文件中的命令是如下：\"><a href=\"#对于写的内容追加到文件中的命令是如下：\" class=\"headerlink\" title=\"对于写的内容追加到文件中的命令是如下：\"></a>对于写的内容追加到文件中的命令是如下：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">using namestape std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    ofstream ofs;//声明文件的形式</span><br><span class=\"line\">    ofs.open(&quot;test&quot;,ios::app);//打开的方式</span><br><span class=\"line\">    ofs&lt;&lt;&quot;你好&quot;&lt;&lt;endl;//写进的内容</span><br><span class=\"line\">    ofs.close();//关闭文件</span><br><span class=\"line\">    ifstream ifs;//声明文件的形式</span><br><span class=\"line\">    ifs.open(&quot;test&quot;,ios::in);//打开的方式</span><br><span class=\"line\">    if(!ifs.isopen())&#123;//判断文件的打开是否成功</span><br><span class=\"line\">        cout&lt;&lt;&quot;文件打开失败&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ifs.close();//关闭文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在这里运行几次之后的结果会和第一次的不一样，因为在这里是以追加的形式向文件中写入你的内容。<br><img src=\"//EvanShady.github.io/2019/05/31/file/file1.png\" alt=\"运行结果\"><h1 id=\"用输出流来控制小数点\"><a href=\"#用输出流来控制小数点\" class=\"headerlink\" title=\"用输出流来控制小数点\"></a>用输出流来控制小数点</h1></li>\n<li>这里是用输出流来控制小数点的个数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;iomanip&gt;//下面的函数会用到这个头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double a(10.1234)</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">    cout.setf(ios::fixed);//小数点后的位数,默认为6个数位</span><br><span class=\"line\">    cout.setf(ios::showpoint);//打印小数点和小数点的个数，默认为6个数位</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;setw(2)&lt;&lt;setprecision(2)&lt;&lt;a&lt;&lt;endl;//给出小数点后的几位数</span><br><span class=\"line\">    cout&lt;&lt;setw(6)&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.1234</span><br><span class=\"line\">10.123400</span><br><span class=\"line\">10.12</span><br><span class=\"line\"> 10.12</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"四舍五入\"><a href=\"#四舍五入\" class=\"headerlink\" title=\"四舍五入\"></a>四舍五入</h1><ul>\n<li>简单的把数字四舍五入<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;//在c++中有很多预定义的算术函数，都需要用到这个头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double numb(0);</span><br><span class=\"line\">    int test(0);</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入要四舍五入的数字：&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;numb;</span><br><span class=\"line\">    test=static_cast&lt;int &gt;(floor(numb+0.5));//把四舍五入后的数字强制转换成int类型</span><br><span class=\"line\">    cout&lt;&lt;test&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//简单的输出算术平方跟<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;//c++与定义的函数调用</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double test(9.0),test1(0);</span><br><span class=\"line\">    test1=sqrt(test);//预定义平方跟函数</span><br><span class=\"line\">    cout&lt;&lt;test1&lt;&lt;endl;</span><br><span class=\"line\">    cout.setf(ios::fixed);</span><br><span class=\"line\">    cout.setf(ios::showpoint);</span><br><span class=\"line\">    cout&lt;&lt;setw(6)&lt;&lt;setprecision(2)&lt;&lt;test1&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;pow(3,2)&lt;&lt;endl;</span><br><span class=\"line\">    //pow函数，实现的是数字的几次方，前面的参数是数字，后面的参数是几次方,但函数返回的是double类性的数，因为我们上面把输出流设置成小数点后2位，本来的结果应该是9。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">  3.00</span><br><span class=\"line\">9.00</span><br></pre></td></tr></table></figure></p>\n<p><strong>在c++中还有很多类似于写好的函数放在不一样的c++库中,这样的做法无非就是方便了我们这些短命子以后不用自己在写一遍实现的代码。比如我们经常用到的cin cout 这些都是放在一个库里面的我们需要的时候都是从iostrean库中的调用的。其实在这些里面还有很多很好玩的，比如上面用到的利用输出流来控制我们的变量输出格式，这些虽然看起来简单，但要我们代码来一一实现的话就有点小自闭了，也没什么必要这么做，因为现在都有现成的了，为什么不要？要是还想知道c++里还有哪些好玩的库，你自己以后慢慢寻找。</strong> </p>\n<h1 id=\"随机数字\"><a href=\"#随机数字\" class=\"headerlink\" title=\"随机数字\"></a>随机数字</h1><p><strong>生成的随机数字的范围是1～6</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstdlib&gt;//随机种子的头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test()&#123;</span><br><span class=\"line\">    srand(time(0));</span><br><span class=\"line\">    int a,b;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入最大的数字&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;a;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入最小的数字&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;b;</span><br><span class=\"line\">    if(b==0)&#123;</span><br><span class=\"line\">        cout&lt;&lt;(rand()%a)+1&lt;&lt;endl;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        cout&lt;&lt;(rand()%a)+b&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main ()&#123;</span><br><span class=\"line\">    srand(time(0));//声明时间种子</span><br><span class=\"line\">    cout&lt;&lt;(rand()%6)+1&lt;&lt;endl;模6(得到的是0～5)+1(是把数字都加上1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"黑盒\"><a href=\"#黑盒\" class=\"headerlink\" title=\"黑盒\"></a>黑盒</h1><ul>\n<li>也叫做函数的抽象化。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>注释<br></p>","more":"<p></p>\n<h1 id=\"流\"><a href=\"#流\" class=\"headerlink\" title=\"流\"></a>流</h1><p><strong>c++中的流，可以让我们做很多我们想不到的操作，文件流，输入和输出流。</strong></p>\n<ol>\n<li>文件流的头文件(fstream)</li>\n<li>输入和输出流的头文件(istream)</li>\n</ol>\n<ul>\n<li>把输入流当做函数的参数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test(istream &amp;a)&#123;</span><br><span class=\"line\">    do&#123;</span><br><span class=\"line\">    char A;</span><br><span class=\"line\">    cout&lt;&lt;请输入字符&lt;&lt;endl;</span><br><span class=\"line\">    a.get(A);//这里是以一个字符的形式输入</span><br><span class=\"line\">    cout.put(A);//是以字符串的形式输出</span><br><span class=\"line\">    &#125;while(A!=&apos; &apos;);//把条件设为变量不能等于空格</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test(cin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请输入字符</span><br><span class=\"line\">abc</span><br><span class=\"line\">abc</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h1><blockquote>\n<p>文件有两种类型：</p>\n<ul>\n<li>文本文件–以ASCLL码形式存储在计算机中。</li>\n<li>二进制文件–以二进制写进计算机。<blockquote>\n<p>分为三种类型：1.写文件（ofstream）,2.读文件（ifstream）3.（fstream）。</p>\n</blockquote>\n</li>\n<li>写入文件分为5大部分：</li>\n</ul>\n<ol>\n<li>先把写文件的头文件包含进去。</li>\n<li>然后确定你要写的文件的类型</li>\n<li>之后确定文件的名字和打开的方式</li>\n<li>把内容写进去</li>\n<li>关闭文件<br><img src=\"//EvanShady.github.io/2019/05/31/file/file.png\" alt=\"打开方式\"><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;fstream&gt;//引入写文件的头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test()&#123;</span><br><span class=\"line\">    ofstream ofs;// 文件的类型 写入文件</span><br><span class=\"line\">    ofs.open(&quot;test.txt&quot;,ios::out);文件名和打开的方式(写的方式)</span><br><span class=\"line\">    ofs&lt;&lt;&quot;你好！&quot;&lt;&lt;endl;把你要写进文件的内容写进去</span><br><span class=\"line\">    ofs.close(); 关闭文件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void test1()&#123;</span><br><span class=\"line\">    ifstream ifs;//文件类型，读文件</span><br><span class=\"line\">    ifs.open(&quot;test.txt&quot;,ios::in);//打开的文件名和打开方式(读的方式)</span><br><span class=\"line\">    if(!ifs.is_open())&#123;//判断打开文件</span><br><span class=\"line\">        cout&lt;&lt;&quot;文件打开失败&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    string buf;</span><br><span class=\"line\">    while(getline(ifs,buf))&#123;//以一行的形式读入编译器并输出</span><br><span class=\"line\">        cout&lt;&lt;buf&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ifs.close();关闭文件</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    test();//调用test函数</span><br><span class=\"line\">    test1();//调用函数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"对于写的内容追加到文件中的命令是如下：\"><a href=\"#对于写的内容追加到文件中的命令是如下：\" class=\"headerlink\" title=\"对于写的内容追加到文件中的命令是如下：\"></a>对于写的内容追加到文件中的命令是如下：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;fstream&gt;</span><br><span class=\"line\">using namestape std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    ofstream ofs;//声明文件的形式</span><br><span class=\"line\">    ofs.open(&quot;test&quot;,ios::app);//打开的方式</span><br><span class=\"line\">    ofs&lt;&lt;&quot;你好&quot;&lt;&lt;endl;//写进的内容</span><br><span class=\"line\">    ofs.close();//关闭文件</span><br><span class=\"line\">    ifstream ifs;//声明文件的形式</span><br><span class=\"line\">    ifs.open(&quot;test&quot;,ios::in);//打开的方式</span><br><span class=\"line\">    if(!ifs.isopen())&#123;//判断文件的打开是否成功</span><br><span class=\"line\">        cout&lt;&lt;&quot;文件打开失败&quot;&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ifs.close();//关闭文件</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在这里运行几次之后的结果会和第一次的不一样，因为在这里是以追加的形式向文件中写入你的内容。<br><img src=\"//EvanShady.github.io/2019/05/31/file/file1.png\" alt=\"运行结果\"><h1 id=\"用输出流来控制小数点\"><a href=\"#用输出流来控制小数点\" class=\"headerlink\" title=\"用输出流来控制小数点\"></a>用输出流来控制小数点</h1></li>\n<li>这里是用输出流来控制小数点的个数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;iomanip&gt;//下面的函数会用到这个头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double a(10.1234)</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">    cout.setf(ios::fixed);//小数点后的位数,默认为6个数位</span><br><span class=\"line\">    cout.setf(ios::showpoint);//打印小数点和小数点的个数，默认为6个数位</span><br><span class=\"line\">    cout&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;setw(2)&lt;&lt;setprecision(2)&lt;&lt;a&lt;&lt;endl;//给出小数点后的几位数</span><br><span class=\"line\">    cout&lt;&lt;setw(6)&lt;&lt;a&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10.1234</span><br><span class=\"line\">10.123400</span><br><span class=\"line\">10.12</span><br><span class=\"line\"> 10.12</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"四舍五入\"><a href=\"#四舍五入\" class=\"headerlink\" title=\"四舍五入\"></a>四舍五入</h1><ul>\n<li>简单的把数字四舍五入<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;//在c++中有很多预定义的算术函数，都需要用到这个头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double numb(0);</span><br><span class=\"line\">    int test(0);</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入要四舍五入的数字：&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;numb;</span><br><span class=\"line\">    test=static_cast&lt;int &gt;(floor(numb+0.5));//把四舍五入后的数字强制转换成int类型</span><br><span class=\"line\">    cout&lt;&lt;test&lt;&lt;endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>//简单的输出算术平方跟<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cmath&gt;//c++与定义的函数调用</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    double test(9.0),test1(0);</span><br><span class=\"line\">    test1=sqrt(test);//预定义平方跟函数</span><br><span class=\"line\">    cout&lt;&lt;test1&lt;&lt;endl;</span><br><span class=\"line\">    cout.setf(ios::fixed);</span><br><span class=\"line\">    cout.setf(ios::showpoint);</span><br><span class=\"line\">    cout&lt;&lt;setw(6)&lt;&lt;setprecision(2)&lt;&lt;test1&lt;&lt;endl;</span><br><span class=\"line\">    cout&lt;&lt;pow(3,2)&lt;&lt;endl;</span><br><span class=\"line\">    //pow函数，实现的是数字的几次方，前面的参数是数字，后面的参数是几次方,但函数返回的是double类性的数，因为我们上面把输出流设置成小数点后2位，本来的结果应该是9。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">  3.00</span><br><span class=\"line\">9.00</span><br></pre></td></tr></table></figure></p>\n<p><strong>在c++中还有很多类似于写好的函数放在不一样的c++库中,这样的做法无非就是方便了我们这些短命子以后不用自己在写一遍实现的代码。比如我们经常用到的cin cout 这些都是放在一个库里面的我们需要的时候都是从iostrean库中的调用的。其实在这些里面还有很多很好玩的，比如上面用到的利用输出流来控制我们的变量输出格式，这些虽然看起来简单，但要我们代码来一一实现的话就有点小自闭了，也没什么必要这么做，因为现在都有现成的了，为什么不要？要是还想知道c++里还有哪些好玩的库，你自己以后慢慢寻找。</strong> </p>\n<h1 id=\"随机数字\"><a href=\"#随机数字\" class=\"headerlink\" title=\"随机数字\"></a>随机数字</h1><p><strong>生成的随机数字的范围是1～6</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;cstdlib&gt;//随机种子的头文件</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">void test()&#123;</span><br><span class=\"line\">    srand(time(0));</span><br><span class=\"line\">    int a,b;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入最大的数字&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;a;</span><br><span class=\"line\">    cout&lt;&lt;&quot;请输入最小的数字&quot;&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;b;</span><br><span class=\"line\">    if(b==0)&#123;</span><br><span class=\"line\">        cout&lt;&lt;(rand()%a)+1&lt;&lt;endl;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        cout&lt;&lt;(rand()%a)+b&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main ()&#123;</span><br><span class=\"line\">    srand(time(0));//声明时间种子</span><br><span class=\"line\">    cout&lt;&lt;(rand()%6)+1&lt;&lt;endl;模6(得到的是0～5)+1(是把数字都加上1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"黑盒\"><a href=\"#黑盒\" class=\"headerlink\" title=\"黑盒\"></a>黑盒</h1><ul>\n<li>也叫做函数的抽象化。</li>\n</ul>"},{"title":"i3.md","date":"2019-09-22T08:31:39.000Z","_content":"**这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。**\n---\n\n\n<!--more-->\n# 慢慢理解的过程\n* 我是从暑假开始接触i3的，当然只是很表面的理解了一点点，这也是我宿友的骚操作，因为他也是中了up主的迷，一个github上叫theniceboy的一个小伙子，刚开始只是vim的着迷到最后的配置，然而那个小伙子还是有点东西的。\n* 其实来说，我的想法就是多学点东西，我觉得每个人的想法都是一样的。\n\n## *i3*\n* 值得我们去学习，但却不用伸进去。也就是说我们可以按照自己的想法去玩，但是呢，要有点自制。\n![小骚](i3/113997.jpg)\n[小骚](~/touch/41219.jpg)\n[http://www.baidu.com](http://www.baidu.com)\n---\n**只是一张照片**\n*只是一张照片* \n---\n~~删除~~ 我们不想要的东西\n---\n![小骚](i3/41912.jpg)\n---\n\n[github](https://github.com)\n---\n- [ ] [github](https://github.com)\n### vim\n**对于lunix玩家来说，我们编辑的时候大多数人都会选择vim来编辑文件的，所以我们会把vim配置好，接下来的还是那个up主来带飞我们。**\n---\n[github](https://theniceboy.github.com)\n* 这是他的github号，里面有很多关于vim或者i3的配置文件，感觉他很强大，帮了我们很多我们没有想到的便捷。**当然我们在这里承认是小白的话问题不大。**\n---\n\n*视频方面的话，b站欢迎你们。*\n\n[bilibili](http://bilibili.com)\n\n*你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。*\n---\n\n*请大家欣赏一下我找的紫色壁纸*\n![小骚](i3/228533.jpg)\n**告辞**\n---\n","source":"_posts/i3.md","raw":"---\ntitle : i3.md\ndate : 2019-09-22 16:31:39\ntags:\n---\n**这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。**\n---\n\n\n<!--more-->\n# 慢慢理解的过程\n* 我是从暑假开始接触i3的，当然只是很表面的理解了一点点，这也是我宿友的骚操作，因为他也是中了up主的迷，一个github上叫theniceboy的一个小伙子，刚开始只是vim的着迷到最后的配置，然而那个小伙子还是有点东西的。\n* 其实来说，我的想法就是多学点东西，我觉得每个人的想法都是一样的。\n\n## *i3*\n* 值得我们去学习，但却不用伸进去。也就是说我们可以按照自己的想法去玩，但是呢，要有点自制。\n![小骚](i3/113997.jpg)\n[小骚](~/touch/41219.jpg)\n[http://www.baidu.com](http://www.baidu.com)\n---\n**只是一张照片**\n*只是一张照片* \n---\n~~删除~~ 我们不想要的东西\n---\n![小骚](i3/41912.jpg)\n---\n\n[github](https://github.com)\n---\n- [ ] [github](https://github.com)\n### vim\n**对于lunix玩家来说，我们编辑的时候大多数人都会选择vim来编辑文件的，所以我们会把vim配置好，接下来的还是那个up主来带飞我们。**\n---\n[github](https://theniceboy.github.com)\n* 这是他的github号，里面有很多关于vim或者i3的配置文件，感觉他很强大，帮了我们很多我们没有想到的便捷。**当然我们在这里承认是小白的话问题不大。**\n---\n\n*视频方面的话，b站欢迎你们。*\n\n[bilibili](http://bilibili.com)\n\n*你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。*\n---\n\n*请大家欣赏一下我找的紫色壁纸*\n![小骚](i3/228533.jpg)\n**告辞**\n---\n","slug":"i3","published":1,"updated":"2019-09-23T10:09:58.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pgx000egoz77nmikiqh","content":"<h2 id=\"这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。\"><a href=\"#这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。\" class=\"headerlink\" title=\"这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。\"></a><strong>这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。</strong></h2><a id=\"more\"></a>\n<h1 id=\"慢慢理解的过程\"><a href=\"#慢慢理解的过程\" class=\"headerlink\" title=\"慢慢理解的过程\"></a>慢慢理解的过程</h1><ul>\n<li>我是从暑假开始接触i3的，当然只是很表面的理解了一点点，这也是我宿友的骚操作，因为他也是中了up主的迷，一个github上叫theniceboy的一个小伙子，刚开始只是vim的着迷到最后的配置，然而那个小伙子还是有点东西的。</li>\n<li>其实来说，我的想法就是多学点东西，我觉得每个人的想法都是一样的。</li>\n</ul>\n<h2 id=\"i3\"><a href=\"#i3\" class=\"headerlink\" title=\"i3\"></a><em>i3</em></h2><ul>\n<li>值得我们去学习，但却不用伸进去。也就是说我们可以按照自己的想法去玩，但是呢，要有点自制。<br><img src=\"//EvanShady.github.io/2019/09/22/i3/113997.jpg\" alt=\"小骚\"><br><a href=\"~/touch/41219.jpg\">小骚</a><br><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a></li>\n</ul>\n<hr>\n<p><strong>只是一张照片</strong></p>\n<h2 id=\"只是一张照片\"><a href=\"#只是一张照片\" class=\"headerlink\" title=\"只是一张照片 \"></a><em>只是一张照片</em> </h2><h2 id=\"删除-我们不想要的东西\"><a href=\"#删除-我们不想要的东西\" class=\"headerlink\" title=\"删除 我们不想要的东西\"></a><del>删除</del> 我们不想要的东西</h2><h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"//EvanShady.github.io/2019/09/22/i3/41912.jpg\" alt=\"小骚\"></h2><h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a></h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a><h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><strong>对于lunix玩家来说，我们编辑的时候大多数人都会选择vim来编辑文件的，所以我们会把vim配置好，接下来的还是那个up主来带飞我们。</strong></li>\n</ul>\n<hr>\n<p><a href=\"https://theniceboy.github.com\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<ul>\n<li>这是他的github号，里面有很多关于vim或者i3的配置文件，感觉他很强大，帮了我们很多我们没有想到的便捷。<strong>当然我们在这里承认是小白的话问题不大。</strong></li>\n</ul>\n<hr>\n<p><em>视频方面的话，b站欢迎你们。</em></p>\n<p><a href=\"http://bilibili.com\" target=\"_blank\" rel=\"noopener\">bilibili</a></p>\n<h2 id=\"你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。\"><a href=\"#你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。\" class=\"headerlink\" title=\"你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。\"></a><em>你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。</em></h2><p><em>请大家欣赏一下我找的紫色壁纸</em><br><img src=\"//EvanShady.github.io/2019/09/22/i3/228533.jpg\" alt=\"小骚\"></p>\n<h2 id=\"告辞\"><a href=\"#告辞\" class=\"headerlink\" title=\"告辞\"></a><strong>告辞</strong></h2>","site":{"data":{}},"excerpt":"<h2 id=\"这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。\"><a href=\"#这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。\" class=\"headerlink\" title=\"这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。\"></a><strong>这是我第一次用了up主的配置文件写的第一篇博客，感觉还行，以后会坚持下来一直用的。</strong></h2>","more":"<h1 id=\"慢慢理解的过程\"><a href=\"#慢慢理解的过程\" class=\"headerlink\" title=\"慢慢理解的过程\"></a>慢慢理解的过程</h1><ul>\n<li>我是从暑假开始接触i3的，当然只是很表面的理解了一点点，这也是我宿友的骚操作，因为他也是中了up主的迷，一个github上叫theniceboy的一个小伙子，刚开始只是vim的着迷到最后的配置，然而那个小伙子还是有点东西的。</li>\n<li>其实来说，我的想法就是多学点东西，我觉得每个人的想法都是一样的。</li>\n</ul>\n<h2 id=\"i3\"><a href=\"#i3\" class=\"headerlink\" title=\"i3\"></a><em>i3</em></h2><ul>\n<li>值得我们去学习，但却不用伸进去。也就是说我们可以按照自己的想法去玩，但是呢，要有点自制。<br><img src=\"//EvanShady.github.io/2019/09/22/i3/113997.jpg\" alt=\"小骚\"><br><a href=\"~/touch/41219.jpg\">小骚</a><br><a href=\"http://www.baidu.com\" target=\"_blank\" rel=\"noopener\">http://www.baidu.com</a></li>\n</ul>\n<hr>\n<p><strong>只是一张照片</strong></p>\n<h2 id=\"只是一张照片\"><a href=\"#只是一张照片\" class=\"headerlink\" title=\"只是一张照片 \"></a><em>只是一张照片</em> </h2><h2 id=\"删除-我们不想要的东西\"><a href=\"#删除-我们不想要的东西\" class=\"headerlink\" title=\"删除 我们不想要的东西\"></a><del>删除</del> 我们不想要的东西</h2><h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"//EvanShady.github.io/2019/09/22/i3/41912.jpg\" alt=\"小骚\"></h2><h2 id=\"github\"><a href=\"#github\" class=\"headerlink\" title=\"github\"></a><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a></h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> <a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">github</a><h3 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h3><strong>对于lunix玩家来说，我们编辑的时候大多数人都会选择vim来编辑文件的，所以我们会把vim配置好，接下来的还是那个up主来带飞我们。</strong></li>\n</ul>\n<hr>\n<p><a href=\"https://theniceboy.github.com\" target=\"_blank\" rel=\"noopener\">github</a></p>\n<ul>\n<li>这是他的github号，里面有很多关于vim或者i3的配置文件，感觉他很强大，帮了我们很多我们没有想到的便捷。<strong>当然我们在这里承认是小白的话问题不大。</strong></li>\n</ul>\n<hr>\n<p><em>视频方面的话，b站欢迎你们。</em></p>\n<p><a href=\"http://bilibili.com\" target=\"_blank\" rel=\"noopener\">bilibili</a></p>\n<h2 id=\"你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。\"><a href=\"#你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。\" class=\"headerlink\" title=\"你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。\"></a><em>你只需要在b站里面搜索vim关键字就会有一个什么上古vim的标题，当然我在这里也就是提一下，看不就是你们的事情了，关于up主，我同学给的比方就是，只有别人问他问题。</em></h2><p><em>请大家欣赏一下我找的紫色壁纸</em><br><img src=\"//EvanShady.github.io/2019/09/22/i3/228533.jpg\" alt=\"小骚\"></p>\n<h2 id=\"告辞\"><a href=\"#告辞\" class=\"headerlink\" title=\"告辞\"></a><strong>告辞</strong></h2>"},{"title":"wed","date":"2019-09-10T07:12:01.000Z","_content":"                                       数据库\n<!--more-->\n# 第一节(数据库系统概述)\n1. 数据(date)\n* 是描述事物的符号记录，是指用物理符号记录下来的，可以鉴别的信息。\n---\n2. 数据库(DB)\n* 存储数据的仓库。\n> 特点\n* 永久储存，有组织，可共享。\n----\n3. 数据库管理系统(ABS)\n* 专门用于建立和管理数据库的软件，以及提供必要的安全性和完整性。\n> 功能\n1. 数据定义功能\n2. 数据操纵功能\n3. 数据库的运行管理功能\n4. 数据库的建立和维护功能\n5. 数据有组织,存储和管理功能\n6. 其他功能(通信功能，不同数据库之间数据的相互共享)\n----\n4. 数据库系统(DBS) ----  数据库管理员(DBA)\n# 第二节(数据管理技术的发展)\n* 应用程序管理数据\n*特点* \n* 数据面向应用\n----\n2. 文件管理系统\n*特点* \n* 数据可长期存放在磁盘\n* 数据的逻辑结构与物理结构有了区别\n* 文件组织呈多样化\n* 对数据的操作以记录为单位\n* 数据不再属于某个特定的程序可重复使用\n----\n3. 数据库系统阶段(E,F,code)\n*重大事件* \n* 1968年 美国IBM公司 (层次模型)\n* 1969年 美国 codesy (网状模型)\n* 1970年 美国 EFcode (关系模型)\n*特点* \n1. 数据集成\n2. 数据共享性高\n3. 数据冗余小(文件系统的缺陷)\n4. 数据一致性(文件系统的缺陷)\n5. 数据独立性高(文件系统的缺陷)\n*数据库保护* \n1. 数据的安全性\n2. 数据的完整性\n3. 并发控制\n4. 故障恢复\n# 第三节(数据库系统的结构)\n1. 三级模式的结构\n  外模式(子模式和用户模式)\n* 模式(概念模式和逻辑模式)\n* 内模式(存储模式)\n* 两层映像\n1. 外模式和概念模式(多个)\n2. 逻辑模式和内模式(唯一一个)\n----\n2. 数据库系统的运行与应用结构\n* 用户与服务器结构(C/S)\n* 浏览器与服务器结构(B/S)\n\n# 第四节(数据模型)\n## 1. 数据模型的组成要素\n1. 数据结构(静态特征)\n2. 数据操作(动态特征)\n3. 数据约束(依存关系)\n### 2. 数据模型的分类\n*概念层数据模型* \n* 概念层是数据抽象级别的最高层，其目的是按用户的观点来对世界建模。\n* 可分为：\n1. 实体：客观存在相互区别的食物。\n2. 属性：实体所具有的某种特性。\n3. 码或键：唯一标识实体的属性集。\n4. 域：属性的取值范围。\n5. 实体性：具有相同属性的实体必然具有共同的特征和性质。\n6. 实体集：同型实体的集合。\n7. 联系：事物内部和事物之间是有联系的。\n* 概念模型的表示方法（1：1 ; 1：n ; n:n）\n*逻辑层数据模型* \n1. 层次模型(使用最早)\n2. 网状模型(复杂)\n3. 关系模型(二维表结构，使用最广)\n4. 面向对象模型\n*物理层数据模型* \n* 定义：描述数据在介质上存储，是逻辑模型的物理实现。\n1. 概念模型到逻辑模型的转换是由数据库设计人员完成的。\n2. 逻辑到物理是由数据库管理系统完成的。\n----\n# 第二章 关系数据库\n**第一节关系数据库概述**\n----\n* 特征：是使用关系数据模型来组织数据。(主流数据模型)\n\n**第二节关系数据模型**\n----\n1. 关系数据结构\n* 表：被称为关系，是一个二维表(由表名，构成表的各个列和数据组成)。\n* 关系：可分为三种关系，(基本关系，查询表，视图表)。\n* 列：被称为字段或属性。\n* 属性：和列是同一个意思。\n* 行： 被称为元组或记录。\n* 元组：\n* 分量：元组中的每一个属性值。\n* 码或键()\n---\n\n**关系操作集合**\n1. 查询操作可以分为：选择，投影，连接，除，并，差，交，笛卡尔积，其中选择，投影，并，差，笛卡尔积是五种基础的，(增，删，改，查，插)。\n2. 关系数据语言的分类\n* **结构化查询语言**(SQL)\n* **数据定义语言**(DDL)\n* **数据操纵语言**(DML)\n* **数据控制语言(DCL)**\n3. **关系的完整性约束**\n* *数据库的数据完整性是指：数据库中的数据的正确性，相容性，一致性。*\n\n1.*关系模型中有三类完整性约束：实体完整性约束，参照完整性约束，用户定义完整性约束，其中(实体完整性约束和参照完整性约束是关系的两个不变性)。*\n* **实体关系完整性约束是指：关系的主属性，即主码的组成不能为空。**\n* **参照完整性约束是指：定义在主码和外码之间的引用规则。**\n* **用户定义完整性约束：是针对某一应用环境的完整性约束条件。**\n---\n\n**关系数据库的规范化理论**\n\n*关系模式中可能存在的冗余和异常的问题*\n* 数据冗余\n* 更新异常\n* 插入异常\n* 删除异常\n\n**数据依赖(函数依赖与关键字)**\n---\n- [ ] 函数依赖与关键字\n* 函数依赖分为：完全函数依赖，部分函数依赖，传递函数依赖。\n- [ ] 范式与关系规范化过程\n\n**规范化：一个低一级范式的关系模式通过模式分解可以转换为多个高一级范式的关系模式的集合** \n\n**规范化的优点：** \n\n1. 大大减少了数据冗余\n2. 改进了数据库整体组织\n3. 增强了数据的一致性\n4. 增加了数据库的设计性\n* 第一范式(列的字段名不可再分)\n* 第二范式(必须满足于一范式，表中非主键列必须完全依赖与任意一个主键位)问题：插入，删除，更新异常，数据冗余。\n* 第三范式(必须满足于第二范式，每个非主键位列与主键不存在传递依赖而是完全依赖)\n* BCNF(必须满足三范式，消去了主属性对键的传递函数依赖)\n---\n\n**数据库操作是在终端下运行的。** \n* 首先是要下载mysql来进行我们的操作\n* 然后就是一些mysql的基本操作了\n---\n\n// 进入到mysql\nmysql -u root -p\n\n// 接下来只需要输入你的密码就行了\npassword:\n\n// 接下来我们就可以直接使用命令来做我们想做的一些基本操作了\n// 显示数据库\nshow databases;\n\n![数据库显示](mysql/mysql0.png) \n\n// 创建你自己的数据库\n\ncreate database xiaogu(数据库名);\n\n// 显示一下数据库\n\nshow databases;\n\n![创建数据库的显示](mysql/mysql1.png) \n\n// 删除自己创建的数据库\n\ndrop database xiaogu;(数据库名)\n\nshow databases;\n\n![删除自己创建的数据库](mysql/mysql2.png) \n\nuse xiaogu(更换数据库)\n\n![更换数据库](mysql/mysql3.png) \n\n// 接下来是对表进行操作了\n\ncreate table xsb(id int(11)not null,name varchar(3),qq int(11));\n\ndesc xsb;\n\ninsert into xsb values(214242,'小灰',24441444);\n\nselect * from xsb;\n\n![表的操作](mysql/mysql4.png) \n\n//更改表名\n\nrename table xsb to 学生表;\n\n![更改表名](mysql/mysql5.png) \n\n// 在表里添加参数\n\nalter table xsb add phone int(11);\n\n// 在表里修改参数\n\nalter table xsb change id _id int(11);\n\n// 在表里删除参数\n\nalter table xsb drop id;\n\nqeqee|eqeqeq|\n|------|------|\n|<++>|<++>|\n","source":"_posts/mysql.md","raw":"---\ntitle: wed\ndate: 2019-09-10 15:12:01\ntags:\n---\n                                       数据库\n<!--more-->\n# 第一节(数据库系统概述)\n1. 数据(date)\n* 是描述事物的符号记录，是指用物理符号记录下来的，可以鉴别的信息。\n---\n2. 数据库(DB)\n* 存储数据的仓库。\n> 特点\n* 永久储存，有组织，可共享。\n----\n3. 数据库管理系统(ABS)\n* 专门用于建立和管理数据库的软件，以及提供必要的安全性和完整性。\n> 功能\n1. 数据定义功能\n2. 数据操纵功能\n3. 数据库的运行管理功能\n4. 数据库的建立和维护功能\n5. 数据有组织,存储和管理功能\n6. 其他功能(通信功能，不同数据库之间数据的相互共享)\n----\n4. 数据库系统(DBS) ----  数据库管理员(DBA)\n# 第二节(数据管理技术的发展)\n* 应用程序管理数据\n*特点* \n* 数据面向应用\n----\n2. 文件管理系统\n*特点* \n* 数据可长期存放在磁盘\n* 数据的逻辑结构与物理结构有了区别\n* 文件组织呈多样化\n* 对数据的操作以记录为单位\n* 数据不再属于某个特定的程序可重复使用\n----\n3. 数据库系统阶段(E,F,code)\n*重大事件* \n* 1968年 美国IBM公司 (层次模型)\n* 1969年 美国 codesy (网状模型)\n* 1970年 美国 EFcode (关系模型)\n*特点* \n1. 数据集成\n2. 数据共享性高\n3. 数据冗余小(文件系统的缺陷)\n4. 数据一致性(文件系统的缺陷)\n5. 数据独立性高(文件系统的缺陷)\n*数据库保护* \n1. 数据的安全性\n2. 数据的完整性\n3. 并发控制\n4. 故障恢复\n# 第三节(数据库系统的结构)\n1. 三级模式的结构\n  外模式(子模式和用户模式)\n* 模式(概念模式和逻辑模式)\n* 内模式(存储模式)\n* 两层映像\n1. 外模式和概念模式(多个)\n2. 逻辑模式和内模式(唯一一个)\n----\n2. 数据库系统的运行与应用结构\n* 用户与服务器结构(C/S)\n* 浏览器与服务器结构(B/S)\n\n# 第四节(数据模型)\n## 1. 数据模型的组成要素\n1. 数据结构(静态特征)\n2. 数据操作(动态特征)\n3. 数据约束(依存关系)\n### 2. 数据模型的分类\n*概念层数据模型* \n* 概念层是数据抽象级别的最高层，其目的是按用户的观点来对世界建模。\n* 可分为：\n1. 实体：客观存在相互区别的食物。\n2. 属性：实体所具有的某种特性。\n3. 码或键：唯一标识实体的属性集。\n4. 域：属性的取值范围。\n5. 实体性：具有相同属性的实体必然具有共同的特征和性质。\n6. 实体集：同型实体的集合。\n7. 联系：事物内部和事物之间是有联系的。\n* 概念模型的表示方法（1：1 ; 1：n ; n:n）\n*逻辑层数据模型* \n1. 层次模型(使用最早)\n2. 网状模型(复杂)\n3. 关系模型(二维表结构，使用最广)\n4. 面向对象模型\n*物理层数据模型* \n* 定义：描述数据在介质上存储，是逻辑模型的物理实现。\n1. 概念模型到逻辑模型的转换是由数据库设计人员完成的。\n2. 逻辑到物理是由数据库管理系统完成的。\n----\n# 第二章 关系数据库\n**第一节关系数据库概述**\n----\n* 特征：是使用关系数据模型来组织数据。(主流数据模型)\n\n**第二节关系数据模型**\n----\n1. 关系数据结构\n* 表：被称为关系，是一个二维表(由表名，构成表的各个列和数据组成)。\n* 关系：可分为三种关系，(基本关系，查询表，视图表)。\n* 列：被称为字段或属性。\n* 属性：和列是同一个意思。\n* 行： 被称为元组或记录。\n* 元组：\n* 分量：元组中的每一个属性值。\n* 码或键()\n---\n\n**关系操作集合**\n1. 查询操作可以分为：选择，投影，连接，除，并，差，交，笛卡尔积，其中选择，投影，并，差，笛卡尔积是五种基础的，(增，删，改，查，插)。\n2. 关系数据语言的分类\n* **结构化查询语言**(SQL)\n* **数据定义语言**(DDL)\n* **数据操纵语言**(DML)\n* **数据控制语言(DCL)**\n3. **关系的完整性约束**\n* *数据库的数据完整性是指：数据库中的数据的正确性，相容性，一致性。*\n\n1.*关系模型中有三类完整性约束：实体完整性约束，参照完整性约束，用户定义完整性约束，其中(实体完整性约束和参照完整性约束是关系的两个不变性)。*\n* **实体关系完整性约束是指：关系的主属性，即主码的组成不能为空。**\n* **参照完整性约束是指：定义在主码和外码之间的引用规则。**\n* **用户定义完整性约束：是针对某一应用环境的完整性约束条件。**\n---\n\n**关系数据库的规范化理论**\n\n*关系模式中可能存在的冗余和异常的问题*\n* 数据冗余\n* 更新异常\n* 插入异常\n* 删除异常\n\n**数据依赖(函数依赖与关键字)**\n---\n- [ ] 函数依赖与关键字\n* 函数依赖分为：完全函数依赖，部分函数依赖，传递函数依赖。\n- [ ] 范式与关系规范化过程\n\n**规范化：一个低一级范式的关系模式通过模式分解可以转换为多个高一级范式的关系模式的集合** \n\n**规范化的优点：** \n\n1. 大大减少了数据冗余\n2. 改进了数据库整体组织\n3. 增强了数据的一致性\n4. 增加了数据库的设计性\n* 第一范式(列的字段名不可再分)\n* 第二范式(必须满足于一范式，表中非主键列必须完全依赖与任意一个主键位)问题：插入，删除，更新异常，数据冗余。\n* 第三范式(必须满足于第二范式，每个非主键位列与主键不存在传递依赖而是完全依赖)\n* BCNF(必须满足三范式，消去了主属性对键的传递函数依赖)\n---\n\n**数据库操作是在终端下运行的。** \n* 首先是要下载mysql来进行我们的操作\n* 然后就是一些mysql的基本操作了\n---\n\n// 进入到mysql\nmysql -u root -p\n\n// 接下来只需要输入你的密码就行了\npassword:\n\n// 接下来我们就可以直接使用命令来做我们想做的一些基本操作了\n// 显示数据库\nshow databases;\n\n![数据库显示](mysql/mysql0.png) \n\n// 创建你自己的数据库\n\ncreate database xiaogu(数据库名);\n\n// 显示一下数据库\n\nshow databases;\n\n![创建数据库的显示](mysql/mysql1.png) \n\n// 删除自己创建的数据库\n\ndrop database xiaogu;(数据库名)\n\nshow databases;\n\n![删除自己创建的数据库](mysql/mysql2.png) \n\nuse xiaogu(更换数据库)\n\n![更换数据库](mysql/mysql3.png) \n\n// 接下来是对表进行操作了\n\ncreate table xsb(id int(11)not null,name varchar(3),qq int(11));\n\ndesc xsb;\n\ninsert into xsb values(214242,'小灰',24441444);\n\nselect * from xsb;\n\n![表的操作](mysql/mysql4.png) \n\n//更改表名\n\nrename table xsb to 学生表;\n\n![更改表名](mysql/mysql5.png) \n\n// 在表里添加参数\n\nalter table xsb add phone int(11);\n\n// 在表里修改参数\n\nalter table xsb change id _id int(11);\n\n// 在表里删除参数\n\nalter table xsb drop id;\n\nqeqee|eqeqeq|\n|------|------|\n|<++>|<++>|\n","slug":"mysql","published":1,"updated":"2019-11-05T07:03:16.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9ph0000fgoz7fubbbsfu","content":"<pre><code>数据库\n</code></pre><a id=\"more\"></a>\n<h1 id=\"第一节-数据库系统概述\"><a href=\"#第一节-数据库系统概述\" class=\"headerlink\" title=\"第一节(数据库系统概述)\"></a>第一节(数据库系统概述)</h1><ol>\n<li>数据(date)</li>\n</ol>\n<ul>\n<li>是描述事物的符号记录，是指用物理符号记录下来的，可以鉴别的信息。</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>数据库(DB)</li>\n</ol>\n<ul>\n<li>存储数据的仓库。<blockquote>\n<p>特点</p>\n</blockquote>\n</li>\n<li>永久储存，有组织，可共享。</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li>数据库管理系统(ABS)</li>\n</ol>\n<ul>\n<li>专门用于建立和管理数据库的软件，以及提供必要的安全性和完整性。<blockquote>\n<p>功能</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>数据定义功能</li>\n<li>数据操纵功能</li>\n<li>数据库的运行管理功能</li>\n<li>数据库的建立和维护功能</li>\n<li>数据有组织,存储和管理功能</li>\n<li>其他功能(通信功能，不同数据库之间数据的相互共享)</li>\n</ol>\n<hr>\n<ol start=\"4\">\n<li>数据库系统(DBS) —-  数据库管理员(DBA)<h1 id=\"第二节-数据管理技术的发展\"><a href=\"#第二节-数据管理技术的发展\" class=\"headerlink\" title=\"第二节(数据管理技术的发展)\"></a>第二节(数据管理技术的发展)</h1></li>\n</ol>\n<ul>\n<li>应用程序管理数据<br><em>特点</em> </li>\n<li>数据面向应用</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>文件管理系统<br><em>特点</em> </li>\n</ol>\n<ul>\n<li>数据可长期存放在磁盘</li>\n<li>数据的逻辑结构与物理结构有了区别</li>\n<li>文件组织呈多样化</li>\n<li>对数据的操作以记录为单位</li>\n<li>数据不再属于某个特定的程序可重复使用</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li>数据库系统阶段(E,F,code)<br><em>重大事件</em> </li>\n</ol>\n<ul>\n<li>1968年 美国IBM公司 (层次模型)</li>\n<li>1969年 美国 codesy (网状模型)</li>\n<li>1970年 美国 EFcode (关系模型)<br><em>特点</em> </li>\n</ul>\n<ol>\n<li>数据集成</li>\n<li>数据共享性高</li>\n<li>数据冗余小(文件系统的缺陷)</li>\n<li>数据一致性(文件系统的缺陷)</li>\n<li>数据独立性高(文件系统的缺陷)<br><em>数据库保护</em> </li>\n<li>数据的安全性</li>\n<li>数据的完整性</li>\n<li>并发控制</li>\n<li>故障恢复<h1 id=\"第三节-数据库系统的结构\"><a href=\"#第三节-数据库系统的结构\" class=\"headerlink\" title=\"第三节(数据库系统的结构)\"></a>第三节(数据库系统的结构)</h1></li>\n<li>三级模式的结构<br>外模式(子模式和用户模式)</li>\n</ol>\n<ul>\n<li>模式(概念模式和逻辑模式)</li>\n<li>内模式(存储模式)</li>\n<li>两层映像</li>\n</ul>\n<ol>\n<li>外模式和概念模式(多个)</li>\n<li>逻辑模式和内模式(唯一一个)</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li>数据库系统的运行与应用结构</li>\n</ol>\n<ul>\n<li>用户与服务器结构(C/S)</li>\n<li>浏览器与服务器结构(B/S)</li>\n</ul>\n<h1 id=\"第四节-数据模型\"><a href=\"#第四节-数据模型\" class=\"headerlink\" title=\"第四节(数据模型)\"></a>第四节(数据模型)</h1><h2 id=\"1-数据模型的组成要素\"><a href=\"#1-数据模型的组成要素\" class=\"headerlink\" title=\"1. 数据模型的组成要素\"></a>1. 数据模型的组成要素</h2><ol>\n<li>数据结构(静态特征)</li>\n<li>数据操作(动态特征)</li>\n<li>数据约束(依存关系)<h3 id=\"2-数据模型的分类\"><a href=\"#2-数据模型的分类\" class=\"headerlink\" title=\"2. 数据模型的分类\"></a>2. 数据模型的分类</h3><em>概念层数据模型</em> </li>\n</ol>\n<ul>\n<li>概念层是数据抽象级别的最高层，其目的是按用户的观点来对世界建模。</li>\n<li>可分为：</li>\n</ul>\n<ol>\n<li>实体：客观存在相互区别的食物。</li>\n<li>属性：实体所具有的某种特性。</li>\n<li>码或键：唯一标识实体的属性集。</li>\n<li>域：属性的取值范围。</li>\n<li>实体性：具有相同属性的实体必然具有共同的特征和性质。</li>\n<li>实体集：同型实体的集合。</li>\n<li>联系：事物内部和事物之间是有联系的。</li>\n</ol>\n<ul>\n<li>概念模型的表示方法（1：1 ; 1：n ; n:n）<br><em>逻辑层数据模型</em> </li>\n</ul>\n<ol>\n<li>层次模型(使用最早)</li>\n<li>网状模型(复杂)</li>\n<li>关系模型(二维表结构，使用最广)</li>\n<li>面向对象模型<br><em>物理层数据模型</em> </li>\n</ol>\n<ul>\n<li>定义：描述数据在介质上存储，是逻辑模型的物理实现。</li>\n</ul>\n<ol>\n<li>概念模型到逻辑模型的转换是由数据库设计人员完成的。</li>\n<li>逻辑到物理是由数据库管理系统完成的。</li>\n</ol>\n<hr>\n<h1 id=\"第二章-关系数据库\"><a href=\"#第二章-关系数据库\" class=\"headerlink\" title=\"第二章 关系数据库\"></a>第二章 关系数据库</h1><h2 id=\"第一节关系数据库概述\"><a href=\"#第一节关系数据库概述\" class=\"headerlink\" title=\"第一节关系数据库概述\"></a><strong>第一节关系数据库概述</strong></h2><ul>\n<li>特征：是使用关系数据模型来组织数据。(主流数据模型)</li>\n</ul>\n<h2 id=\"第二节关系数据模型\"><a href=\"#第二节关系数据模型\" class=\"headerlink\" title=\"第二节关系数据模型\"></a><strong>第二节关系数据模型</strong></h2><ol>\n<li>关系数据结构</li>\n</ol>\n<ul>\n<li>表：被称为关系，是一个二维表(由表名，构成表的各个列和数据组成)。</li>\n<li>关系：可分为三种关系，(基本关系，查询表，视图表)。</li>\n<li>列：被称为字段或属性。</li>\n<li>属性：和列是同一个意思。</li>\n<li>行： 被称为元组或记录。</li>\n<li>元组：</li>\n<li>分量：元组中的每一个属性值。</li>\n<li>码或键()</li>\n</ul>\n<hr>\n<p><strong>关系操作集合</strong></p>\n<ol>\n<li>查询操作可以分为：选择，投影，连接，除，并，差，交，笛卡尔积，其中选择，投影，并，差，笛卡尔积是五种基础的，(增，删，改，查，插)。</li>\n<li>关系数据语言的分类</li>\n</ol>\n<ul>\n<li><strong>结构化查询语言</strong>(SQL)</li>\n<li><strong>数据定义语言</strong>(DDL)</li>\n<li><strong>数据操纵语言</strong>(DML)</li>\n<li><strong>数据控制语言(DCL)</strong></li>\n</ul>\n<ol start=\"3\">\n<li><strong>关系的完整性约束</strong></li>\n</ol>\n<ul>\n<li><em>数据库的数据完整性是指：数据库中的数据的正确性，相容性，一致性。</em></li>\n</ul>\n<p>1.<em>关系模型中有三类完整性约束：实体完整性约束，参照完整性约束，用户定义完整性约束，其中(实体完整性约束和参照完整性约束是关系的两个不变性)。</em></p>\n<ul>\n<li><strong>实体关系完整性约束是指：关系的主属性，即主码的组成不能为空。</strong></li>\n<li><strong>参照完整性约束是指：定义在主码和外码之间的引用规则。</strong></li>\n<li><strong>用户定义完整性约束：是针对某一应用环境的完整性约束条件。</strong></li>\n</ul>\n<hr>\n<p><strong>关系数据库的规范化理论</strong></p>\n<p><em>关系模式中可能存在的冗余和异常的问题</em></p>\n<ul>\n<li>数据冗余</li>\n<li>更新异常</li>\n<li>插入异常</li>\n<li>删除异常</li>\n</ul>\n<h2 id=\"数据依赖-函数依赖与关键字\"><a href=\"#数据依赖-函数依赖与关键字\" class=\"headerlink\" title=\"数据依赖(函数依赖与关键字)\"></a><strong>数据依赖(函数依赖与关键字)</strong></h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 函数依赖与关键字</li>\n</ul>\n<ul>\n<li>函数依赖分为：完全函数依赖，部分函数依赖，传递函数依赖。</li>\n</ul>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 范式与关系规范化过程</li>\n</ul>\n<p><strong>规范化：一个低一级范式的关系模式通过模式分解可以转换为多个高一级范式的关系模式的集合</strong> </p>\n<p><strong>规范化的优点：</strong> </p>\n<ol>\n<li>大大减少了数据冗余</li>\n<li>改进了数据库整体组织</li>\n<li>增强了数据的一致性</li>\n<li>增加了数据库的设计性</li>\n</ol>\n<ul>\n<li>第一范式(列的字段名不可再分)</li>\n<li>第二范式(必须满足于一范式，表中非主键列必须完全依赖与任意一个主键位)问题：插入，删除，更新异常，数据冗余。</li>\n<li>第三范式(必须满足于第二范式，每个非主键位列与主键不存在传递依赖而是完全依赖)</li>\n<li>BCNF(必须满足三范式，消去了主属性对键的传递函数依赖)</li>\n</ul>\n<hr>\n<p><strong>数据库操作是在终端下运行的。</strong> </p>\n<ul>\n<li>首先是要下载mysql来进行我们的操作</li>\n<li>然后就是一些mysql的基本操作了</li>\n</ul>\n<hr>\n<p>// 进入到mysql<br>mysql -u root -p</p>\n<p>// 接下来只需要输入你的密码就行了<br>password:</p>\n<p>// 接下来我们就可以直接使用命令来做我们想做的一些基本操作了<br>// 显示数据库<br>show databases;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql0.png\" alt=\"数据库显示\"> </p>\n<p>// 创建你自己的数据库</p>\n<p>create database xiaogu(数据库名);</p>\n<p>// 显示一下数据库</p>\n<p>show databases;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql1.png\" alt=\"创建数据库的显示\"> </p>\n<p>// 删除自己创建的数据库</p>\n<p>drop database xiaogu;(数据库名)</p>\n<p>show databases;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql2.png\" alt=\"删除自己创建的数据库\"> </p>\n<p>use xiaogu(更换数据库)</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql3.png\" alt=\"更换数据库\"> </p>\n<p>// 接下来是对表进行操作了</p>\n<p>create table xsb(id int(11)not null,name varchar(3),qq int(11));</p>\n<p>desc xsb;</p>\n<p>insert into xsb values(214242,’小灰’,24441444);</p>\n<p>select * from xsb;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql4.png\" alt=\"表的操作\"> </p>\n<p>//更改表名</p>\n<p>rename table xsb to 学生表;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql5.png\" alt=\"更改表名\"> </p>\n<p>// 在表里添加参数</p>\n<p>alter table xsb add phone int(11);</p>\n<p>// 在表里修改参数</p>\n<p>alter table xsb change id _id int(11);</p>\n<p>// 在表里删除参数</p>\n<p>alter table xsb drop id;</p>\n<p>qeqee|eqeqeq|<br>|——|——|<br>|&lt;++&gt;|&lt;++&gt;|</p>\n","site":{"data":{}},"excerpt":"<pre><code>数据库\n</code></pre>","more":"<h1 id=\"第一节-数据库系统概述\"><a href=\"#第一节-数据库系统概述\" class=\"headerlink\" title=\"第一节(数据库系统概述)\"></a>第一节(数据库系统概述)</h1><ol>\n<li>数据(date)</li>\n</ol>\n<ul>\n<li>是描述事物的符号记录，是指用物理符号记录下来的，可以鉴别的信息。</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>数据库(DB)</li>\n</ol>\n<ul>\n<li>存储数据的仓库。<blockquote>\n<p>特点</p>\n</blockquote>\n</li>\n<li>永久储存，有组织，可共享。</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li>数据库管理系统(ABS)</li>\n</ol>\n<ul>\n<li>专门用于建立和管理数据库的软件，以及提供必要的安全性和完整性。<blockquote>\n<p>功能</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>数据定义功能</li>\n<li>数据操纵功能</li>\n<li>数据库的运行管理功能</li>\n<li>数据库的建立和维护功能</li>\n<li>数据有组织,存储和管理功能</li>\n<li>其他功能(通信功能，不同数据库之间数据的相互共享)</li>\n</ol>\n<hr>\n<ol start=\"4\">\n<li>数据库系统(DBS) —-  数据库管理员(DBA)<h1 id=\"第二节-数据管理技术的发展\"><a href=\"#第二节-数据管理技术的发展\" class=\"headerlink\" title=\"第二节(数据管理技术的发展)\"></a>第二节(数据管理技术的发展)</h1></li>\n</ol>\n<ul>\n<li>应用程序管理数据<br><em>特点</em> </li>\n<li>数据面向应用</li>\n</ul>\n<hr>\n<ol start=\"2\">\n<li>文件管理系统<br><em>特点</em> </li>\n</ol>\n<ul>\n<li>数据可长期存放在磁盘</li>\n<li>数据的逻辑结构与物理结构有了区别</li>\n<li>文件组织呈多样化</li>\n<li>对数据的操作以记录为单位</li>\n<li>数据不再属于某个特定的程序可重复使用</li>\n</ul>\n<hr>\n<ol start=\"3\">\n<li>数据库系统阶段(E,F,code)<br><em>重大事件</em> </li>\n</ol>\n<ul>\n<li>1968年 美国IBM公司 (层次模型)</li>\n<li>1969年 美国 codesy (网状模型)</li>\n<li>1970年 美国 EFcode (关系模型)<br><em>特点</em> </li>\n</ul>\n<ol>\n<li>数据集成</li>\n<li>数据共享性高</li>\n<li>数据冗余小(文件系统的缺陷)</li>\n<li>数据一致性(文件系统的缺陷)</li>\n<li>数据独立性高(文件系统的缺陷)<br><em>数据库保护</em> </li>\n<li>数据的安全性</li>\n<li>数据的完整性</li>\n<li>并发控制</li>\n<li>故障恢复<h1 id=\"第三节-数据库系统的结构\"><a href=\"#第三节-数据库系统的结构\" class=\"headerlink\" title=\"第三节(数据库系统的结构)\"></a>第三节(数据库系统的结构)</h1></li>\n<li>三级模式的结构<br>外模式(子模式和用户模式)</li>\n</ol>\n<ul>\n<li>模式(概念模式和逻辑模式)</li>\n<li>内模式(存储模式)</li>\n<li>两层映像</li>\n</ul>\n<ol>\n<li>外模式和概念模式(多个)</li>\n<li>逻辑模式和内模式(唯一一个)</li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li>数据库系统的运行与应用结构</li>\n</ol>\n<ul>\n<li>用户与服务器结构(C/S)</li>\n<li>浏览器与服务器结构(B/S)</li>\n</ul>\n<h1 id=\"第四节-数据模型\"><a href=\"#第四节-数据模型\" class=\"headerlink\" title=\"第四节(数据模型)\"></a>第四节(数据模型)</h1><h2 id=\"1-数据模型的组成要素\"><a href=\"#1-数据模型的组成要素\" class=\"headerlink\" title=\"1. 数据模型的组成要素\"></a>1. 数据模型的组成要素</h2><ol>\n<li>数据结构(静态特征)</li>\n<li>数据操作(动态特征)</li>\n<li>数据约束(依存关系)<h3 id=\"2-数据模型的分类\"><a href=\"#2-数据模型的分类\" class=\"headerlink\" title=\"2. 数据模型的分类\"></a>2. 数据模型的分类</h3><em>概念层数据模型</em> </li>\n</ol>\n<ul>\n<li>概念层是数据抽象级别的最高层，其目的是按用户的观点来对世界建模。</li>\n<li>可分为：</li>\n</ul>\n<ol>\n<li>实体：客观存在相互区别的食物。</li>\n<li>属性：实体所具有的某种特性。</li>\n<li>码或键：唯一标识实体的属性集。</li>\n<li>域：属性的取值范围。</li>\n<li>实体性：具有相同属性的实体必然具有共同的特征和性质。</li>\n<li>实体集：同型实体的集合。</li>\n<li>联系：事物内部和事物之间是有联系的。</li>\n</ol>\n<ul>\n<li>概念模型的表示方法（1：1 ; 1：n ; n:n）<br><em>逻辑层数据模型</em> </li>\n</ul>\n<ol>\n<li>层次模型(使用最早)</li>\n<li>网状模型(复杂)</li>\n<li>关系模型(二维表结构，使用最广)</li>\n<li>面向对象模型<br><em>物理层数据模型</em> </li>\n</ol>\n<ul>\n<li>定义：描述数据在介质上存储，是逻辑模型的物理实现。</li>\n</ul>\n<ol>\n<li>概念模型到逻辑模型的转换是由数据库设计人员完成的。</li>\n<li>逻辑到物理是由数据库管理系统完成的。</li>\n</ol>\n<hr>\n<h1 id=\"第二章-关系数据库\"><a href=\"#第二章-关系数据库\" class=\"headerlink\" title=\"第二章 关系数据库\"></a>第二章 关系数据库</h1><h2 id=\"第一节关系数据库概述\"><a href=\"#第一节关系数据库概述\" class=\"headerlink\" title=\"第一节关系数据库概述\"></a><strong>第一节关系数据库概述</strong></h2><ul>\n<li>特征：是使用关系数据模型来组织数据。(主流数据模型)</li>\n</ul>\n<h2 id=\"第二节关系数据模型\"><a href=\"#第二节关系数据模型\" class=\"headerlink\" title=\"第二节关系数据模型\"></a><strong>第二节关系数据模型</strong></h2><ol>\n<li>关系数据结构</li>\n</ol>\n<ul>\n<li>表：被称为关系，是一个二维表(由表名，构成表的各个列和数据组成)。</li>\n<li>关系：可分为三种关系，(基本关系，查询表，视图表)。</li>\n<li>列：被称为字段或属性。</li>\n<li>属性：和列是同一个意思。</li>\n<li>行： 被称为元组或记录。</li>\n<li>元组：</li>\n<li>分量：元组中的每一个属性值。</li>\n<li>码或键()</li>\n</ul>\n<hr>\n<p><strong>关系操作集合</strong></p>\n<ol>\n<li>查询操作可以分为：选择，投影，连接，除，并，差，交，笛卡尔积，其中选择，投影，并，差，笛卡尔积是五种基础的，(增，删，改，查，插)。</li>\n<li>关系数据语言的分类</li>\n</ol>\n<ul>\n<li><strong>结构化查询语言</strong>(SQL)</li>\n<li><strong>数据定义语言</strong>(DDL)</li>\n<li><strong>数据操纵语言</strong>(DML)</li>\n<li><strong>数据控制语言(DCL)</strong></li>\n</ul>\n<ol start=\"3\">\n<li><strong>关系的完整性约束</strong></li>\n</ol>\n<ul>\n<li><em>数据库的数据完整性是指：数据库中的数据的正确性，相容性，一致性。</em></li>\n</ul>\n<p>1.<em>关系模型中有三类完整性约束：实体完整性约束，参照完整性约束，用户定义完整性约束，其中(实体完整性约束和参照完整性约束是关系的两个不变性)。</em></p>\n<ul>\n<li><strong>实体关系完整性约束是指：关系的主属性，即主码的组成不能为空。</strong></li>\n<li><strong>参照完整性约束是指：定义在主码和外码之间的引用规则。</strong></li>\n<li><strong>用户定义完整性约束：是针对某一应用环境的完整性约束条件。</strong></li>\n</ul>\n<hr>\n<p><strong>关系数据库的规范化理论</strong></p>\n<p><em>关系模式中可能存在的冗余和异常的问题</em></p>\n<ul>\n<li>数据冗余</li>\n<li>更新异常</li>\n<li>插入异常</li>\n<li>删除异常</li>\n</ul>\n<h2 id=\"数据依赖-函数依赖与关键字\"><a href=\"#数据依赖-函数依赖与关键字\" class=\"headerlink\" title=\"数据依赖(函数依赖与关键字)\"></a><strong>数据依赖(函数依赖与关键字)</strong></h2><ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 函数依赖与关键字</li>\n</ul>\n<ul>\n<li>函数依赖分为：完全函数依赖，部分函数依赖，传递函数依赖。</li>\n</ul>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 范式与关系规范化过程</li>\n</ul>\n<p><strong>规范化：一个低一级范式的关系模式通过模式分解可以转换为多个高一级范式的关系模式的集合</strong> </p>\n<p><strong>规范化的优点：</strong> </p>\n<ol>\n<li>大大减少了数据冗余</li>\n<li>改进了数据库整体组织</li>\n<li>增强了数据的一致性</li>\n<li>增加了数据库的设计性</li>\n</ol>\n<ul>\n<li>第一范式(列的字段名不可再分)</li>\n<li>第二范式(必须满足于一范式，表中非主键列必须完全依赖与任意一个主键位)问题：插入，删除，更新异常，数据冗余。</li>\n<li>第三范式(必须满足于第二范式，每个非主键位列与主键不存在传递依赖而是完全依赖)</li>\n<li>BCNF(必须满足三范式，消去了主属性对键的传递函数依赖)</li>\n</ul>\n<hr>\n<p><strong>数据库操作是在终端下运行的。</strong> </p>\n<ul>\n<li>首先是要下载mysql来进行我们的操作</li>\n<li>然后就是一些mysql的基本操作了</li>\n</ul>\n<hr>\n<p>// 进入到mysql<br>mysql -u root -p</p>\n<p>// 接下来只需要输入你的密码就行了<br>password:</p>\n<p>// 接下来我们就可以直接使用命令来做我们想做的一些基本操作了<br>// 显示数据库<br>show databases;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql0.png\" alt=\"数据库显示\"> </p>\n<p>// 创建你自己的数据库</p>\n<p>create database xiaogu(数据库名);</p>\n<p>// 显示一下数据库</p>\n<p>show databases;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql1.png\" alt=\"创建数据库的显示\"> </p>\n<p>// 删除自己创建的数据库</p>\n<p>drop database xiaogu;(数据库名)</p>\n<p>show databases;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql2.png\" alt=\"删除自己创建的数据库\"> </p>\n<p>use xiaogu(更换数据库)</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql3.png\" alt=\"更换数据库\"> </p>\n<p>// 接下来是对表进行操作了</p>\n<p>create table xsb(id int(11)not null,name varchar(3),qq int(11));</p>\n<p>desc xsb;</p>\n<p>insert into xsb values(214242,’小灰’,24441444);</p>\n<p>select * from xsb;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql4.png\" alt=\"表的操作\"> </p>\n<p>//更改表名</p>\n<p>rename table xsb to 学生表;</p>\n<p><img src=\"//EvanShady.github.io/2019/09/10/mysql/mysql5.png\" alt=\"更改表名\"> </p>\n<p>// 在表里添加参数</p>\n<p>alter table xsb add phone int(11);</p>\n<p>// 在表里修改参数</p>\n<p>alter table xsb change id _id int(11);</p>\n<p>// 在表里删除参数</p>\n<p>alter table xsb drop id;</p>\n<p>qeqee|eqeqeq|<br>|——|——|<br>|&lt;++&gt;|&lt;++&gt;|</p>"},{"title":"java","date":"2019-09-19T02:37:00.000Z","ags":null,"_content":"\nWrite Once,Run Everywhere\n <!--more-->\n **达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。** \n ---\n\n *一步一个脚印的连好java的基本功。对于我来说是最好不过的，掌握java的基本语法。(类与对象，构造方法，引用传递，内部类，异常，包，java常用类库，javaIO，java类集)* \n\n1. 走技术之路(在学习java的同时，把基础的知识打好一定的基础)\n2. 定位成为技术类管理成员(掌握基础的java知识，还要有几年的工作经验)\n3. java软件开发发展前景好，移植性也很强。\n- [ ] JDK(java开发工具包)\n\n*是编程语言和javaAPI类库和java虚拟机(是完成移植性的重要机制)来组成的* \n\n- [ ] JRE(java运行时环境)\n*是javaAPI子集和java虚拟机组成* \n\n**前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。** \n---\n\n**java系统可分为：javaEE(标准版)，javaSE(企业版)，javaME(微型版)，javaCARD(智能卡版)** \n---\n\n```\n//有必要说明一下，接下来的是在linux系统下使用终端来让我电脑上的文件进行运行\n\npublic class hello{//public(公有访问类型),class(类的标识),hello(类名)\n    public static void main (String arg[]){//是main函数的基本格式,也表明main函数是静态方法\n    System.out.println(\"hello,world!\");//打印字符串\"hello,world!\"\n    }\n}\n```\n![终端运行的结果](Java/java0.png) \n---\n\n\n**这里要注意一下的就是文件的后缀是.java,其次是以javac 来作为第一次的关键字来操作文件，接着就会生成一个后缀为.class的文件，然后就是运行你写的文件，记住后面没有任何的后缀。** \n\n* **java是面向对象的过程，也就是说在java中只有方法而没有所谓的函数。** \n\n```\npublic class Test{\n    public static void main(String args[]){\n    scanner s=new scanner(System.in);//为了可以让用户输入，在这里使用了scanner类,因为它附属与System.in\n    System.out.println(\"请输入你的性别\");\n    String set=s.nextLint();//以字符串的形式输入\n    System.out.println(\"请输入你的姓名\");\n    String name =s.nextLint();\n    switch(set){\n    case \"男\":\n    System.out.println(name+\"男士\");\n    break;\n    case \"女\":\n    System.out.println(name+\"女士\");\n    break;\n    default :\n    System.out.println(\"输入有误\");\n    break;\n    }\n    s.close();//关闭类\n    InputStreamReader input=new InputStreamReader(System.in);//定义在键盘输入\n    BufferedReader Buff=new BufferedReader(input);//以缓冲流的形式来接受input\n    //用try和catch机制来处理异常\n    try{\n    System.out.println(\"请输入字符：\");\n    String s=Buff.readLine();\n    System.out.println(\"字符：\"+s);\n    }catch (Exception e){\n    System.out.println(\"异常\");\n    }\n}\n\n```\n\n\n![运行结果](Java/java2.png)\n\n\n![输入的方式](Java/java1.png)\n\n*在这里只是简单的让用户输入了两次都是以字符串的方式来输入的，当然你也可以让用户输入你想让用户输入的数据类型(eg:int ,double)，上面也有参照的照片。* \n\n* **合法的标识符** \n- [ ] 不能存在关键字\n- [ ] 首字母不能是数字\n- [ ] 不能存在运算符\n- [ ] 标识符是区别大小写的\n- [ ] 标识符的命令规则是强制性的\n\n`我们都知道数据的类型有int,short,float,double,byte(字节)。最常见的就是int(整形的数据类型)。在java中我们可以通过程序来输出各个数据类型的范围是多少，最大值和最小值，和数据类型\n`\n\n```\npublic class Test{\n    public static void main (String args[]){\n    int a=Integer.Size;\n    System.out.println(\"int的范围:\"+a);\n    int b=Integer.MAX_VALUE;\n    System.out.println(\"int的最大值:\"+b);\n    int c=Integer.MIN_VALUE\n    System.out.println(\"int的最小值:\"+c);\n    Class <Integer> d=Integer.TYPE;\n    System.out.println(\"数据类型:\"+d);\n    }\n}\n```\n\n```\n运行结果：\nint的范围:32\nint的最大值:2147483647\nint的最小值:-2147483648\n数据类型:int\n```\n---\n```\npublic class Test{\n            static int i=10;\n    public static void main(String args[]){\n            int a=1;\n            int b=2;\n            {\n            int b=3;//main方法的变量名是不可以重复的，一个变量只能使用一个名，在这里就是重复使用了变量b，所以程序会报错。\n            System.out.println(\"b=\"+b);\n            System.out.println(\"a=\"+a);\n            System.out.println(\"i=\"+i);\n            }\n            System.out.println(\"b=\"+b);\n            System.out.println(\"a=\"+a);\n            System.out.println(\"i=\"+i);\n\n    }\n}\n```\n\n```\n上面的程序是运行不过的，这也是java的特别之处，在c++中，变量b是可以用的，但在java中是不可以的。\n```\n```\npublic class Test{\n    public static void main (String args[]){\n            char ch = '\\\"';//转义字符\n            System.out.println(ch);\n            System.out.println(\"\\\"hello,world!\"\\\");\n            System.out.println(ch+\"hello,world!\"+ch);\n    }\n}\n```\n\n```\n运行结果\n\"\n\"hello,world!\"\n\"hello,world!\"\n```\n---\n\n`总结可以得知，不管是用变量来存放转义字符，还是直接使用转义字符的方式来输出字符，程序都是可以顺利运行的，当然你也可以不使用变量来存放转义字符，但一个程序里面有太多的转义字符的存在你用变量来存放不是更好使用？这样你也不容易搞混已有的转义字符的使用。` \n```\npublic class Test{\n    public static void main(String args[]){\n        System.out.println(2+3+\"k\");\n        System.out.println(6+6+\"aa\"+6+6);\n    }\n}\n```\n\n```\n运行结果\n5k\n12aa66\n```\n---\n\n`上面的2+3是一个表达式，所以这里是5,但后面跟的是字符和+(字符串相加)的符号，所以是5k,下面的也是一样的，唯一不一样的是在+(字符串相加)之后，计算机会自动认为后面的也是+(字符串相加)所以后面的就是12aa66。但如果把上面的双引号换成单引号就是以数字的形式先加后输出的。` \n\n\n","source":"_posts/java.md","raw":"---\ntitle: java\ndate: 2019-09-19 10:37:00\nags:\n---\n\nWrite Once,Run Everywhere\n <!--more-->\n **达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。** \n ---\n\n *一步一个脚印的连好java的基本功。对于我来说是最好不过的，掌握java的基本语法。(类与对象，构造方法，引用传递，内部类，异常，包，java常用类库，javaIO，java类集)* \n\n1. 走技术之路(在学习java的同时，把基础的知识打好一定的基础)\n2. 定位成为技术类管理成员(掌握基础的java知识，还要有几年的工作经验)\n3. java软件开发发展前景好，移植性也很强。\n- [ ] JDK(java开发工具包)\n\n*是编程语言和javaAPI类库和java虚拟机(是完成移植性的重要机制)来组成的* \n\n- [ ] JRE(java运行时环境)\n*是javaAPI子集和java虚拟机组成* \n\n**前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。** \n---\n\n**java系统可分为：javaEE(标准版)，javaSE(企业版)，javaME(微型版)，javaCARD(智能卡版)** \n---\n\n```\n//有必要说明一下，接下来的是在linux系统下使用终端来让我电脑上的文件进行运行\n\npublic class hello{//public(公有访问类型),class(类的标识),hello(类名)\n    public static void main (String arg[]){//是main函数的基本格式,也表明main函数是静态方法\n    System.out.println(\"hello,world!\");//打印字符串\"hello,world!\"\n    }\n}\n```\n![终端运行的结果](Java/java0.png) \n---\n\n\n**这里要注意一下的就是文件的后缀是.java,其次是以javac 来作为第一次的关键字来操作文件，接着就会生成一个后缀为.class的文件，然后就是运行你写的文件，记住后面没有任何的后缀。** \n\n* **java是面向对象的过程，也就是说在java中只有方法而没有所谓的函数。** \n\n```\npublic class Test{\n    public static void main(String args[]){\n    scanner s=new scanner(System.in);//为了可以让用户输入，在这里使用了scanner类,因为它附属与System.in\n    System.out.println(\"请输入你的性别\");\n    String set=s.nextLint();//以字符串的形式输入\n    System.out.println(\"请输入你的姓名\");\n    String name =s.nextLint();\n    switch(set){\n    case \"男\":\n    System.out.println(name+\"男士\");\n    break;\n    case \"女\":\n    System.out.println(name+\"女士\");\n    break;\n    default :\n    System.out.println(\"输入有误\");\n    break;\n    }\n    s.close();//关闭类\n    InputStreamReader input=new InputStreamReader(System.in);//定义在键盘输入\n    BufferedReader Buff=new BufferedReader(input);//以缓冲流的形式来接受input\n    //用try和catch机制来处理异常\n    try{\n    System.out.println(\"请输入字符：\");\n    String s=Buff.readLine();\n    System.out.println(\"字符：\"+s);\n    }catch (Exception e){\n    System.out.println(\"异常\");\n    }\n}\n\n```\n\n\n![运行结果](Java/java2.png)\n\n\n![输入的方式](Java/java1.png)\n\n*在这里只是简单的让用户输入了两次都是以字符串的方式来输入的，当然你也可以让用户输入你想让用户输入的数据类型(eg:int ,double)，上面也有参照的照片。* \n\n* **合法的标识符** \n- [ ] 不能存在关键字\n- [ ] 首字母不能是数字\n- [ ] 不能存在运算符\n- [ ] 标识符是区别大小写的\n- [ ] 标识符的命令规则是强制性的\n\n`我们都知道数据的类型有int,short,float,double,byte(字节)。最常见的就是int(整形的数据类型)。在java中我们可以通过程序来输出各个数据类型的范围是多少，最大值和最小值，和数据类型\n`\n\n```\npublic class Test{\n    public static void main (String args[]){\n    int a=Integer.Size;\n    System.out.println(\"int的范围:\"+a);\n    int b=Integer.MAX_VALUE;\n    System.out.println(\"int的最大值:\"+b);\n    int c=Integer.MIN_VALUE\n    System.out.println(\"int的最小值:\"+c);\n    Class <Integer> d=Integer.TYPE;\n    System.out.println(\"数据类型:\"+d);\n    }\n}\n```\n\n```\n运行结果：\nint的范围:32\nint的最大值:2147483647\nint的最小值:-2147483648\n数据类型:int\n```\n---\n```\npublic class Test{\n            static int i=10;\n    public static void main(String args[]){\n            int a=1;\n            int b=2;\n            {\n            int b=3;//main方法的变量名是不可以重复的，一个变量只能使用一个名，在这里就是重复使用了变量b，所以程序会报错。\n            System.out.println(\"b=\"+b);\n            System.out.println(\"a=\"+a);\n            System.out.println(\"i=\"+i);\n            }\n            System.out.println(\"b=\"+b);\n            System.out.println(\"a=\"+a);\n            System.out.println(\"i=\"+i);\n\n    }\n}\n```\n\n```\n上面的程序是运行不过的，这也是java的特别之处，在c++中，变量b是可以用的，但在java中是不可以的。\n```\n```\npublic class Test{\n    public static void main (String args[]){\n            char ch = '\\\"';//转义字符\n            System.out.println(ch);\n            System.out.println(\"\\\"hello,world!\"\\\");\n            System.out.println(ch+\"hello,world!\"+ch);\n    }\n}\n```\n\n```\n运行结果\n\"\n\"hello,world!\"\n\"hello,world!\"\n```\n---\n\n`总结可以得知，不管是用变量来存放转义字符，还是直接使用转义字符的方式来输出字符，程序都是可以顺利运行的，当然你也可以不使用变量来存放转义字符，但一个程序里面有太多的转义字符的存在你用变量来存放不是更好使用？这样你也不容易搞混已有的转义字符的使用。` \n```\npublic class Test{\n    public static void main(String args[]){\n        System.out.println(2+3+\"k\");\n        System.out.println(6+6+\"aa\"+6+6);\n    }\n}\n```\n\n```\n运行结果\n5k\n12aa66\n```\n---\n\n`上面的2+3是一个表达式，所以这里是5,但后面跟的是字符和+(字符串相加)的符号，所以是5k,下面的也是一样的，唯一不一样的是在+(字符串相加)之后，计算机会自动认为后面的也是+(字符串相加)所以后面的就是12aa66。但如果把上面的双引号换成单引号就是以数字的形式先加后输出的。` \n\n\n","slug":"java","published":1,"updated":"2019-11-05T11:51:53.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9ph3000ggoz7nj61gyav","content":"<p>Write Once,Run Everywhere<br> <a id=\"more\"></a></p>\n<h2 id=\"达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。\"><a href=\"#达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。\" class=\"headerlink\" title=\" 达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。 \"></a> <strong>达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。</strong> </h2><p> <em>一步一个脚印的连好java的基本功。对于我来说是最好不过的，掌握java的基本语法。(类与对象，构造方法，引用传递，内部类，异常，包，java常用类库，javaIO，java类集)</em> </p>\n<ol>\n<li>走技术之路(在学习java的同时，把基础的知识打好一定的基础)</li>\n<li>定位成为技术类管理成员(掌握基础的java知识，还要有几年的工作经验)</li>\n<li>java软件开发发展前景好，移植性也很强。</li>\n</ol>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> JDK(java开发工具包)</li>\n</ul>\n<p><em>是编程语言和javaAPI类库和java虚拟机(是完成移植性的重要机制)来组成的</em> </p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> JRE(java运行时环境)<br><em>是javaAPI子集和java虚拟机组成</em> </li>\n</ul>\n<h2 id=\"前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。\"><a href=\"#前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。\" class=\"headerlink\" title=\"前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。 \"></a><strong>前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。</strong> </h2><h2 id=\"java系统可分为：javaEE-标准版-，javaSE-企业版-，javaME-微型版-，javaCARD-智能卡版\"><a href=\"#java系统可分为：javaEE-标准版-，javaSE-企业版-，javaME-微型版-，javaCARD-智能卡版\" class=\"headerlink\" title=\"java系统可分为：javaEE(标准版)，javaSE(企业版)，javaME(微型版)，javaCARD(智能卡版) \"></a><strong>java系统可分为：javaEE(标准版)，javaSE(企业版)，javaME(微型版)，javaCARD(智能卡版)</strong> </h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//有必要说明一下，接下来的是在linux系统下使用终端来让我电脑上的文件进行运行</span><br><span class=\"line\"></span><br><span class=\"line\">public class hello&#123;//public(公有访问类型),class(类的标识),hello(类名)</span><br><span class=\"line\">    public static void main (String arg[])&#123;//是main函数的基本格式,也表明main函数是静态方法</span><br><span class=\"line\">    System.out.println(&quot;hello,world!&quot;);//打印字符串&quot;hello,world!&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a><img src=\"//EvanShady.github.io/2019/09/19/java/java0.png\" alt=\"终端运行的结果\"> </h2><p><strong>这里要注意一下的就是文件的后缀是.java,其次是以javac 来作为第一次的关键字来操作文件，接着就会生成一个后缀为.class的文件，然后就是运行你写的文件，记住后面没有任何的后缀。</strong> </p>\n<ul>\n<li><strong>java是面向对象的过程，也就是说在java中只有方法而没有所谓的函数。</strong> </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">    scanner s=new scanner(System.in);//为了可以让用户输入，在这里使用了scanner类,因为它附属与System.in</span><br><span class=\"line\">    System.out.println(&quot;请输入你的性别&quot;);</span><br><span class=\"line\">    String set=s.nextLint();//以字符串的形式输入</span><br><span class=\"line\">    System.out.println(&quot;请输入你的姓名&quot;);</span><br><span class=\"line\">    String name =s.nextLint();</span><br><span class=\"line\">    switch(set)&#123;</span><br><span class=\"line\">    case &quot;男&quot;:</span><br><span class=\"line\">    System.out.println(name+&quot;男士&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    case &quot;女&quot;:</span><br><span class=\"line\">    System.out.println(name+&quot;女士&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    default :</span><br><span class=\"line\">    System.out.println(&quot;输入有误&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s.close();//关闭类</span><br><span class=\"line\">    InputStreamReader input=new InputStreamReader(System.in);//定义在键盘输入</span><br><span class=\"line\">    BufferedReader Buff=new BufferedReader(input);//以缓冲流的形式来接受input</span><br><span class=\"line\">    //用try和catch机制来处理异常</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">    System.out.println(&quot;请输入字符：&quot;);</span><br><span class=\"line\">    String s=Buff.readLine();</span><br><span class=\"line\">    System.out.println(&quot;字符：&quot;+s);</span><br><span class=\"line\">    &#125;catch (Exception e)&#123;</span><br><span class=\"line\">    System.out.println(&quot;异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/09/19/java/java2.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/09/19/java/java1.png\" alt=\"输入的方式\"></p>\n<p><em>在这里只是简单的让用户输入了两次都是以字符串的方式来输入的，当然你也可以让用户输入你想让用户输入的数据类型(eg:int ,double)，上面也有参照的照片。</em> </p>\n<ul>\n<li><strong>合法的标识符</strong> </li>\n</ul>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 不能存在关键字</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 首字母不能是数字</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 不能存在运算符</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 标识符是区别大小写的</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 标识符的命令规则是强制性的</li>\n</ul>\n<p><code>我们都知道数据的类型有int,short,float,double,byte(字节)。最常见的就是int(整形的数据类型)。在java中我们可以通过程序来输出各个数据类型的范围是多少，最大值和最小值，和数据类型</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main (String args[])&#123;</span><br><span class=\"line\">    int a=Integer.Size;</span><br><span class=\"line\">    System.out.println(&quot;int的范围:&quot;+a);</span><br><span class=\"line\">    int b=Integer.MAX_VALUE;</span><br><span class=\"line\">    System.out.println(&quot;int的最大值:&quot;+b);</span><br><span class=\"line\">    int c=Integer.MIN_VALUE</span><br><span class=\"line\">    System.out.println(&quot;int的最小值:&quot;+c);</span><br><span class=\"line\">    Class &lt;Integer&gt; d=Integer.TYPE;</span><br><span class=\"line\">    System.out.println(&quot;数据类型:&quot;+d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">int的范围:32</span><br><span class=\"line\">int的最大值:2147483647</span><br><span class=\"line\">int的最小值:-2147483648</span><br><span class=\"line\">数据类型:int</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">            static int i=10;</span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">            int a=1;</span><br><span class=\"line\">            int b=2;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            int b=3;//main方法的变量名是不可以重复的，一个变量只能使用一个名，在这里就是重复使用了变量b，所以程序会报错。</span><br><span class=\"line\">            System.out.println(&quot;b=&quot;+b);</span><br><span class=\"line\">            System.out.println(&quot;a=&quot;+a);</span><br><span class=\"line\">            System.out.println(&quot;i=&quot;+i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(&quot;b=&quot;+b);</span><br><span class=\"line\">            System.out.println(&quot;a=&quot;+a);</span><br><span class=\"line\">            System.out.println(&quot;i=&quot;+i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上面的程序是运行不过的，这也是java的特别之处，在c++中，变量b是可以用的，但在java中是不可以的。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main (String args[])&#123;</span><br><span class=\"line\">            char ch = &apos;\\&quot;&apos;;//转义字符</span><br><span class=\"line\">            System.out.println(ch);</span><br><span class=\"line\">            System.out.println(&quot;\\&quot;hello,world!&quot;\\&quot;);</span><br><span class=\"line\">            System.out.println(ch+&quot;hello,world!&quot;+ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;hello,world!&quot;</span><br><span class=\"line\">&quot;hello,world!&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>总结可以得知，不管是用变量来存放转义字符，还是直接使用转义字符的方式来输出字符，程序都是可以顺利运行的，当然你也可以不使用变量来存放转义字符，但一个程序里面有太多的转义字符的存在你用变量来存放不是更好使用？这样你也不容易搞混已有的转义字符的使用。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">        System.out.println(2+3+&quot;k&quot;);</span><br><span class=\"line\">        System.out.println(6+6+&quot;aa&quot;+6+6);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">5k</span><br><span class=\"line\">12aa66</span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>上面的2+3是一个表达式，所以这里是5,但后面跟的是字符和+(字符串相加)的符号，所以是5k,下面的也是一样的，唯一不一样的是在+(字符串相加)之后，计算机会自动认为后面的也是+(字符串相加)所以后面的就是12aa66。但如果把上面的双引号换成单引号就是以数字的形式先加后输出的。</code> </p>\n","site":{"data":{}},"excerpt":"<p>Write Once,Run Everywhere<br></p>","more":"<p></p>\n<h2 id=\"达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。\"><a href=\"#达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。\" class=\"headerlink\" title=\" 达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。 \"></a> <strong>达到对面向对象编程思想更加深入的理解，是对面向对象的各种特性及其实现细节更加熟练的掌握。</strong> </h2><p> <em>一步一个脚印的连好java的基本功。对于我来说是最好不过的，掌握java的基本语法。(类与对象，构造方法，引用传递，内部类，异常，包，java常用类库，javaIO，java类集)</em> </p>\n<ol>\n<li>走技术之路(在学习java的同时，把基础的知识打好一定的基础)</li>\n<li>定位成为技术类管理成员(掌握基础的java知识，还要有几年的工作经验)</li>\n<li>java软件开发发展前景好，移植性也很强。</li>\n</ol>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> JDK(java开发工具包)</li>\n</ul>\n<p><em>是编程语言和javaAPI类库和java虚拟机(是完成移植性的重要机制)来组成的</em> </p>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> JRE(java运行时环境)<br><em>是javaAPI子集和java虚拟机组成</em> </li>\n</ul>\n<h2 id=\"前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。\"><a href=\"#前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。\" class=\"headerlink\" title=\"前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。 \"></a><strong>前面二者的区别是：JDK包含着JRE。如果仅仅是运行java程序的话就需要JRE。如果是要自己动手写java程序就要部署JDK环境。</strong> </h2><h2 id=\"java系统可分为：javaEE-标准版-，javaSE-企业版-，javaME-微型版-，javaCARD-智能卡版\"><a href=\"#java系统可分为：javaEE-标准版-，javaSE-企业版-，javaME-微型版-，javaCARD-智能卡版\" class=\"headerlink\" title=\"java系统可分为：javaEE(标准版)，javaSE(企业版)，javaME(微型版)，javaCARD(智能卡版) \"></a><strong>java系统可分为：javaEE(标准版)，javaSE(企业版)，javaME(微型版)，javaCARD(智能卡版)</strong> </h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//有必要说明一下，接下来的是在linux系统下使用终端来让我电脑上的文件进行运行</span><br><span class=\"line\"></span><br><span class=\"line\">public class hello&#123;//public(公有访问类型),class(类的标识),hello(类名)</span><br><span class=\"line\">    public static void main (String arg[])&#123;//是main函数的基本格式,也表明main函数是静态方法</span><br><span class=\"line\">    System.out.println(&quot;hello,world!&quot;);//打印字符串&quot;hello,world!&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\" \"></a><img src=\"//EvanShady.github.io/2019/09/19/java/java0.png\" alt=\"终端运行的结果\"> </h2><p><strong>这里要注意一下的就是文件的后缀是.java,其次是以javac 来作为第一次的关键字来操作文件，接着就会生成一个后缀为.class的文件，然后就是运行你写的文件，记住后面没有任何的后缀。</strong> </p>\n<ul>\n<li><strong>java是面向对象的过程，也就是说在java中只有方法而没有所谓的函数。</strong> </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">    scanner s=new scanner(System.in);//为了可以让用户输入，在这里使用了scanner类,因为它附属与System.in</span><br><span class=\"line\">    System.out.println(&quot;请输入你的性别&quot;);</span><br><span class=\"line\">    String set=s.nextLint();//以字符串的形式输入</span><br><span class=\"line\">    System.out.println(&quot;请输入你的姓名&quot;);</span><br><span class=\"line\">    String name =s.nextLint();</span><br><span class=\"line\">    switch(set)&#123;</span><br><span class=\"line\">    case &quot;男&quot;:</span><br><span class=\"line\">    System.out.println(name+&quot;男士&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    case &quot;女&quot;:</span><br><span class=\"line\">    System.out.println(name+&quot;女士&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    default :</span><br><span class=\"line\">    System.out.println(&quot;输入有误&quot;);</span><br><span class=\"line\">    break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s.close();//关闭类</span><br><span class=\"line\">    InputStreamReader input=new InputStreamReader(System.in);//定义在键盘输入</span><br><span class=\"line\">    BufferedReader Buff=new BufferedReader(input);//以缓冲流的形式来接受input</span><br><span class=\"line\">    //用try和catch机制来处理异常</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">    System.out.println(&quot;请输入字符：&quot;);</span><br><span class=\"line\">    String s=Buff.readLine();</span><br><span class=\"line\">    System.out.println(&quot;字符：&quot;+s);</span><br><span class=\"line\">    &#125;catch (Exception e)&#123;</span><br><span class=\"line\">    System.out.println(&quot;异常&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/09/19/java/java2.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/09/19/java/java1.png\" alt=\"输入的方式\"></p>\n<p><em>在这里只是简单的让用户输入了两次都是以字符串的方式来输入的，当然你也可以让用户输入你想让用户输入的数据类型(eg:int ,double)，上面也有参照的照片。</em> </p>\n<ul>\n<li><strong>合法的标识符</strong> </li>\n</ul>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 不能存在关键字</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 首字母不能是数字</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 不能存在运算符</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 标识符是区别大小写的</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 标识符的命令规则是强制性的</li>\n</ul>\n<p><code>我们都知道数据的类型有int,short,float,double,byte(字节)。最常见的就是int(整形的数据类型)。在java中我们可以通过程序来输出各个数据类型的范围是多少，最大值和最小值，和数据类型</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main (String args[])&#123;</span><br><span class=\"line\">    int a=Integer.Size;</span><br><span class=\"line\">    System.out.println(&quot;int的范围:&quot;+a);</span><br><span class=\"line\">    int b=Integer.MAX_VALUE;</span><br><span class=\"line\">    System.out.println(&quot;int的最大值:&quot;+b);</span><br><span class=\"line\">    int c=Integer.MIN_VALUE</span><br><span class=\"line\">    System.out.println(&quot;int的最小值:&quot;+c);</span><br><span class=\"line\">    Class &lt;Integer&gt; d=Integer.TYPE;</span><br><span class=\"line\">    System.out.println(&quot;数据类型:&quot;+d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">int的范围:32</span><br><span class=\"line\">int的最大值:2147483647</span><br><span class=\"line\">int的最小值:-2147483648</span><br><span class=\"line\">数据类型:int</span><br></pre></td></tr></table></figure>\n<hr>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">            static int i=10;</span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">            int a=1;</span><br><span class=\"line\">            int b=2;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            int b=3;//main方法的变量名是不可以重复的，一个变量只能使用一个名，在这里就是重复使用了变量b，所以程序会报错。</span><br><span class=\"line\">            System.out.println(&quot;b=&quot;+b);</span><br><span class=\"line\">            System.out.println(&quot;a=&quot;+a);</span><br><span class=\"line\">            System.out.println(&quot;i=&quot;+i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(&quot;b=&quot;+b);</span><br><span class=\"line\">            System.out.println(&quot;a=&quot;+a);</span><br><span class=\"line\">            System.out.println(&quot;i=&quot;+i);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">上面的程序是运行不过的，这也是java的特别之处，在c++中，变量b是可以用的，但在java中是不可以的。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main (String args[])&#123;</span><br><span class=\"line\">            char ch = &apos;\\&quot;&apos;;//转义字符</span><br><span class=\"line\">            System.out.println(ch);</span><br><span class=\"line\">            System.out.println(&quot;\\&quot;hello,world!&quot;\\&quot;);</span><br><span class=\"line\">            System.out.println(ch+&quot;hello,world!&quot;+ch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">&quot;</span><br><span class=\"line\">&quot;hello,world!&quot;</span><br><span class=\"line\">&quot;hello,world!&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>总结可以得知，不管是用变量来存放转义字符，还是直接使用转义字符的方式来输出字符，程序都是可以顺利运行的，当然你也可以不使用变量来存放转义字符，但一个程序里面有太多的转义字符的存在你用变量来存放不是更好使用？这样你也不容易搞混已有的转义字符的使用。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Test&#123;</span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">        System.out.println(2+3+&quot;k&quot;);</span><br><span class=\"line\">        System.out.println(6+6+&quot;aa&quot;+6+6);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果</span><br><span class=\"line\">5k</span><br><span class=\"line\">12aa66</span><br></pre></td></tr></table></figure>\n<hr>\n<p><code>上面的2+3是一个表达式，所以这里是5,但后面跟的是字符和+(字符串相加)的符号，所以是5k,下面的也是一样的，唯一不一样的是在+(字符串相加)之后，计算机会自动认为后面的也是+(字符串相加)所以后面的就是12aa66。但如果把上面的双引号换成单引号就是以数字的形式先加后输出的。</code> </p>"},{"title":"tar","date":"2019-06-03T09:55:22.000Z","_content":"注释\n<!--more-->\n# TAR\n**tar(打包命令)也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令**\n---\n//声明:test1,test2,是存在的文件，也是你接下来要操作的文件。\n1. tar -cf file.tar test1    \n//这里是把test1这个文件打包在一个file.tar的包里面,这里的c是创建一个文件，f后面是紧跟这文件名。\n2. tar -rf file.tar test2\n//这里是把test2追加到file.tar文件中,r是追加。\n3. tar -uf file.tar\n//这里是把刚刚的file.tar文件更新，u是更新的意思。\n4. tar -tf file.tar\n//这里是把file.tar文件的内容列出来，t是查看文件中的内容。\n5. tar -xf file.tar\n解压file.tar文件\n**值得注意的是后面跟着的一定要是文件名！！！**\n> tar调用gzip\n* tar -czf filetest1.tar.gz file1\n//调用gzip要使用-z的参数，意思是和上面一样的，c是创建一个文件，f后面紧跟着文件名。 \n* tar -xzf filetest1.tar.gz\n//解压上面的文件\n>> 压缩\n1. 上面是用tar打包，这里就是用zip压缩。\nzip -r test3.zip file.tar\n//这里是把上面的文件压缩到新的文件。\nunzip test3.zip\n//解压。\n**在这里文件的后缀名很重要，因为这关系着我们的文件性质，有的时候你会因为文件的后缀名而把你自己搞自闭，**\n**所以你要在每次操作文件之前要想清楚操作之后的文件的后缀是什么类型的，也要接的上你将要操作文件的后缀,**\n**不能说，前一个文件后缀和你后面的文件的后缀不一样，这样也是不可以的。**\n---\n![ta](tar/tar.png)\n***\n**压缩的方法有多种，但我觉得也没必要都记住，因为大多数都只是参数不一样而已，大多的格式是一样的。**\n**只要我们能在工作中解决自身的小问题就行，其它的，慢慢就会记住的，在这里我还是挺赞同小伙子说的一句话。**\n**你想要最短的时间学会你想学的东西，你就一定要多去用它，这样你才是最快的掌握它。**\n***\n![](tar/tar1.png)\n#### 无标题\n1. 我是从下午四点多学到现在的，中间尝试了很多，自己也就慢慢的理解了，接下来也就是有事没事就操作一波的事情。\n2. 感觉linux要完全掌握真的不是一件简单的事情，要一步一步的走向它，你得慢慢地去学，我希望以后的自己是每天都有学习的，因为我是这么想的，但偶尔给自己放放假也是可以的,因为你是人，不是一个冷冰冰的机器，你有开心，难过，伤心，烦躁的时候，但你随着时间的流逝，有时你的年龄是不允许你做的一些事情，没有小时候的随心所欲，在别人的眼里只不过是一个小孩子的幼稚而已。\n3. 七月的风，八月的雨，卑微的我喜欢遥远的你。\n","source":"_posts/tar.md","raw":"---\ntitle: tar\ndate: 2019-06-03 17:55:22\ntags:\n---\n注释\n<!--more-->\n# TAR\n**tar(打包命令)也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令**\n---\n//声明:test1,test2,是存在的文件，也是你接下来要操作的文件。\n1. tar -cf file.tar test1    \n//这里是把test1这个文件打包在一个file.tar的包里面,这里的c是创建一个文件，f后面是紧跟这文件名。\n2. tar -rf file.tar test2\n//这里是把test2追加到file.tar文件中,r是追加。\n3. tar -uf file.tar\n//这里是把刚刚的file.tar文件更新，u是更新的意思。\n4. tar -tf file.tar\n//这里是把file.tar文件的内容列出来，t是查看文件中的内容。\n5. tar -xf file.tar\n解压file.tar文件\n**值得注意的是后面跟着的一定要是文件名！！！**\n> tar调用gzip\n* tar -czf filetest1.tar.gz file1\n//调用gzip要使用-z的参数，意思是和上面一样的，c是创建一个文件，f后面紧跟着文件名。 \n* tar -xzf filetest1.tar.gz\n//解压上面的文件\n>> 压缩\n1. 上面是用tar打包，这里就是用zip压缩。\nzip -r test3.zip file.tar\n//这里是把上面的文件压缩到新的文件。\nunzip test3.zip\n//解压。\n**在这里文件的后缀名很重要，因为这关系着我们的文件性质，有的时候你会因为文件的后缀名而把你自己搞自闭，**\n**所以你要在每次操作文件之前要想清楚操作之后的文件的后缀是什么类型的，也要接的上你将要操作文件的后缀,**\n**不能说，前一个文件后缀和你后面的文件的后缀不一样，这样也是不可以的。**\n---\n![ta](tar/tar.png)\n***\n**压缩的方法有多种，但我觉得也没必要都记住，因为大多数都只是参数不一样而已，大多的格式是一样的。**\n**只要我们能在工作中解决自身的小问题就行，其它的，慢慢就会记住的，在这里我还是挺赞同小伙子说的一句话。**\n**你想要最短的时间学会你想学的东西，你就一定要多去用它，这样你才是最快的掌握它。**\n***\n![](tar/tar1.png)\n#### 无标题\n1. 我是从下午四点多学到现在的，中间尝试了很多，自己也就慢慢的理解了，接下来也就是有事没事就操作一波的事情。\n2. 感觉linux要完全掌握真的不是一件简单的事情，要一步一步的走向它，你得慢慢地去学，我希望以后的自己是每天都有学习的，因为我是这么想的，但偶尔给自己放放假也是可以的,因为你是人，不是一个冷冰冰的机器，你有开心，难过，伤心，烦躁的时候，但你随着时间的流逝，有时你的年龄是不允许你做的一些事情，没有小时候的随心所欲，在别人的眼里只不过是一个小孩子的幼稚而已。\n3. 七月的风，八月的雨，卑微的我喜欢遥远的你。\n","slug":"tar","published":1,"updated":"2019-09-10T09:09:34.814Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pk1000hgoz7ktm0fwrw","content":"<p>注释<br><a id=\"more\"></a></p>\n<h1 id=\"TAR\"><a href=\"#TAR\" class=\"headerlink\" title=\"TAR\"></a>TAR</h1><h2 id=\"tar-打包命令-也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令\"><a href=\"#tar-打包命令-也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令\" class=\"headerlink\" title=\"tar(打包命令)也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令\"></a><strong>tar(打包命令)也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令</strong></h2><p>//声明:test1,test2,是存在的文件，也是你接下来要操作的文件。</p>\n<ol>\n<li>tar -cf file.tar test1<br>//这里是把test1这个文件打包在一个file.tar的包里面,这里的c是创建一个文件，f后面是紧跟这文件名。</li>\n<li>tar -rf file.tar test2<br>//这里是把test2追加到file.tar文件中,r是追加。</li>\n<li>tar -uf file.tar<br>//这里是把刚刚的file.tar文件更新，u是更新的意思。</li>\n<li>tar -tf file.tar<br>//这里是把file.tar文件的内容列出来，t是查看文件中的内容。</li>\n<li>tar -xf file.tar<br>解压file.tar文件<br><strong>值得注意的是后面跟着的一定要是文件名！！！</strong><blockquote>\n<p>tar调用gzip</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>tar -czf filetest1.tar.gz file1<br>//调用gzip要使用-z的参数，意思是和上面一样的，c是创建一个文件，f后面紧跟着文件名。 </li>\n<li>tar -xzf filetest1.tar.gz<br>//解压上面的文件<blockquote>\n<blockquote>\n<p>压缩</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>上面是用tar打包，这里就是用zip压缩。<br>zip -r test3.zip file.tar<br>//这里是把上面的文件压缩到新的文件。<br>unzip test3.zip<br>//解压。<br><strong>在这里文件的后缀名很重要，因为这关系着我们的文件性质，有的时候你会因为文件的后缀名而把你自己搞自闭，</strong><br><strong>所以你要在每次操作文件之前要想清楚操作之后的文件的后缀是什么类型的，也要接的上你将要操作文件的后缀,</strong><br><strong>不能说，前一个文件后缀和你后面的文件的后缀不一样，这样也是不可以的。</strong></li>\n</ol>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/06/03/tar/tar.png\" alt=\"ta\"></p>\n<hr>\n<p><strong>压缩的方法有多种，但我觉得也没必要都记住，因为大多数都只是参数不一样而已，大多的格式是一样的。</strong><br><strong>只要我们能在工作中解决自身的小问题就行，其它的，慢慢就会记住的，在这里我还是挺赞同小伙子说的一句话。</strong><br><strong>你想要最短的时间学会你想学的东西，你就一定要多去用它，这样你才是最快的掌握它。</strong></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/06/03/tar/tar1.png\" alt></p>\n<h4 id=\"无标题\"><a href=\"#无标题\" class=\"headerlink\" title=\"无标题\"></a>无标题</h4><ol>\n<li>我是从下午四点多学到现在的，中间尝试了很多，自己也就慢慢的理解了，接下来也就是有事没事就操作一波的事情。</li>\n<li>感觉linux要完全掌握真的不是一件简单的事情，要一步一步的走向它，你得慢慢地去学，我希望以后的自己是每天都有学习的，因为我是这么想的，但偶尔给自己放放假也是可以的,因为你是人，不是一个冷冰冰的机器，你有开心，难过，伤心，烦躁的时候，但你随着时间的流逝，有时你的年龄是不允许你做的一些事情，没有小时候的随心所欲，在别人的眼里只不过是一个小孩子的幼稚而已。</li>\n<li>七月的风，八月的雨，卑微的我喜欢遥远的你。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>注释<br></p>","more":"<p></p>\n<h1 id=\"TAR\"><a href=\"#TAR\" class=\"headerlink\" title=\"TAR\"></a>TAR</h1><h2 id=\"tar-打包命令-也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令\"><a href=\"#tar-打包命令-也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令\" class=\"headerlink\" title=\"tar(打包命令)也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令\"></a><strong>tar(打包命令)也可以说是备份，在我们管理文件的时候有很多的好处，当我们的文件各自的位置不一样的时候这时就是打包发挥的时候了。你只需要一条命令就可解决这些傻逼问题，下面是一些tar常用的命令</strong></h2><p>//声明:test1,test2,是存在的文件，也是你接下来要操作的文件。</p>\n<ol>\n<li>tar -cf file.tar test1<br>//这里是把test1这个文件打包在一个file.tar的包里面,这里的c是创建一个文件，f后面是紧跟这文件名。</li>\n<li>tar -rf file.tar test2<br>//这里是把test2追加到file.tar文件中,r是追加。</li>\n<li>tar -uf file.tar<br>//这里是把刚刚的file.tar文件更新，u是更新的意思。</li>\n<li>tar -tf file.tar<br>//这里是把file.tar文件的内容列出来，t是查看文件中的内容。</li>\n<li>tar -xf file.tar<br>解压file.tar文件<br><strong>值得注意的是后面跟着的一定要是文件名！！！</strong><blockquote>\n<p>tar调用gzip</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>tar -czf filetest1.tar.gz file1<br>//调用gzip要使用-z的参数，意思是和上面一样的，c是创建一个文件，f后面紧跟着文件名。 </li>\n<li>tar -xzf filetest1.tar.gz<br>//解压上面的文件<blockquote>\n<blockquote>\n<p>压缩</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>上面是用tar打包，这里就是用zip压缩。<br>zip -r test3.zip file.tar<br>//这里是把上面的文件压缩到新的文件。<br>unzip test3.zip<br>//解压。<br><strong>在这里文件的后缀名很重要，因为这关系着我们的文件性质，有的时候你会因为文件的后缀名而把你自己搞自闭，</strong><br><strong>所以你要在每次操作文件之前要想清楚操作之后的文件的后缀是什么类型的，也要接的上你将要操作文件的后缀,</strong><br><strong>不能说，前一个文件后缀和你后面的文件的后缀不一样，这样也是不可以的。</strong></li>\n</ol>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/06/03/tar/tar.png\" alt=\"ta\"></p>\n<hr>\n<p><strong>压缩的方法有多种，但我觉得也没必要都记住，因为大多数都只是参数不一样而已，大多的格式是一样的。</strong><br><strong>只要我们能在工作中解决自身的小问题就行，其它的，慢慢就会记住的，在这里我还是挺赞同小伙子说的一句话。</strong><br><strong>你想要最短的时间学会你想学的东西，你就一定要多去用它，这样你才是最快的掌握它。</strong></p>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/06/03/tar/tar1.png\" alt></p>\n<h4 id=\"无标题\"><a href=\"#无标题\" class=\"headerlink\" title=\"无标题\"></a>无标题</h4><ol>\n<li>我是从下午四点多学到现在的，中间尝试了很多，自己也就慢慢的理解了，接下来也就是有事没事就操作一波的事情。</li>\n<li>感觉linux要完全掌握真的不是一件简单的事情，要一步一步的走向它，你得慢慢地去学，我希望以后的自己是每天都有学习的，因为我是这么想的，但偶尔给自己放放假也是可以的,因为你是人，不是一个冷冰冰的机器，你有开心，难过，伤心，烦躁的时候，但你随着时间的流逝，有时你的年龄是不允许你做的一些事情，没有小时候的随心所欲，在别人的眼里只不过是一个小孩子的幼稚而已。</li>\n<li>七月的风，八月的雨，卑微的我喜欢遥远的你。</li>\n</ol>"},{"title":"test","date":"2019-05-31T13:43:15.000Z","_content":"注释\n<!--more-->\n","source":"_posts/test-1.md","raw":"---\ntitle: test\ndate: 2019-05-31 21:43:15\ntags:\n---\n注释\n<!--more-->\n","slug":"test-1","published":1,"updated":"2019-09-12T07:16:43.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pk2000igoz7csrvyxv5","content":"<p>注释<br><a id=\"more\"></a></p>\n","site":{"data":{}},"excerpt":"<p>注释<br></p>","more":"<p></p>"},{"title":"小萝莉","date":"2019-05-06T14:22:11.000Z","_content":"注释\n<!--more-->\n# 小萝莉\n**这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。**\n----\n> 虚构一：\n>> 我要是现在说我爱你，你觉得会不会快了一点，还是要慢慢来培养感情？\n>>> 你只能说好，因为这是我的世界，你们是没有写的权利，只有读的权利，感觉有点熟悉，你们的脑子是怎么运作的我不知道，但老子感觉有点熟悉，因为老子在给你们上课，或许你们可能觉得我在胡乱逼逼，这样的想法是不可有的，在这个世界上想你们这么帅的人已经很少了，或许你现在心里美美的，但对不起，我说的是你旁边的小姐姐，我想她，她是我日思夜想的，没错了，你现在心里想的就是了，你真聪明，就是你以前看过的最可怕的那女鬼。\n>>>> 你现在很怕？想打我？想骂我？这就是你来我这里的原因？我不懂你们的心里，放着这么好的时间不好好珍惜，来我这里看一个小骚年写的无序头文章，你真的有病，难怪小萝莉会找上你，你现在应该拿起你的手机call me （请允许我装个逼）。\n>>>> 预知后事如何，请看明天谁第一个发现你的尸体。\n\n----\n> 虚构二：\n>> 男人要想混得好，头发必须往后倒！这句话就想是。。。等等我音乐有点自闭，感觉是催眠，\n>>> 老子刚刚出去换歌，怎么了，就是这么任性，年轻，有钱，任性。有点小高调，你想要的，我却不能给你我全部，我能给的却又不是你想要的。我讨厌这么不知好歹的小姐姐，大家都是人，我给你的你要好好拿着，或许就是不要，就这两个选择，不要跟我虚的，磨磨唧唧的，难怪最后受伤的都是你们这些女的，我不一样，因为我是男的，我是属于那种小骚小骚的，具体我是怎么样的我也不清楚，所以，你还是听马克思的话，不要想着去了解一个人，往往这个人心里也是搞不懂自己到底是一个怎么样的人，我之所以会这样，就是不听前人的劝告，你们还是不要去的好，把自己每天搞得充充实实的就好了，那样的你真的很好，虽然平时练习代码的时候很狼狈，但是你运行没bug时，你那一副天下都是你的样子真的很欠打。\n----\n> 虚构三：![大哥](小萝莉/test.png)\n>> 老子出去一下。\n----\n![test](小萝莉/sda.jpg)\n\n|name|year|\n|-----|-----|\n|blue|20|:\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|red|18|\n|tearllo|19|\n|blue|20|\n","source":"_posts/小萝莉.md","raw":"---\ntitle: 小萝莉\ndate: 2019-05-06 22:22:11\ntags:\n---\n注释\n<!--more-->\n# 小萝莉\n**这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。**\n----\n> 虚构一：\n>> 我要是现在说我爱你，你觉得会不会快了一点，还是要慢慢来培养感情？\n>>> 你只能说好，因为这是我的世界，你们是没有写的权利，只有读的权利，感觉有点熟悉，你们的脑子是怎么运作的我不知道，但老子感觉有点熟悉，因为老子在给你们上课，或许你们可能觉得我在胡乱逼逼，这样的想法是不可有的，在这个世界上想你们这么帅的人已经很少了，或许你现在心里美美的，但对不起，我说的是你旁边的小姐姐，我想她，她是我日思夜想的，没错了，你现在心里想的就是了，你真聪明，就是你以前看过的最可怕的那女鬼。\n>>>> 你现在很怕？想打我？想骂我？这就是你来我这里的原因？我不懂你们的心里，放着这么好的时间不好好珍惜，来我这里看一个小骚年写的无序头文章，你真的有病，难怪小萝莉会找上你，你现在应该拿起你的手机call me （请允许我装个逼）。\n>>>> 预知后事如何，请看明天谁第一个发现你的尸体。\n\n----\n> 虚构二：\n>> 男人要想混得好，头发必须往后倒！这句话就想是。。。等等我音乐有点自闭，感觉是催眠，\n>>> 老子刚刚出去换歌，怎么了，就是这么任性，年轻，有钱，任性。有点小高调，你想要的，我却不能给你我全部，我能给的却又不是你想要的。我讨厌这么不知好歹的小姐姐，大家都是人，我给你的你要好好拿着，或许就是不要，就这两个选择，不要跟我虚的，磨磨唧唧的，难怪最后受伤的都是你们这些女的，我不一样，因为我是男的，我是属于那种小骚小骚的，具体我是怎么样的我也不清楚，所以，你还是听马克思的话，不要想着去了解一个人，往往这个人心里也是搞不懂自己到底是一个怎么样的人，我之所以会这样，就是不听前人的劝告，你们还是不要去的好，把自己每天搞得充充实实的就好了，那样的你真的很好，虽然平时练习代码的时候很狼狈，但是你运行没bug时，你那一副天下都是你的样子真的很欠打。\n----\n> 虚构三：![大哥](小萝莉/test.png)\n>> 老子出去一下。\n----\n![test](小萝莉/sda.jpg)\n\n|name|year|\n|-----|-----|\n|blue|20|:\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|<+++>|<++++>|\n|red|18|\n|tearllo|19|\n|blue|20|\n","slug":"小萝莉","published":1,"updated":"2019-10-02T14:34:32.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pk4000jgoz7moy1la1n","content":"<p>注释<br><a id=\"more\"></a></p>\n<h1 id=\"小萝莉\"><a href=\"#小萝莉\" class=\"headerlink\" title=\"小萝莉\"></a>小萝莉</h1><h2 id=\"这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。\"><a href=\"#这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。\" class=\"headerlink\" title=\"这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。\"></a><strong>这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。</strong></h2><blockquote>\n<p>虚构一：</p>\n<blockquote>\n<p>我要是现在说我爱你，你觉得会不会快了一点，还是要慢慢来培养感情？</p>\n<blockquote>\n<p>你只能说好，因为这是我的世界，你们是没有写的权利，只有读的权利，感觉有点熟悉，你们的脑子是怎么运作的我不知道，但老子感觉有点熟悉，因为老子在给你们上课，或许你们可能觉得我在胡乱逼逼，这样的想法是不可有的，在这个世界上想你们这么帅的人已经很少了，或许你现在心里美美的，但对不起，我说的是你旁边的小姐姐，我想她，她是我日思夜想的，没错了，你现在心里想的就是了，你真聪明，就是你以前看过的最可怕的那女鬼。</p>\n<blockquote>\n<p>你现在很怕？想打我？想骂我？这就是你来我这里的原因？我不懂你们的心里，放着这么好的时间不好好珍惜，来我这里看一个小骚年写的无序头文章，你真的有病，难怪小萝莉会找上你，你现在应该拿起你的手机call me （请允许我装个逼）。<br>预知后事如何，请看明天谁第一个发现你的尸体。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>虚构二：</p>\n<blockquote>\n<p>男人要想混得好，头发必须往后倒！这句话就想是。。。等等我音乐有点自闭，感觉是催眠，</p>\n<blockquote>\n<p>老子刚刚出去换歌，怎么了，就是这么任性，年轻，有钱，任性。有点小高调，你想要的，我却不能给你我全部，我能给的却又不是你想要的。我讨厌这么不知好歹的小姐姐，大家都是人，我给你的你要好好拿着，或许就是不要，就这两个选择，不要跟我虚的，磨磨唧唧的，难怪最后受伤的都是你们这些女的，我不一样，因为我是男的，我是属于那种小骚小骚的，具体我是怎么样的我也不清楚，所以，你还是听马克思的话，不要想着去了解一个人，往往这个人心里也是搞不懂自己到底是一个怎么样的人，我之所以会这样，就是不听前人的劝告，你们还是不要去的好，把自己每天搞得充充实实的就好了，那样的你真的很好，虽然平时练习代码的时候很狼狈，但是你运行没bug时，你那一副天下都是你的样子真的很欠打。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>虚构三：<img src=\"//EvanShady.github.io/2019/05/06/小萝莉/test.png\" alt=\"大哥\"></p>\n<blockquote>\n<p>老子出去一下。</p>\n</blockquote>\n</blockquote>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/05/06/小萝莉/sda.jpg\" alt=\"test\"></p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>year</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blue</td>\n<td>20</td>\n<td>:</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>red</td>\n<td>18</td>\n</tr>\n<tr>\n<td>tearllo</td>\n<td>19</td>\n</tr>\n<tr>\n<td>blue</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p>注释<br></p>","more":"<p></p>\n<h1 id=\"小萝莉\"><a href=\"#小萝莉\" class=\"headerlink\" title=\"小萝莉\"></a>小萝莉</h1><h2 id=\"这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。\"><a href=\"#这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。\" class=\"headerlink\" title=\"这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。\"></a><strong>这是一个没有剧本的故事，所以接下来会发生什么，本人也不敢保证，最好小孩要在大人的陪同下阅读的，看什么看，说的就是你，整个一傻逼，有事没事进来看什么东西，说到底，我写的这些就是来满足你们这些小傻逼的，整天无所事事，也不知道给老子找个小萝莉。</strong></h2><blockquote>\n<p>虚构一：</p>\n<blockquote>\n<p>我要是现在说我爱你，你觉得会不会快了一点，还是要慢慢来培养感情？</p>\n<blockquote>\n<p>你只能说好，因为这是我的世界，你们是没有写的权利，只有读的权利，感觉有点熟悉，你们的脑子是怎么运作的我不知道，但老子感觉有点熟悉，因为老子在给你们上课，或许你们可能觉得我在胡乱逼逼，这样的想法是不可有的，在这个世界上想你们这么帅的人已经很少了，或许你现在心里美美的，但对不起，我说的是你旁边的小姐姐，我想她，她是我日思夜想的，没错了，你现在心里想的就是了，你真聪明，就是你以前看过的最可怕的那女鬼。</p>\n<blockquote>\n<p>你现在很怕？想打我？想骂我？这就是你来我这里的原因？我不懂你们的心里，放着这么好的时间不好好珍惜，来我这里看一个小骚年写的无序头文章，你真的有病，难怪小萝莉会找上你，你现在应该拿起你的手机call me （请允许我装个逼）。<br>预知后事如何，请看明天谁第一个发现你的尸体。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>虚构二：</p>\n<blockquote>\n<p>男人要想混得好，头发必须往后倒！这句话就想是。。。等等我音乐有点自闭，感觉是催眠，</p>\n<blockquote>\n<p>老子刚刚出去换歌，怎么了，就是这么任性，年轻，有钱，任性。有点小高调，你想要的，我却不能给你我全部，我能给的却又不是你想要的。我讨厌这么不知好歹的小姐姐，大家都是人，我给你的你要好好拿着，或许就是不要，就这两个选择，不要跟我虚的，磨磨唧唧的，难怪最后受伤的都是你们这些女的，我不一样，因为我是男的，我是属于那种小骚小骚的，具体我是怎么样的我也不清楚，所以，你还是听马克思的话，不要想着去了解一个人，往往这个人心里也是搞不懂自己到底是一个怎么样的人，我之所以会这样，就是不听前人的劝告，你们还是不要去的好，把自己每天搞得充充实实的就好了，那样的你真的很好，虽然平时练习代码的时候很狼狈，但是你运行没bug时，你那一副天下都是你的样子真的很欠打。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>虚构三：<img src=\"//EvanShady.github.io/2019/05/06/小萝莉/test.png\" alt=\"大哥\"></p>\n<blockquote>\n<p>老子出去一下。</p>\n</blockquote>\n</blockquote>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/05/06/小萝莉/sda.jpg\" alt=\"test\"></p>\n<table>\n<thead>\n<tr>\n<th>name</th>\n<th>year</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blue</td>\n<td>20</td>\n<td>:</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>&lt;+++&gt;</td>\n<td>&lt;++++&gt;</td>\n</tr>\n<tr>\n<td>red</td>\n<td>18</td>\n</tr>\n<tr>\n<td>tearllo</td>\n<td>19</td>\n</tr>\n<tr>\n<td>blue</td>\n<td>20</td>\n</tr>\n</tbody>\n</table>"},{"title":"test2","date":"2019-05-31T13:44:22.000Z","_content":"注释\n<!--more-->\n\n![test](test2/desktop.jpg)\n","source":"_posts/test2.md","raw":"---\ntitle: test2\ndate: 2019-05-31 21:44:22\ntags: test\n---\n注释\n<!--more-->\n\n![test](test2/desktop.jpg)\n","slug":"test2","published":1,"updated":"2019-09-10T09:12:17.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pk5000kgoz7prj8ngsp","content":"<p>注释<br><a id=\"more\"></a></p>\n<p><img src=\"//EvanShady.github.io/2019/05/31/test2/desktop.jpg\" alt=\"test\"></p>\n","site":{"data":{}},"excerpt":"<p>注释<br></p>","more":"<p></p>\n<p><img src=\"//EvanShady.github.io/2019/05/31/test2/desktop.jpg\" alt=\"test\"></p>"},{"title":"test","date":"2019-05-19T14:37:18.000Z","_content":"注释\n<!--more-->\n\n# 小新\n\n![小新](test/a.jpg)\n# one\n**我现在有点想睡觉，但也是说给自己看看的，随便也就说说心里话。我刚开始是有点词穷的。但我也不慌，因为我刚刚听到了一首歌的歌词很不错，我刚刚也是想写下来的，但一下子想不起来，这可能是瞬时的记忆，导致我记不起来更细致的记忆，没有梦想何必远方。这是刚刚有出来的歌词，我感觉自己运气还是不错的。因为我最后还是记起来了，有点小开心。**\n\n----\n# two\n我手会出汗，这让我平时有点很不开心，也不能说很吧，但就是自闭，我也不，知道怎么才能不出汗，据说要做个小手术，要割弃汗腺。我怕啊。我的身体还是刚从我妈身体刚出来的时候，~~只是某些地方随着时间的流逝而变大~~这个我也不想的，因为太大了，这在我日常生活中有点不好。很真实，幸好我是靠着墙的，对于我说了那么多，也就只有我一个人看得见，不然我也不会写这些让小姐姐脸红的文字。这个我说的有点肯定了，小姐姐看到了也不一定会脸红，因为现在的小姐姐都是见过大世面的人物，我在她们眼里也就只是小垃圾。\n\n----\n# three\n> 此时此刻我只想吟诗一首\n>> 我随口一说就是古诗\n>>> 当时的李白心里想的肯定是这样的\n>>>> 我是最厉害的，喝酒第一，造人第二，造诗第三。\n>>>>> 但他万万没想到最后自己最不想做的事情的反而实现了。并让后人传颂至今。\n\n----\n# four\n**总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。**\n----\n----\n**本故事纯属虚构，要想逼逼，随时见证，**\n----\n\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2019-05-19 22:37:18\ntags:\n---\n注释\n<!--more-->\n\n# 小新\n\n![小新](test/a.jpg)\n# one\n**我现在有点想睡觉，但也是说给自己看看的，随便也就说说心里话。我刚开始是有点词穷的。但我也不慌，因为我刚刚听到了一首歌的歌词很不错，我刚刚也是想写下来的，但一下子想不起来，这可能是瞬时的记忆，导致我记不起来更细致的记忆，没有梦想何必远方。这是刚刚有出来的歌词，我感觉自己运气还是不错的。因为我最后还是记起来了，有点小开心。**\n\n----\n# two\n我手会出汗，这让我平时有点很不开心，也不能说很吧，但就是自闭，我也不，知道怎么才能不出汗，据说要做个小手术，要割弃汗腺。我怕啊。我的身体还是刚从我妈身体刚出来的时候，~~只是某些地方随着时间的流逝而变大~~这个我也不想的，因为太大了，这在我日常生活中有点不好。很真实，幸好我是靠着墙的，对于我说了那么多，也就只有我一个人看得见，不然我也不会写这些让小姐姐脸红的文字。这个我说的有点肯定了，小姐姐看到了也不一定会脸红，因为现在的小姐姐都是见过大世面的人物，我在她们眼里也就只是小垃圾。\n\n----\n# three\n> 此时此刻我只想吟诗一首\n>> 我随口一说就是古诗\n>>> 当时的李白心里想的肯定是这样的\n>>>> 我是最厉害的，喝酒第一，造人第二，造诗第三。\n>>>>> 但他万万没想到最后自己最不想做的事情的反而实现了。并让后人传颂至今。\n\n----\n# four\n**总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。**\n----\n----\n**本故事纯属虚构，要想逼逼，随时见证，**\n----\n\n","slug":"test","published":1,"updated":"2019-09-12T07:15:56.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pk6000lgoz7eue8rjgh","content":"<p>注释<br><a id=\"more\"></a></p>\n<h1 id=\"小新\"><a href=\"#小新\" class=\"headerlink\" title=\"小新\"></a>小新</h1><p><img src=\"//EvanShady.github.io/2019/05/19/test/a.jpg\" alt=\"小新\"></p>\n<h1 id=\"one\"><a href=\"#one\" class=\"headerlink\" title=\"one\"></a>one</h1><p><strong>我现在有点想睡觉，但也是说给自己看看的，随便也就说说心里话。我刚开始是有点词穷的。但我也不慌，因为我刚刚听到了一首歌的歌词很不错，我刚刚也是想写下来的，但一下子想不起来，这可能是瞬时的记忆，导致我记不起来更细致的记忆，没有梦想何必远方。这是刚刚有出来的歌词，我感觉自己运气还是不错的。因为我最后还是记起来了，有点小开心。</strong></p>\n<hr>\n<h1 id=\"two\"><a href=\"#two\" class=\"headerlink\" title=\"two\"></a>two</h1><p>我手会出汗，这让我平时有点很不开心，也不能说很吧，但就是自闭，我也不，知道怎么才能不出汗，据说要做个小手术，要割弃汗腺。我怕啊。我的身体还是刚从我妈身体刚出来的时候，<del>只是某些地方随着时间的流逝而变大</del>这个我也不想的，因为太大了，这在我日常生活中有点不好。很真实，幸好我是靠着墙的，对于我说了那么多，也就只有我一个人看得见，不然我也不会写这些让小姐姐脸红的文字。这个我说的有点肯定了，小姐姐看到了也不一定会脸红，因为现在的小姐姐都是见过大世面的人物，我在她们眼里也就只是小垃圾。</p>\n<hr>\n<h1 id=\"three\"><a href=\"#three\" class=\"headerlink\" title=\"three\"></a>three</h1><blockquote>\n<p>此时此刻我只想吟诗一首</p>\n<blockquote>\n<p>我随口一说就是古诗</p>\n<blockquote>\n<p>当时的李白心里想的肯定是这样的</p>\n<blockquote>\n<p>我是最厉害的，喝酒第一，造人第二，造诗第三。</p>\n<blockquote>\n<p>但他万万没想到最后自己最不想做的事情的反而实现了。并让后人传颂至今。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<h1 id=\"four\"><a href=\"#four\" class=\"headerlink\" title=\"four\"></a>four</h1><h2 id=\"总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。\"><a href=\"#总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。\" class=\"headerlink\" title=\"总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。\"></a><strong>总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。</strong></h2><hr>\n<h2 id=\"本故事纯属虚构，要想逼逼，随时见证，\"><a href=\"#本故事纯属虚构，要想逼逼，随时见证，\" class=\"headerlink\" title=\"本故事纯属虚构，要想逼逼，随时见证，\"></a><strong>本故事纯属虚构，要想逼逼，随时见证，</strong></h2>","site":{"data":{}},"excerpt":"<p>注释<br></p>","more":"<p></p>\n<h1 id=\"小新\"><a href=\"#小新\" class=\"headerlink\" title=\"小新\"></a>小新</h1><p><img src=\"//EvanShady.github.io/2019/05/19/test/a.jpg\" alt=\"小新\"></p>\n<h1 id=\"one\"><a href=\"#one\" class=\"headerlink\" title=\"one\"></a>one</h1><p><strong>我现在有点想睡觉，但也是说给自己看看的，随便也就说说心里话。我刚开始是有点词穷的。但我也不慌，因为我刚刚听到了一首歌的歌词很不错，我刚刚也是想写下来的，但一下子想不起来，这可能是瞬时的记忆，导致我记不起来更细致的记忆，没有梦想何必远方。这是刚刚有出来的歌词，我感觉自己运气还是不错的。因为我最后还是记起来了，有点小开心。</strong></p>\n<hr>\n<h1 id=\"two\"><a href=\"#two\" class=\"headerlink\" title=\"two\"></a>two</h1><p>我手会出汗，这让我平时有点很不开心，也不能说很吧，但就是自闭，我也不，知道怎么才能不出汗，据说要做个小手术，要割弃汗腺。我怕啊。我的身体还是刚从我妈身体刚出来的时候，<del>只是某些地方随着时间的流逝而变大</del>这个我也不想的，因为太大了，这在我日常生活中有点不好。很真实，幸好我是靠着墙的，对于我说了那么多，也就只有我一个人看得见，不然我也不会写这些让小姐姐脸红的文字。这个我说的有点肯定了，小姐姐看到了也不一定会脸红，因为现在的小姐姐都是见过大世面的人物，我在她们眼里也就只是小垃圾。</p>\n<hr>\n<h1 id=\"three\"><a href=\"#three\" class=\"headerlink\" title=\"three\"></a>three</h1><blockquote>\n<p>此时此刻我只想吟诗一首</p>\n<blockquote>\n<p>我随口一说就是古诗</p>\n<blockquote>\n<p>当时的李白心里想的肯定是这样的</p>\n<blockquote>\n<p>我是最厉害的，喝酒第一，造人第二，造诗第三。</p>\n<blockquote>\n<p>但他万万没想到最后自己最不想做的事情的反而实现了。并让后人传颂至今。</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<h1 id=\"four\"><a href=\"#four\" class=\"headerlink\" title=\"four\"></a>four</h1><h2 id=\"总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。\"><a href=\"#总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。\" class=\"headerlink\" title=\"总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。\"></a><strong>总而言之，言而总之。我现在的精神也没刚刚开始那么懒散，脑子一动，精神就会慢慢起来，就好比此时，我心里是受伤的，但我相信未来的不久我又是自信满满的少年。</strong></h2><hr>\n<h2 id=\"本故事纯属虚构，要想逼逼，随时见证，\"><a href=\"#本故事纯属虚构，要想逼逼，随时见证，\" class=\"headerlink\" title=\"本故事纯属虚构，要想逼逼，随时见证，\"></a><strong>本故事纯属虚构，要想逼逼，随时见证，</strong></h2>"},{"title":"qt","date":"2019-08-05T14:24:37.000Z","_content":"                                                                                                  QT\n<!--more-->\n# Qt\n*图形化界面--GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。*\n----\n```\n#include <QApplication>//使用qt的头文件\n#include <QWidget>//窗口控制基类\n#include <QPushButton>//指定父对象的头文件\nint main(int argc,char *argv[]){\n        QApplication  a(argc,argv);\n        My_widget w;\n        w.setwindowTitle(\"主要看气质\");//文件头名\n        QPushButton b;//声明按钮的类     \n        b.setParent(&w);//让按钮放在父对象的函数\n        b.setText(\"删除\");//声明按钮,并赋值\n        b.move(100,100);//移动按钮\n        QPushButton b1(&w);//使用按钮构造函数并指向父对象\n        b1.setText(\"确认\");//声明按钮,并赋值\n        b1.move(200,200);//移动按钮\n        w.show();//输出函数\n        return app.exec();\n}\n```\n![运行结果](qt/qt1.png)\n\n**值得注意下的就是，如果不给按钮对象指向父对象，两个窗口是独立的。还有上面是用了两种方式来指向父对象，一个是用函数setParent(),另外一个是用构造函数来指向。**\n```\n#include <QApplication>\n#include <QWidget>\n#include <QLabel>\nint main(int argc,char *argv[]){\n            QApplication a(argc,argv);\n            QLabel label(\"Hello\");\n            return a.exec();\n}\n```\n![运行结果](qt/qt2_hello.png)\n\n**上面的代码有点不好，但要是一定要这样的话，那在main函数里面的代码是很多的。这样让别人看起来就有点不好的感觉。**\n**QPushButton--是按钮，QWidget--是窗口**\n* signals--信号(类似与广播，发出信号，如果有对它有意思的，就有connect连接，来把它连接在一起)\n* connect--连接(意思是，用自己的函数(成为槽(solt))来处理这个信号)\n```\n//练练手，长长记性\n//main函数里面的头文件\n#include <QApplication>\n#include <QPushButton>\n#include \"My_Widget.h\"\n\n//是以公有的方式继承了窗口化的类,.h文件\n#include \"sud.h\"\nclass My_Widget:public Widget{\npublic:\n        My_Widget(QWidget *parent =nullptr);\n        ~My_Widget();\n        void showb2();\n        void showwid();\n        void showxin();\nprivate:\n        QPushButton b1;\n        QPushButton *b2;\n        QPushButton b3;\n        sud s;\n}\n//.cpp文件\n#include \"My_Widget.h\"\nMy_Widget::MyWidget(QWidget *parent =nullptr):QWidget(parent){\n        b1.setParent(this);\n        b1.setText(\"^_^\");\n        b1.move(100,100);\n        b2=new QPushButton (this);\n        b2->setText(\"abc\");\n        connect(&b1,&QPushButton::released,this,&QPushButton::close);\n        connect(b2,&QPushButton::released,this,&My_Widget::show);\n        s.show();\n        this->setWindowTitle(\"老大\");\n        b3.setParent(this);\n        b3.setText(\"切换子窗口\");\n        connect(&b3,&QPushButton::released,this,My_Widget::showwid);\n        connect(&s,&sud::xin,this,&My_Widget::showxin);//接收信号并处理信号\n        resize(400,300);\n        //当信号发出时，被连接的槽函数会被回调用来处理信号发出的操作\n}\nvoid My_Widget::showb2(){\n        b2->setText(\"123\");\n}\nvoid My_Widget::showwid(){\n        s.show();\n        this->hide();\n}\nvoid My_Widget::showxin{\n        this->show();\n        s.hide();\n}\n\n//是以公有的方式继承My_Widget类的派生类\n#include <QWidget>\n#include <QPushButton>\nclass sud : public My_Widget{\npublic:\n        explicit*** sud(QWidget *parent =nullptr)\n        void showwid();//用来发射信号的函数\nsignals:\n        void xin();//信号\nprivate:\n        QPushButton b;\n}\nvoid sud::sud(QWidget *parent):QWidget(parent){\n        this->setWindowTitle(\"小弟\");\n        b.setParent(this);\n        b.setText(\"切换父窗口\");\n        connect(&b,QPushButton::clicked,this,&sud::showwid);//发送信号的\n        resize(400,300);\n}\nvoid sud::showwid(){\n        emit xin();\n}\n\n\nint main(int argc,char *argv[] ){\n        QApplication a(argc,argv);\n        My_Widget w;\n        w.show();\n        return a.exec();\n}\n```\n# connect\n* 槽\n1. 任意的成员函数，普通全局函数，静态函数\n2. 槽函数需要与信号一样(返回值和参数)由于信号没有返回值，所以槽函数也没有返回值\n\n* 信号\n1. 信号必须有关键字signals\n2. 信号没有返回值，是个函数,可以有参数\n3. 信号只有声明，无需为信号定义\n4. 使用的方法:使用关键字emit来调用\n* 按钮只是回调了槽函数，而窗口的所有改动都是该窗口改变的，和按钮是没什么关联的。\n\n* 内存\n1. 指定父对象后,直接或间接的继承于Q0bject\n2. 子对象如果动态分配空间(new)，不需要手动释放(delete)，系统会自动调用析构函数\n```\n#include <QMenuBar>//菜单栏\n#include <QMenu>//菜单\n#include <QAction>//控件\n#include <QToolBar>//快捷键\n#include <QDebug>//打印\n#include <QStatusBar>//状态栏\n#include <QLabel>//标签\n#include <QTextEdit>//核心控件\n#include <QDockWidget>//浮动窗口\n* 创建菜单栏和一些控件\n* 以下的代码是在构造函数的里面的，主要是懒得写了。\n        QMenuBar *mbar=menuBar();//声明一个菜单栏\n        Qmenu *f1=mbar->addAction(文件);//在菜单栏里写一个以文件为名的控件\n        QAction *p1=f1->addAction(\"新建\");//在文件里写一个以新建为名的控件\n        connect(p1,&QAction::triggered,//槽函数\n        []()\n        {\n                qDebug()<<\"新建被按下\";\n        });\n        f1->addSeparator();//分割线\n        QAction *p1_2=f1->addAction(\"打开\");//同上\n        Qmenu *f2=mbar->addAction(\"编辑\");\n        QAction *p2=f2->addAction(\"编辑\");\n        connect(p2,&QAction::triggered,\n        []()\n        {\n                qDebug()<<\"编辑被按下\";\n        });\n        QStatusBar *sbar=statusBar();//状态栏，声明状态栏\n        QLabel *label= new QLabel (this);//声明标签\n        sbar ->addAction(new QLabel(\"2\",this));//以从左往右的方式显示2\n        sbar-> addPermanentWidget(new QLabel(\"3\",this));\n        //以从右忘左的方式显示3\n        QTextEdit *text=new QTextEdit(this);//核心控件，也就是文件编辑的地方\n        setCentralWidget(text);\n        QDockWidget *dock=new QDockWidget(this);//浮动窗口\n        addDockWidget(Qt::LeftDockWidget,dock);//在左边显示\n        QTextWidget *text1=new QTextWidget(this);//声明编辑\n        dock->setWidget(text1);//在浮动窗口里显示文件编辑的地方\n\n```\n----\n![运行结果](qt/qt3_caidan.png)\n# 关于对话框\n----\n* 是在继承于MainWindow(主窗口)的类构造函数里\n```\n#include \"QMainWindow\"//继承与主窗口\n#include <QMenuBar>\n#include <Menu>\n#include <QAction>\n#include <QDebug>\n#include <QMessageBox>//对话框的头文件\n#include <QFileDialog>//查找文件的对话框的头文件\nMainWindow::MainWindow(QWinget *parent)\n        :MainWindow(parent){\n                QMenuBar *menub=menubar();\n                QMenu *p1=menub->addmenu(\"文件\");\n                QAction *A1=p1->addaction(\"关于对话框\");\n                connect(A1,&QAction::triggered,\n                [=]()\n                {\n                        QMessageBox ::about(this,\"about\",\"关于Qt\"); \n                        //简单的一个显示对话框\n                }\n                );\n                QAction *A2=p1->addaction(\"问题对话框\");\n                connect(A2,&QAction::triggered,\n                [=]()\n                {\n                        int val=QMessageBox::question(this,\"test\",\"is ok ?\",\n                        QMessageBox::ok|\n                        QMessageBox::Cancel);\n                        //显示一个对话框，调用枚举函数来实现，显示的对话内容可以自己选择，也可以随机匹配，返回值是一个整数类型的，可以定义一个整数来接住函数的返回值，这样载利用switch来做到自己想要的效果\n                }\n                switch (val){\n                        case QMessageBox::ok:\n                        qDebug()<<\"i am ok\";\n                        break;\n                        case QMessageBox::Cancel:\n                        qDebug()<<\"i am bad\";\n                        break;\n                        default:\n                        break;\n                }\n                );\n        }\n        QAction *A3=p1->addaction(\"文件对话框\");\n        connect(A3,&QAction::triggered,\n        [=]()\n        {\n                QFileDialog ::getOpenFileName(this,\"open\",\"/home\",\n                \"test(*.cpp *.md);;file(*.)\");\n                //利用Qt函数来实现查找文件的对话框，加上筛选的效果,来显示查找文件的强大性\n        }\n        );\n```\n![运行结果](qt/qt4_duihua.png)\n\n![运行结果](qt/qt5_duihua.png)\n# ui\n![这些是在ui模式下操作的](qt/qt6_ui.png)\n> **布局**\n----\n**局部布局和全局布局,**\n**一样是在ui的模式下进行的，因为这样比较简单而且实际。**\n----\n![运行结果](qt/qt7_ui.png)\n![运行结果](qt/qt8_ui.png)\n\n**布局最好在ui模式，因为简单！！！**\n----\n![简单的登录方式](qt/qt9_ui.png)\n# 设置\n**接下的操作是在ui的模式下完成的，并继承于Mainwindow**\n```\n#inlcude \"MainWindow.h\"\n#include <ui_mainwindow.h>\n#include <QDebug>//打印的头文件\n#include <QStringList>\n#include <QCompleter>\n\nMainWindow::MainWindow(QWidget *parent):QMainwindow(parent){\n        ui->setupUi(this);\n        //在ui的模式下添加LineEdit(行编辑)\n        QString str=ui->LineEdit->text();//获取一行里的内容\n        qDebug<<str;//打印\n        ui->LineEdit->setText(\"123456\");//设置内容\n        ui->LineEdit->setTextMargins(10,0,0,0);//更改方度(左,右,上,下)\n        ui->LineEdit->setEchomode(QLineEdit::psaaword);//把内容设置为密码的模式\n        QStringLest cin;//声明字符串\n        cin<<\"hello\"<<\"how are you\"<<\"Hehe\";//定义字符串\n        QCompleter *com=new QCompleter (cin,this);//把字符串放进模型里\n        com->setCaseSensitivity(Qt::CaseInsensitive);//把模型设置成不区分大小写\n        ui->LineEdit->setCompleter(com);//把模型加进行编辑\n}\n```\n# 样式\n1 方箱模型\n2 前景和背景\n3 控制大小\n4 创建缩放式\n5 处理伪状态\n**关键字(setStyleSheet)**\n* 创建的是Widget，是在ui的模式下添加了一个label和PushButton。\n```\n// .cpp\n  ui->pushButton->setStyleSheet(\"QPushButton{\"\n  \"color:rgb(0,255,255);\" //设置颜色，自动调制颜色\n  \"backgroud-color:red;\" //设置背景颜色\n  \"border: 2px outset grenn;\"//创建缩放式(设置边框像素，输出设置，输出的颜色)\n  \"border-image:url(:/new/prefix1/头像.jpg);\"//设置成相片，\n \"}\"\n        \"QPushButton:hover{\"//当鼠标抬起就更换照片\n        \"border-image:url(:/new/prefix1/test.jpg)\"\n        \"}\"\n        \"QPushButton:pressed{\"//当鼠标按下就更换照片\n        \"border-image:url(:/new/prefix1/test1.jpg)\"\n        \"}\"\n );\n```\n* border (平铺的方式) \n\n![运行结果](qt/qt10_ui.png)\n![方箱模型](qt/qt11_ui.png)\n![伪状态](qt/qt12_ui.png)\n# Event(事件)\n**事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。**\n----\n```\n// 这里是在ui的模式下添加了label，然后又添加了新文件，最后在ui里把label提升为槽函数而实现的。\n// .h\n#include <QLabel>\nclass Mylabel : public Qlabel{\n        protected://保护的(重写事件里的虚函数)\n        //鼠标按下\n        void mousePressEvent(QMouseEvent *ev);\n        //鼠标抬起\n        void mouseReleaseEvent(QMouseEvent *ev);\n        //鼠标移动\n        void mouseMoveEvent(QMouseEvent *ev);\n        //鼠标在里面\n        void enterEvent(QEvent *);\n        //鼠标在外面\n        void leaveEvent(QEvent *);\n}\n// .cpp\n#include \"Mylabel.h\"\n#include <MouseEvent>//事件的头文件\n#include <QDebug> //打印\nMylabel::Mylabel(QWidget *parent):QLabel(parent){\n        //设置追踪鼠标(设置了鼠标追踪就会在程序里自动追踪鼠标，没有设置的话，你还得在窗口里点一下才能出来数据)\n        this->setMouseTracking(true);\n}\nvoid Mylabel::mousePressEvent(QMouseEvent *ev){\n        int i=ev->x();//x的坐标\n        int j=ev->y();//y的坐标\nQSting str=QString (\"<center><h1>mouse press:(%1,%2)</h1></center>\")\n.arg(i).arg(j);\n// 语法(参数是字符) (center(字体加粗))\nthis->setText(str);//设置\nif(ev->Button()==Qt::LefeButton){//判断鼠标按钮在左边，右边，中间\n        qDebug()<<\"left\";\n}else if(ev->Button()==Qt::RightNutton){\n        qDebug()<<\"right\";\n}else if(ev->Button()==Qt::MidButton){\n        qDebug()<<\"wid\";\n}\nvoid Mylabel::mouseReleaseEvent(QMouseEvent *ev){\nQSting str=QString (\"<center><h1>mouse press:(%1,%2)</h1></center>\")\n.arg(ev->x()).arg(ev->y());\nthis->setText(str);\n}\nvoid Mylabel::mouseMoveEvent(QMouseEvent *ev){\n\nQSting str=QString (\"<center><h1>mouse move:(%1,%2)</h1></center>\")\n.arg(ev->x()).arg(ev->y());\nthis->setText(str);\n}\nvoid Mylabel::enterEvent(QEvent *e){\n        QString str=QString(\"<center><h1>Event:enter</h1></center>\");\n        this->setText(str);\n}\nvoid Mtlabel::lavceEvent(QEvent *e){\n        QString str=QString(\"<center><h1>Event:leave</h1><.center>\");\n        this->setText(str);\n}\n}\n```\n![运行结果](qt/qtEvent.png)\n\n![运行结果](qt/qtEvent1.png)\n\n![运行结果](qt/qtEvent2.png)\n\n![运行结果](qt/qtEvent3.png)\n> 时间的处理与忽略\n* 继承于widget的前提下，简写。\n```\n// .h\nvoid closeEvent (QEvent *event);//关闭事件\n// .cpp\n#include \"Widget.h\"\n#include <QMessageBox>//对话框头文件\nvoid Widget::closeEvent(QEvent *event){\n        int test=QMessageBox::question(this , \"question\",\"sure?\",\n        QMessageBox::Yes |\n        QMessageBox::No);\n        if(test==QMessageBox::Yes){\n                event->accept();//处理\n        }else{\n                event->ignore();//忽略\n        }\n\n}\n```\n![运行结果](qt/qtEvent4.png)\n# 绘画\n![运行的程序](qt/qtEventpainter1.png)\n![运行的结果](qt/qtEventpainter2.png)\n\n# 绘图设备\n* Pixmap(在平台上不能对图片进行修改)\n* Image(和平台无关平台上，可以对图片进行修改)\n* picture(保存绘图的状态，以二进制的文件进行保存)\n\n![pixmap](qt/qt_pixmap.png)\n![image](qt/qt_image.png)\n![picture](qt/qt_picture1.png)\n![picture](qt/qt_picture.png)\n![[icture]](qt/qt_picture2.png)\n\n**其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。**\n----\n> QPixmap&&QImage\n\n![](qt/qtzhuan.png)\n\n![](qt/qt_zhuan1.png)\n----\n# 不规则的窗口\n![程序](qt/qt_paint.png)\n![结果](qt/qt_paint1.png)\n\n**绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备(this)。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画(QPixmap(保存的是图片),QImage(保存的是图片),Qpicture(保存的是二进制文件))，save(保存),load(加载)，Rect(矩形)。**\n ----\n# File\n**不管在那个语言上，文件的操作都有一定的重要性，所以就把它学好。**\n* 普通的形式写读文件()\n\n```\n// 用到的头文件\n#include <QFile>\n#include <QFileDialg>\n#include <QFileInfo>\n```\n![](qt/qtFILE.png)\n![](qt/qtreadfile.png)\n![](qt/qtwritefile.png)\n* 是以二进制的形式保存文件\n```\n// 用到的头文件\n#include <QFile>\n#include <QDatestram>\n```\n![](qt/qt_Stream.png)\n# Server\n**记得在项目文件里加(network),这是针对于在类对象里没有提示。还有就是连则表达式(CONFIG+=c++11)**\n----\n![](qt/qt_server.png)\n**写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。**\n----\n```\n//用到的头文件\n#include <QTcpServer>\n#include <QTcpsocket>\n```\n![serven](qt/qt_tcpserven.png)\n![server](qt/qt_tcpserven1.png)\n![客户端](qt/qt_tcpserven2.png)\n**其实在上面的刚开始的第一张图就很清晰的讲到了tcp的连接过程，只要我们真的理解了就能看的明白。在这里也没什么好解释的，有很多的函数都是在函数里订好了的，只要我们搞清楚什么时候调用什么函数就行了。**\n> UDP\n* 它是面向无连接的通信，所以在这里就只需要通信的套接字(socket)。\n```\n// 用到的头文件\n#include <QUdpSocket> //.h(不要忘记在.h文件里声明socket套接字)\n#include <QHostAddress>// .cpp\n```\n![程序](qt/qt_udp1.png)\n![程序](qt/qt_udp2.png)\n![运行结果](qt/qt_udp.png)\n# tcpfile\n![流程图](qt/qt_tcpfile.png)\n**值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。**\n----\n# QThread\n**connect的第五个参数的意义(默认，队列，直接)默认的时候：分为多线程(默认使用队列)和单线程(默认使用直接)。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。** \n----\n","source":"_posts/qt.md","raw":"---\ntitle: qt\ndate: 2019-08-05 22:24:37\ntags:\n---\n                                                                                                  QT\n<!--more-->\n# Qt\n*图形化界面--GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。*\n----\n```\n#include <QApplication>//使用qt的头文件\n#include <QWidget>//窗口控制基类\n#include <QPushButton>//指定父对象的头文件\nint main(int argc,char *argv[]){\n        QApplication  a(argc,argv);\n        My_widget w;\n        w.setwindowTitle(\"主要看气质\");//文件头名\n        QPushButton b;//声明按钮的类     \n        b.setParent(&w);//让按钮放在父对象的函数\n        b.setText(\"删除\");//声明按钮,并赋值\n        b.move(100,100);//移动按钮\n        QPushButton b1(&w);//使用按钮构造函数并指向父对象\n        b1.setText(\"确认\");//声明按钮,并赋值\n        b1.move(200,200);//移动按钮\n        w.show();//输出函数\n        return app.exec();\n}\n```\n![运行结果](qt/qt1.png)\n\n**值得注意下的就是，如果不给按钮对象指向父对象，两个窗口是独立的。还有上面是用了两种方式来指向父对象，一个是用函数setParent(),另外一个是用构造函数来指向。**\n```\n#include <QApplication>\n#include <QWidget>\n#include <QLabel>\nint main(int argc,char *argv[]){\n            QApplication a(argc,argv);\n            QLabel label(\"Hello\");\n            return a.exec();\n}\n```\n![运行结果](qt/qt2_hello.png)\n\n**上面的代码有点不好，但要是一定要这样的话，那在main函数里面的代码是很多的。这样让别人看起来就有点不好的感觉。**\n**QPushButton--是按钮，QWidget--是窗口**\n* signals--信号(类似与广播，发出信号，如果有对它有意思的，就有connect连接，来把它连接在一起)\n* connect--连接(意思是，用自己的函数(成为槽(solt))来处理这个信号)\n```\n//练练手，长长记性\n//main函数里面的头文件\n#include <QApplication>\n#include <QPushButton>\n#include \"My_Widget.h\"\n\n//是以公有的方式继承了窗口化的类,.h文件\n#include \"sud.h\"\nclass My_Widget:public Widget{\npublic:\n        My_Widget(QWidget *parent =nullptr);\n        ~My_Widget();\n        void showb2();\n        void showwid();\n        void showxin();\nprivate:\n        QPushButton b1;\n        QPushButton *b2;\n        QPushButton b3;\n        sud s;\n}\n//.cpp文件\n#include \"My_Widget.h\"\nMy_Widget::MyWidget(QWidget *parent =nullptr):QWidget(parent){\n        b1.setParent(this);\n        b1.setText(\"^_^\");\n        b1.move(100,100);\n        b2=new QPushButton (this);\n        b2->setText(\"abc\");\n        connect(&b1,&QPushButton::released,this,&QPushButton::close);\n        connect(b2,&QPushButton::released,this,&My_Widget::show);\n        s.show();\n        this->setWindowTitle(\"老大\");\n        b3.setParent(this);\n        b3.setText(\"切换子窗口\");\n        connect(&b3,&QPushButton::released,this,My_Widget::showwid);\n        connect(&s,&sud::xin,this,&My_Widget::showxin);//接收信号并处理信号\n        resize(400,300);\n        //当信号发出时，被连接的槽函数会被回调用来处理信号发出的操作\n}\nvoid My_Widget::showb2(){\n        b2->setText(\"123\");\n}\nvoid My_Widget::showwid(){\n        s.show();\n        this->hide();\n}\nvoid My_Widget::showxin{\n        this->show();\n        s.hide();\n}\n\n//是以公有的方式继承My_Widget类的派生类\n#include <QWidget>\n#include <QPushButton>\nclass sud : public My_Widget{\npublic:\n        explicit*** sud(QWidget *parent =nullptr)\n        void showwid();//用来发射信号的函数\nsignals:\n        void xin();//信号\nprivate:\n        QPushButton b;\n}\nvoid sud::sud(QWidget *parent):QWidget(parent){\n        this->setWindowTitle(\"小弟\");\n        b.setParent(this);\n        b.setText(\"切换父窗口\");\n        connect(&b,QPushButton::clicked,this,&sud::showwid);//发送信号的\n        resize(400,300);\n}\nvoid sud::showwid(){\n        emit xin();\n}\n\n\nint main(int argc,char *argv[] ){\n        QApplication a(argc,argv);\n        My_Widget w;\n        w.show();\n        return a.exec();\n}\n```\n# connect\n* 槽\n1. 任意的成员函数，普通全局函数，静态函数\n2. 槽函数需要与信号一样(返回值和参数)由于信号没有返回值，所以槽函数也没有返回值\n\n* 信号\n1. 信号必须有关键字signals\n2. 信号没有返回值，是个函数,可以有参数\n3. 信号只有声明，无需为信号定义\n4. 使用的方法:使用关键字emit来调用\n* 按钮只是回调了槽函数，而窗口的所有改动都是该窗口改变的，和按钮是没什么关联的。\n\n* 内存\n1. 指定父对象后,直接或间接的继承于Q0bject\n2. 子对象如果动态分配空间(new)，不需要手动释放(delete)，系统会自动调用析构函数\n```\n#include <QMenuBar>//菜单栏\n#include <QMenu>//菜单\n#include <QAction>//控件\n#include <QToolBar>//快捷键\n#include <QDebug>//打印\n#include <QStatusBar>//状态栏\n#include <QLabel>//标签\n#include <QTextEdit>//核心控件\n#include <QDockWidget>//浮动窗口\n* 创建菜单栏和一些控件\n* 以下的代码是在构造函数的里面的，主要是懒得写了。\n        QMenuBar *mbar=menuBar();//声明一个菜单栏\n        Qmenu *f1=mbar->addAction(文件);//在菜单栏里写一个以文件为名的控件\n        QAction *p1=f1->addAction(\"新建\");//在文件里写一个以新建为名的控件\n        connect(p1,&QAction::triggered,//槽函数\n        []()\n        {\n                qDebug()<<\"新建被按下\";\n        });\n        f1->addSeparator();//分割线\n        QAction *p1_2=f1->addAction(\"打开\");//同上\n        Qmenu *f2=mbar->addAction(\"编辑\");\n        QAction *p2=f2->addAction(\"编辑\");\n        connect(p2,&QAction::triggered,\n        []()\n        {\n                qDebug()<<\"编辑被按下\";\n        });\n        QStatusBar *sbar=statusBar();//状态栏，声明状态栏\n        QLabel *label= new QLabel (this);//声明标签\n        sbar ->addAction(new QLabel(\"2\",this));//以从左往右的方式显示2\n        sbar-> addPermanentWidget(new QLabel(\"3\",this));\n        //以从右忘左的方式显示3\n        QTextEdit *text=new QTextEdit(this);//核心控件，也就是文件编辑的地方\n        setCentralWidget(text);\n        QDockWidget *dock=new QDockWidget(this);//浮动窗口\n        addDockWidget(Qt::LeftDockWidget,dock);//在左边显示\n        QTextWidget *text1=new QTextWidget(this);//声明编辑\n        dock->setWidget(text1);//在浮动窗口里显示文件编辑的地方\n\n```\n----\n![运行结果](qt/qt3_caidan.png)\n# 关于对话框\n----\n* 是在继承于MainWindow(主窗口)的类构造函数里\n```\n#include \"QMainWindow\"//继承与主窗口\n#include <QMenuBar>\n#include <Menu>\n#include <QAction>\n#include <QDebug>\n#include <QMessageBox>//对话框的头文件\n#include <QFileDialog>//查找文件的对话框的头文件\nMainWindow::MainWindow(QWinget *parent)\n        :MainWindow(parent){\n                QMenuBar *menub=menubar();\n                QMenu *p1=menub->addmenu(\"文件\");\n                QAction *A1=p1->addaction(\"关于对话框\");\n                connect(A1,&QAction::triggered,\n                [=]()\n                {\n                        QMessageBox ::about(this,\"about\",\"关于Qt\"); \n                        //简单的一个显示对话框\n                }\n                );\n                QAction *A2=p1->addaction(\"问题对话框\");\n                connect(A2,&QAction::triggered,\n                [=]()\n                {\n                        int val=QMessageBox::question(this,\"test\",\"is ok ?\",\n                        QMessageBox::ok|\n                        QMessageBox::Cancel);\n                        //显示一个对话框，调用枚举函数来实现，显示的对话内容可以自己选择，也可以随机匹配，返回值是一个整数类型的，可以定义一个整数来接住函数的返回值，这样载利用switch来做到自己想要的效果\n                }\n                switch (val){\n                        case QMessageBox::ok:\n                        qDebug()<<\"i am ok\";\n                        break;\n                        case QMessageBox::Cancel:\n                        qDebug()<<\"i am bad\";\n                        break;\n                        default:\n                        break;\n                }\n                );\n        }\n        QAction *A3=p1->addaction(\"文件对话框\");\n        connect(A3,&QAction::triggered,\n        [=]()\n        {\n                QFileDialog ::getOpenFileName(this,\"open\",\"/home\",\n                \"test(*.cpp *.md);;file(*.)\");\n                //利用Qt函数来实现查找文件的对话框，加上筛选的效果,来显示查找文件的强大性\n        }\n        );\n```\n![运行结果](qt/qt4_duihua.png)\n\n![运行结果](qt/qt5_duihua.png)\n# ui\n![这些是在ui模式下操作的](qt/qt6_ui.png)\n> **布局**\n----\n**局部布局和全局布局,**\n**一样是在ui的模式下进行的，因为这样比较简单而且实际。**\n----\n![运行结果](qt/qt7_ui.png)\n![运行结果](qt/qt8_ui.png)\n\n**布局最好在ui模式，因为简单！！！**\n----\n![简单的登录方式](qt/qt9_ui.png)\n# 设置\n**接下的操作是在ui的模式下完成的，并继承于Mainwindow**\n```\n#inlcude \"MainWindow.h\"\n#include <ui_mainwindow.h>\n#include <QDebug>//打印的头文件\n#include <QStringList>\n#include <QCompleter>\n\nMainWindow::MainWindow(QWidget *parent):QMainwindow(parent){\n        ui->setupUi(this);\n        //在ui的模式下添加LineEdit(行编辑)\n        QString str=ui->LineEdit->text();//获取一行里的内容\n        qDebug<<str;//打印\n        ui->LineEdit->setText(\"123456\");//设置内容\n        ui->LineEdit->setTextMargins(10,0,0,0);//更改方度(左,右,上,下)\n        ui->LineEdit->setEchomode(QLineEdit::psaaword);//把内容设置为密码的模式\n        QStringLest cin;//声明字符串\n        cin<<\"hello\"<<\"how are you\"<<\"Hehe\";//定义字符串\n        QCompleter *com=new QCompleter (cin,this);//把字符串放进模型里\n        com->setCaseSensitivity(Qt::CaseInsensitive);//把模型设置成不区分大小写\n        ui->LineEdit->setCompleter(com);//把模型加进行编辑\n}\n```\n# 样式\n1 方箱模型\n2 前景和背景\n3 控制大小\n4 创建缩放式\n5 处理伪状态\n**关键字(setStyleSheet)**\n* 创建的是Widget，是在ui的模式下添加了一个label和PushButton。\n```\n// .cpp\n  ui->pushButton->setStyleSheet(\"QPushButton{\"\n  \"color:rgb(0,255,255);\" //设置颜色，自动调制颜色\n  \"backgroud-color:red;\" //设置背景颜色\n  \"border: 2px outset grenn;\"//创建缩放式(设置边框像素，输出设置，输出的颜色)\n  \"border-image:url(:/new/prefix1/头像.jpg);\"//设置成相片，\n \"}\"\n        \"QPushButton:hover{\"//当鼠标抬起就更换照片\n        \"border-image:url(:/new/prefix1/test.jpg)\"\n        \"}\"\n        \"QPushButton:pressed{\"//当鼠标按下就更换照片\n        \"border-image:url(:/new/prefix1/test1.jpg)\"\n        \"}\"\n );\n```\n* border (平铺的方式) \n\n![运行结果](qt/qt10_ui.png)\n![方箱模型](qt/qt11_ui.png)\n![伪状态](qt/qt12_ui.png)\n# Event(事件)\n**事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。**\n----\n```\n// 这里是在ui的模式下添加了label，然后又添加了新文件，最后在ui里把label提升为槽函数而实现的。\n// .h\n#include <QLabel>\nclass Mylabel : public Qlabel{\n        protected://保护的(重写事件里的虚函数)\n        //鼠标按下\n        void mousePressEvent(QMouseEvent *ev);\n        //鼠标抬起\n        void mouseReleaseEvent(QMouseEvent *ev);\n        //鼠标移动\n        void mouseMoveEvent(QMouseEvent *ev);\n        //鼠标在里面\n        void enterEvent(QEvent *);\n        //鼠标在外面\n        void leaveEvent(QEvent *);\n}\n// .cpp\n#include \"Mylabel.h\"\n#include <MouseEvent>//事件的头文件\n#include <QDebug> //打印\nMylabel::Mylabel(QWidget *parent):QLabel(parent){\n        //设置追踪鼠标(设置了鼠标追踪就会在程序里自动追踪鼠标，没有设置的话，你还得在窗口里点一下才能出来数据)\n        this->setMouseTracking(true);\n}\nvoid Mylabel::mousePressEvent(QMouseEvent *ev){\n        int i=ev->x();//x的坐标\n        int j=ev->y();//y的坐标\nQSting str=QString (\"<center><h1>mouse press:(%1,%2)</h1></center>\")\n.arg(i).arg(j);\n// 语法(参数是字符) (center(字体加粗))\nthis->setText(str);//设置\nif(ev->Button()==Qt::LefeButton){//判断鼠标按钮在左边，右边，中间\n        qDebug()<<\"left\";\n}else if(ev->Button()==Qt::RightNutton){\n        qDebug()<<\"right\";\n}else if(ev->Button()==Qt::MidButton){\n        qDebug()<<\"wid\";\n}\nvoid Mylabel::mouseReleaseEvent(QMouseEvent *ev){\nQSting str=QString (\"<center><h1>mouse press:(%1,%2)</h1></center>\")\n.arg(ev->x()).arg(ev->y());\nthis->setText(str);\n}\nvoid Mylabel::mouseMoveEvent(QMouseEvent *ev){\n\nQSting str=QString (\"<center><h1>mouse move:(%1,%2)</h1></center>\")\n.arg(ev->x()).arg(ev->y());\nthis->setText(str);\n}\nvoid Mylabel::enterEvent(QEvent *e){\n        QString str=QString(\"<center><h1>Event:enter</h1></center>\");\n        this->setText(str);\n}\nvoid Mtlabel::lavceEvent(QEvent *e){\n        QString str=QString(\"<center><h1>Event:leave</h1><.center>\");\n        this->setText(str);\n}\n}\n```\n![运行结果](qt/qtEvent.png)\n\n![运行结果](qt/qtEvent1.png)\n\n![运行结果](qt/qtEvent2.png)\n\n![运行结果](qt/qtEvent3.png)\n> 时间的处理与忽略\n* 继承于widget的前提下，简写。\n```\n// .h\nvoid closeEvent (QEvent *event);//关闭事件\n// .cpp\n#include \"Widget.h\"\n#include <QMessageBox>//对话框头文件\nvoid Widget::closeEvent(QEvent *event){\n        int test=QMessageBox::question(this , \"question\",\"sure?\",\n        QMessageBox::Yes |\n        QMessageBox::No);\n        if(test==QMessageBox::Yes){\n                event->accept();//处理\n        }else{\n                event->ignore();//忽略\n        }\n\n}\n```\n![运行结果](qt/qtEvent4.png)\n# 绘画\n![运行的程序](qt/qtEventpainter1.png)\n![运行的结果](qt/qtEventpainter2.png)\n\n# 绘图设备\n* Pixmap(在平台上不能对图片进行修改)\n* Image(和平台无关平台上，可以对图片进行修改)\n* picture(保存绘图的状态，以二进制的文件进行保存)\n\n![pixmap](qt/qt_pixmap.png)\n![image](qt/qt_image.png)\n![picture](qt/qt_picture1.png)\n![picture](qt/qt_picture.png)\n![[icture]](qt/qt_picture2.png)\n\n**其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。**\n----\n> QPixmap&&QImage\n\n![](qt/qtzhuan.png)\n\n![](qt/qt_zhuan1.png)\n----\n# 不规则的窗口\n![程序](qt/qt_paint.png)\n![结果](qt/qt_paint1.png)\n\n**绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备(this)。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画(QPixmap(保存的是图片),QImage(保存的是图片),Qpicture(保存的是二进制文件))，save(保存),load(加载)，Rect(矩形)。**\n ----\n# File\n**不管在那个语言上，文件的操作都有一定的重要性，所以就把它学好。**\n* 普通的形式写读文件()\n\n```\n// 用到的头文件\n#include <QFile>\n#include <QFileDialg>\n#include <QFileInfo>\n```\n![](qt/qtFILE.png)\n![](qt/qtreadfile.png)\n![](qt/qtwritefile.png)\n* 是以二进制的形式保存文件\n```\n// 用到的头文件\n#include <QFile>\n#include <QDatestram>\n```\n![](qt/qt_Stream.png)\n# Server\n**记得在项目文件里加(network),这是针对于在类对象里没有提示。还有就是连则表达式(CONFIG+=c++11)**\n----\n![](qt/qt_server.png)\n**写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。**\n----\n```\n//用到的头文件\n#include <QTcpServer>\n#include <QTcpsocket>\n```\n![serven](qt/qt_tcpserven.png)\n![server](qt/qt_tcpserven1.png)\n![客户端](qt/qt_tcpserven2.png)\n**其实在上面的刚开始的第一张图就很清晰的讲到了tcp的连接过程，只要我们真的理解了就能看的明白。在这里也没什么好解释的，有很多的函数都是在函数里订好了的，只要我们搞清楚什么时候调用什么函数就行了。**\n> UDP\n* 它是面向无连接的通信，所以在这里就只需要通信的套接字(socket)。\n```\n// 用到的头文件\n#include <QUdpSocket> //.h(不要忘记在.h文件里声明socket套接字)\n#include <QHostAddress>// .cpp\n```\n![程序](qt/qt_udp1.png)\n![程序](qt/qt_udp2.png)\n![运行结果](qt/qt_udp.png)\n# tcpfile\n![流程图](qt/qt_tcpfile.png)\n**值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。**\n----\n# QThread\n**connect的第五个参数的意义(默认，队列，直接)默认的时候：分为多线程(默认使用队列)和单线程(默认使用直接)。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。** \n----\n","slug":"qt","published":1,"updated":"2019-09-12T07:17:17.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2lt9pk7000ngoz75g9hzs3n","content":"<pre><code>QT\n</code></pre><a id=\"more\"></a>\n<h1 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h1><h2 id=\"图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。\"><a href=\"#图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。\" class=\"headerlink\" title=\"图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。\"></a><em>图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。</em></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QApplication&gt;//使用qt的头文件</span><br><span class=\"line\">#include &lt;QWidget&gt;//窗口控制基类</span><br><span class=\"line\">#include &lt;QPushButton&gt;//指定父对象的头文件</span><br><span class=\"line\">int main(int argc,char *argv[])&#123;</span><br><span class=\"line\">        QApplication  a(argc,argv);</span><br><span class=\"line\">        My_widget w;</span><br><span class=\"line\">        w.setwindowTitle(&quot;主要看气质&quot;);//文件头名</span><br><span class=\"line\">        QPushButton b;//声明按钮的类     </span><br><span class=\"line\">        b.setParent(&amp;w);//让按钮放在父对象的函数</span><br><span class=\"line\">        b.setText(&quot;删除&quot;);//声明按钮,并赋值</span><br><span class=\"line\">        b.move(100,100);//移动按钮</span><br><span class=\"line\">        QPushButton b1(&amp;w);//使用按钮构造函数并指向父对象</span><br><span class=\"line\">        b1.setText(&quot;确认&quot;);//声明按钮,并赋值</span><br><span class=\"line\">        b1.move(200,200);//移动按钮</span><br><span class=\"line\">        w.show();//输出函数</span><br><span class=\"line\">        return app.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt1.png\" alt=\"运行结果\"></p>\n<p><strong>值得注意下的就是，如果不给按钮对象指向父对象，两个窗口是独立的。还有上面是用了两种方式来指向父对象，一个是用函数setParent(),另外一个是用构造函数来指向。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QApplication&gt;</span><br><span class=\"line\">#include &lt;QWidget&gt;</span><br><span class=\"line\">#include &lt;QLabel&gt;</span><br><span class=\"line\">int main(int argc,char *argv[])&#123;</span><br><span class=\"line\">            QApplication a(argc,argv);</span><br><span class=\"line\">            QLabel label(&quot;Hello&quot;);</span><br><span class=\"line\">            return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt2_hello.png\" alt=\"运行结果\"></p>\n<p><strong>上面的代码有点不好，但要是一定要这样的话，那在main函数里面的代码是很多的。这样让别人看起来就有点不好的感觉。</strong><br><strong>QPushButton–是按钮，QWidget–是窗口</strong></p>\n<ul>\n<li>signals–信号(类似与广播，发出信号，如果有对它有意思的，就有connect连接，来把它连接在一起)</li>\n<li>connect–连接(意思是，用自己的函数(成为槽(solt))来处理这个信号)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//练练手，长长记性</span><br><span class=\"line\">//main函数里面的头文件</span><br><span class=\"line\">#include &lt;QApplication&gt;</span><br><span class=\"line\">#include &lt;QPushButton&gt;</span><br><span class=\"line\">#include &quot;My_Widget.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//是以公有的方式继承了窗口化的类,.h文件</span><br><span class=\"line\">#include &quot;sud.h&quot;</span><br><span class=\"line\">class My_Widget:public Widget&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">        My_Widget(QWidget *parent =nullptr);</span><br><span class=\"line\">        ~My_Widget();</span><br><span class=\"line\">        void showb2();</span><br><span class=\"line\">        void showwid();</span><br><span class=\"line\">        void showxin();</span><br><span class=\"line\">private:</span><br><span class=\"line\">        QPushButton b1;</span><br><span class=\"line\">        QPushButton *b2;</span><br><span class=\"line\">        QPushButton b3;</span><br><span class=\"line\">        sud s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//.cpp文件</span><br><span class=\"line\">#include &quot;My_Widget.h&quot;</span><br><span class=\"line\">My_Widget::MyWidget(QWidget *parent =nullptr):QWidget(parent)&#123;</span><br><span class=\"line\">        b1.setParent(this);</span><br><span class=\"line\">        b1.setText(&quot;^_^&quot;);</span><br><span class=\"line\">        b1.move(100,100);</span><br><span class=\"line\">        b2=new QPushButton (this);</span><br><span class=\"line\">        b2-&gt;setText(&quot;abc&quot;);</span><br><span class=\"line\">        connect(&amp;b1,&amp;QPushButton::released,this,&amp;QPushButton::close);</span><br><span class=\"line\">        connect(b2,&amp;QPushButton::released,this,&amp;My_Widget::show);</span><br><span class=\"line\">        s.show();</span><br><span class=\"line\">        this-&gt;setWindowTitle(&quot;老大&quot;);</span><br><span class=\"line\">        b3.setParent(this);</span><br><span class=\"line\">        b3.setText(&quot;切换子窗口&quot;);</span><br><span class=\"line\">        connect(&amp;b3,&amp;QPushButton::released,this,My_Widget::showwid);</span><br><span class=\"line\">        connect(&amp;s,&amp;sud::xin,this,&amp;My_Widget::showxin);//接收信号并处理信号</span><br><span class=\"line\">        resize(400,300);</span><br><span class=\"line\">        //当信号发出时，被连接的槽函数会被回调用来处理信号发出的操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void My_Widget::showb2()&#123;</span><br><span class=\"line\">        b2-&gt;setText(&quot;123&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void My_Widget::showwid()&#123;</span><br><span class=\"line\">        s.show();</span><br><span class=\"line\">        this-&gt;hide();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void My_Widget::showxin&#123;</span><br><span class=\"line\">        this-&gt;show();</span><br><span class=\"line\">        s.hide();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//是以公有的方式继承My_Widget类的派生类</span><br><span class=\"line\">#include &lt;QWidget&gt;</span><br><span class=\"line\">#include &lt;QPushButton&gt;</span><br><span class=\"line\">class sud : public My_Widget&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">        explicit*** sud(QWidget *parent =nullptr)</span><br><span class=\"line\">        void showwid();//用来发射信号的函数</span><br><span class=\"line\">signals:</span><br><span class=\"line\">        void xin();//信号</span><br><span class=\"line\">private:</span><br><span class=\"line\">        QPushButton b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void sud::sud(QWidget *parent):QWidget(parent)&#123;</span><br><span class=\"line\">        this-&gt;setWindowTitle(&quot;小弟&quot;);</span><br><span class=\"line\">        b.setParent(this);</span><br><span class=\"line\">        b.setText(&quot;切换父窗口&quot;);</span><br><span class=\"line\">        connect(&amp;b,QPushButton::clicked,this,&amp;sud::showwid);//发送信号的</span><br><span class=\"line\">        resize(400,300);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void sud::showwid()&#123;</span><br><span class=\"line\">        emit xin();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc,char *argv[] )&#123;</span><br><span class=\"line\">        QApplication a(argc,argv);</span><br><span class=\"line\">        My_Widget w;</span><br><span class=\"line\">        w.show();</span><br><span class=\"line\">        return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h1><ul>\n<li>槽</li>\n</ul>\n<ol>\n<li>任意的成员函数，普通全局函数，静态函数</li>\n<li>槽函数需要与信号一样(返回值和参数)由于信号没有返回值，所以槽函数也没有返回值</li>\n</ol>\n<ul>\n<li>信号</li>\n</ul>\n<ol>\n<li>信号必须有关键字signals</li>\n<li>信号没有返回值，是个函数,可以有参数</li>\n<li>信号只有声明，无需为信号定义</li>\n<li>使用的方法:使用关键字emit来调用</li>\n</ol>\n<ul>\n<li><p>按钮只是回调了槽函数，而窗口的所有改动都是该窗口改变的，和按钮是没什么关联的。</p>\n</li>\n<li><p>内存</p>\n</li>\n</ul>\n<ol>\n<li>指定父对象后,直接或间接的继承于Q0bject</li>\n<li>子对象如果动态分配空间(new)，不需要手动释放(delete)，系统会自动调用析构函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QMenuBar&gt;//菜单栏</span><br><span class=\"line\">#include &lt;QMenu&gt;//菜单</span><br><span class=\"line\">#include &lt;QAction&gt;//控件</span><br><span class=\"line\">#include &lt;QToolBar&gt;//快捷键</span><br><span class=\"line\">#include &lt;QDebug&gt;//打印</span><br><span class=\"line\">#include &lt;QStatusBar&gt;//状态栏</span><br><span class=\"line\">#include &lt;QLabel&gt;//标签</span><br><span class=\"line\">#include &lt;QTextEdit&gt;//核心控件</span><br><span class=\"line\">#include &lt;QDockWidget&gt;//浮动窗口</span><br><span class=\"line\">* 创建菜单栏和一些控件</span><br><span class=\"line\">* 以下的代码是在构造函数的里面的，主要是懒得写了。</span><br><span class=\"line\">        QMenuBar *mbar=menuBar();//声明一个菜单栏</span><br><span class=\"line\">        Qmenu *f1=mbar-&gt;addAction(文件);//在菜单栏里写一个以文件为名的控件</span><br><span class=\"line\">        QAction *p1=f1-&gt;addAction(&quot;新建&quot;);//在文件里写一个以新建为名的控件</span><br><span class=\"line\">        connect(p1,&amp;QAction::triggered,//槽函数</span><br><span class=\"line\">        []()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                qDebug()&lt;&lt;&quot;新建被按下&quot;;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        f1-&gt;addSeparator();//分割线</span><br><span class=\"line\">        QAction *p1_2=f1-&gt;addAction(&quot;打开&quot;);//同上</span><br><span class=\"line\">        Qmenu *f2=mbar-&gt;addAction(&quot;编辑&quot;);</span><br><span class=\"line\">        QAction *p2=f2-&gt;addAction(&quot;编辑&quot;);</span><br><span class=\"line\">        connect(p2,&amp;QAction::triggered,</span><br><span class=\"line\">        []()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                qDebug()&lt;&lt;&quot;编辑被按下&quot;;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        QStatusBar *sbar=statusBar();//状态栏，声明状态栏</span><br><span class=\"line\">        QLabel *label= new QLabel (this);//声明标签</span><br><span class=\"line\">        sbar -&gt;addAction(new QLabel(&quot;2&quot;,this));//以从左往右的方式显示2</span><br><span class=\"line\">        sbar-&gt; addPermanentWidget(new QLabel(&quot;3&quot;,this));</span><br><span class=\"line\">        //以从右忘左的方式显示3</span><br><span class=\"line\">        QTextEdit *text=new QTextEdit(this);//核心控件，也就是文件编辑的地方</span><br><span class=\"line\">        setCentralWidget(text);</span><br><span class=\"line\">        QDockWidget *dock=new QDockWidget(this);//浮动窗口</span><br><span class=\"line\">        addDockWidget(Qt::LeftDockWidget,dock);//在左边显示</span><br><span class=\"line\">        QTextWidget *text1=new QTextWidget(this);//声明编辑</span><br><span class=\"line\">        dock-&gt;setWidget(text1);//在浮动窗口里显示文件编辑的地方</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt3_caidan.png\" alt=\"运行结果\"></p>\n<h1 id=\"关于对话框\"><a href=\"#关于对话框\" class=\"headerlink\" title=\"关于对话框\"></a>关于对话框</h1><hr>\n<ul>\n<li>是在继承于MainWindow(主窗口)的类构造函数里<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;QMainWindow&quot;//继承与主窗口</span><br><span class=\"line\">#include &lt;QMenuBar&gt;</span><br><span class=\"line\">#include &lt;Menu&gt;</span><br><span class=\"line\">#include &lt;QAction&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\">#include &lt;QMessageBox&gt;//对话框的头文件</span><br><span class=\"line\">#include &lt;QFileDialog&gt;//查找文件的对话框的头文件</span><br><span class=\"line\">MainWindow::MainWindow(QWinget *parent)</span><br><span class=\"line\">        :MainWindow(parent)&#123;</span><br><span class=\"line\">                QMenuBar *menub=menubar();</span><br><span class=\"line\">                QMenu *p1=menub-&gt;addmenu(&quot;文件&quot;);</span><br><span class=\"line\">                QAction *A1=p1-&gt;addaction(&quot;关于对话框&quot;);</span><br><span class=\"line\">                connect(A1,&amp;QAction::triggered,</span><br><span class=\"line\">                [=]()</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        QMessageBox ::about(this,&quot;about&quot;,&quot;关于Qt&quot;); </span><br><span class=\"line\">                        //简单的一个显示对话框</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                );</span><br><span class=\"line\">                QAction *A2=p1-&gt;addaction(&quot;问题对话框&quot;);</span><br><span class=\"line\">                connect(A2,&amp;QAction::triggered,</span><br><span class=\"line\">                [=]()</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        int val=QMessageBox::question(this,&quot;test&quot;,&quot;is ok ?&quot;,</span><br><span class=\"line\">                        QMessageBox::ok|</span><br><span class=\"line\">                        QMessageBox::Cancel);</span><br><span class=\"line\">                        //显示一个对话框，调用枚举函数来实现，显示的对话内容可以自己选择，也可以随机匹配，返回值是一个整数类型的，可以定义一个整数来接住函数的返回值，这样载利用switch来做到自己想要的效果</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                switch (val)&#123;</span><br><span class=\"line\">                        case QMessageBox::ok:</span><br><span class=\"line\">                        qDebug()&lt;&lt;&quot;i am ok&quot;;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                        case QMessageBox::Cancel:</span><br><span class=\"line\">                        qDebug()&lt;&lt;&quot;i am bad&quot;;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                        default:</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QAction *A3=p1-&gt;addaction(&quot;文件对话框&quot;);</span><br><span class=\"line\">        connect(A3,&amp;QAction::triggered,</span><br><span class=\"line\">        [=]()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                QFileDialog ::getOpenFileName(this,&quot;open&quot;,&quot;/home&quot;,</span><br><span class=\"line\">                &quot;test(*.cpp *.md);;file(*.)&quot;);</span><br><span class=\"line\">                //利用Qt函数来实现查找文件的对话框，加上筛选的效果,来显示查找文件的强大性</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt4_duihua.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt5_duihua.png\" alt=\"运行结果\"></p>\n<h1 id=\"ui\"><a href=\"#ui\" class=\"headerlink\" title=\"ui\"></a>ui</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt6_ui.png\" alt=\"这些是在ui模式下操作的\"></p>\n<blockquote>\n<p><strong>布局</strong></p>\n</blockquote>\n<hr>\n<p><strong>局部布局和全局布局,</strong></p>\n<h2 id=\"一样是在ui的模式下进行的，因为这样比较简单而且实际。\"><a href=\"#一样是在ui的模式下进行的，因为这样比较简单而且实际。\" class=\"headerlink\" title=\"一样是在ui的模式下进行的，因为这样比较简单而且实际。\"></a><strong>一样是在ui的模式下进行的，因为这样比较简单而且实际。</strong></h2><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt7_ui.png\" alt=\"运行结果\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt8_ui.png\" alt=\"运行结果\"></p>\n<h2 id=\"布局最好在ui模式，因为简单！！！\"><a href=\"#布局最好在ui模式，因为简单！！！\" class=\"headerlink\" title=\"布局最好在ui模式，因为简单！！！\"></a><strong>布局最好在ui模式，因为简单！！！</strong></h2><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt9_ui.png\" alt=\"简单的登录方式\"></p>\n<h1 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h1><p><strong>接下的操作是在ui的模式下完成的，并继承于Mainwindow</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#inlcude &quot;MainWindow.h&quot;</span><br><span class=\"line\">#include &lt;ui_mainwindow.h&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;//打印的头文件</span><br><span class=\"line\">#include &lt;QStringList&gt;</span><br><span class=\"line\">#include &lt;QCompleter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::MainWindow(QWidget *parent):QMainwindow(parent)&#123;</span><br><span class=\"line\">        ui-&gt;setupUi(this);</span><br><span class=\"line\">        //在ui的模式下添加LineEdit(行编辑)</span><br><span class=\"line\">        QString str=ui-&gt;LineEdit-&gt;text();//获取一行里的内容</span><br><span class=\"line\">        qDebug&lt;&lt;str;//打印</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setText(&quot;123456&quot;);//设置内容</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setTextMargins(10,0,0,0);//更改方度(左,右,上,下)</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setEchomode(QLineEdit::psaaword);//把内容设置为密码的模式</span><br><span class=\"line\">        QStringLest cin;//声明字符串</span><br><span class=\"line\">        cin&lt;&lt;&quot;hello&quot;&lt;&lt;&quot;how are you&quot;&lt;&lt;&quot;Hehe&quot;;//定义字符串</span><br><span class=\"line\">        QCompleter *com=new QCompleter (cin,this);//把字符串放进模型里</span><br><span class=\"line\">        com-&gt;setCaseSensitivity(Qt::CaseInsensitive);//把模型设置成不区分大小写</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setCompleter(com);//把模型加进行编辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>1 方箱模型<br>2 前景和背景<br>3 控制大小<br>4 创建缩放式<br>5 处理伪状态<br><strong>关键字(setStyleSheet)</strong></p>\n<ul>\n<li><p>创建的是Widget，是在ui的模式下添加了一个label和PushButton。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .cpp</span><br><span class=\"line\">  ui-&gt;pushButton-&gt;setStyleSheet(&quot;QPushButton&#123;&quot;</span><br><span class=\"line\">  &quot;color:rgb(0,255,255);&quot; //设置颜色，自动调制颜色</span><br><span class=\"line\">  &quot;backgroud-color:red;&quot; //设置背景颜色</span><br><span class=\"line\">  &quot;border: 2px outset grenn;&quot;//创建缩放式(设置边框像素，输出设置，输出的颜色)</span><br><span class=\"line\">  &quot;border-image:url(:/new/prefix1/头像.jpg);&quot;//设置成相片，</span><br><span class=\"line\"> &quot;&#125;&quot;</span><br><span class=\"line\">        &quot;QPushButton:hover&#123;&quot;//当鼠标抬起就更换照片</span><br><span class=\"line\">        &quot;border-image:url(:/new/prefix1/test.jpg)&quot;</span><br><span class=\"line\">        &quot;&#125;&quot;</span><br><span class=\"line\">        &quot;QPushButton:pressed&#123;&quot;//当鼠标按下就更换照片</span><br><span class=\"line\">        &quot;border-image:url(:/new/prefix1/test1.jpg)&quot;</span><br><span class=\"line\">        &quot;&#125;&quot;</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>border (平铺的方式) </p>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt10_ui.png\" alt=\"运行结果\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt11_ui.png\" alt=\"方箱模型\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt12_ui.png\" alt=\"伪状态\"></p>\n<h1 id=\"Event-事件\"><a href=\"#Event-事件\" class=\"headerlink\" title=\"Event(事件)\"></a>Event(事件)</h1><h2 id=\"事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。\"><a href=\"#事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。\" class=\"headerlink\" title=\"事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。\"></a><strong>事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里是在ui的模式下添加了label，然后又添加了新文件，最后在ui里把label提升为槽函数而实现的。</span><br><span class=\"line\">// .h</span><br><span class=\"line\">#include &lt;QLabel&gt;</span><br><span class=\"line\">class Mylabel : public Qlabel&#123;</span><br><span class=\"line\">        protected://保护的(重写事件里的虚函数)</span><br><span class=\"line\">        //鼠标按下</span><br><span class=\"line\">        void mousePressEvent(QMouseEvent *ev);</span><br><span class=\"line\">        //鼠标抬起</span><br><span class=\"line\">        void mouseReleaseEvent(QMouseEvent *ev);</span><br><span class=\"line\">        //鼠标移动</span><br><span class=\"line\">        void mouseMoveEvent(QMouseEvent *ev);</span><br><span class=\"line\">        //鼠标在里面</span><br><span class=\"line\">        void enterEvent(QEvent *);</span><br><span class=\"line\">        //鼠标在外面</span><br><span class=\"line\">        void leaveEvent(QEvent *);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// .cpp</span><br><span class=\"line\">#include &quot;Mylabel.h&quot;</span><br><span class=\"line\">#include &lt;MouseEvent&gt;//事件的头文件</span><br><span class=\"line\">#include &lt;QDebug&gt; //打印</span><br><span class=\"line\">Mylabel::Mylabel(QWidget *parent):QLabel(parent)&#123;</span><br><span class=\"line\">        //设置追踪鼠标(设置了鼠标追踪就会在程序里自动追踪鼠标，没有设置的话，你还得在窗口里点一下才能出来数据)</span><br><span class=\"line\">        this-&gt;setMouseTracking(true);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::mousePressEvent(QMouseEvent *ev)&#123;</span><br><span class=\"line\">        int i=ev-&gt;x();//x的坐标</span><br><span class=\"line\">        int j=ev-&gt;y();//y的坐标</span><br><span class=\"line\">QSting str=QString (&quot;&lt;center&gt;&lt;h1&gt;mouse press:(%1,%2)&lt;/h1&gt;&lt;/center&gt;&quot;)</span><br><span class=\"line\">.arg(i).arg(j);</span><br><span class=\"line\">// 语法(参数是字符) (center(字体加粗))</span><br><span class=\"line\">this-&gt;setText(str);//设置</span><br><span class=\"line\">if(ev-&gt;Button()==Qt::LefeButton)&#123;//判断鼠标按钮在左边，右边，中间</span><br><span class=\"line\">        qDebug()&lt;&lt;&quot;left&quot;;</span><br><span class=\"line\">&#125;else if(ev-&gt;Button()==Qt::RightNutton)&#123;</span><br><span class=\"line\">        qDebug()&lt;&lt;&quot;right&quot;;</span><br><span class=\"line\">&#125;else if(ev-&gt;Button()==Qt::MidButton)&#123;</span><br><span class=\"line\">        qDebug()&lt;&lt;&quot;wid&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::mouseReleaseEvent(QMouseEvent *ev)&#123;</span><br><span class=\"line\">QSting str=QString (&quot;&lt;center&gt;&lt;h1&gt;mouse press:(%1,%2)&lt;/h1&gt;&lt;/center&gt;&quot;)</span><br><span class=\"line\">.arg(ev-&gt;x()).arg(ev-&gt;y());</span><br><span class=\"line\">this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::mouseMoveEvent(QMouseEvent *ev)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">QSting str=QString (&quot;&lt;center&gt;&lt;h1&gt;mouse move:(%1,%2)&lt;/h1&gt;&lt;/center&gt;&quot;)</span><br><span class=\"line\">.arg(ev-&gt;x()).arg(ev-&gt;y());</span><br><span class=\"line\">this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::enterEvent(QEvent *e)&#123;</span><br><span class=\"line\">        QString str=QString(&quot;&lt;center&gt;&lt;h1&gt;Event:enter&lt;/h1&gt;&lt;/center&gt;&quot;);</span><br><span class=\"line\">        this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mtlabel::lavceEvent(QEvent *e)&#123;</span><br><span class=\"line\">        QString str=QString(&quot;&lt;center&gt;&lt;h1&gt;Event:leave&lt;/h1&gt;&lt;.center&gt;&quot;);</span><br><span class=\"line\">        this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent1.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent2.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent3.png\" alt=\"运行结果\"></p>\n<blockquote>\n<p>时间的处理与忽略</p>\n<ul>\n<li>继承于widget的前提下，简写。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .h</span><br><span class=\"line\">void closeEvent (QEvent *event);//关闭事件</span><br><span class=\"line\">// .cpp</span><br><span class=\"line\">#include &quot;Widget.h&quot;</span><br><span class=\"line\">#include &lt;QMessageBox&gt;//对话框头文件</span><br><span class=\"line\">void Widget::closeEvent(QEvent *event)&#123;</span><br><span class=\"line\">        int test=QMessageBox::question(this , &quot;question&quot;,&quot;sure?&quot;,</span><br><span class=\"line\">        QMessageBox::Yes |</span><br><span class=\"line\">        QMessageBox::No);</span><br><span class=\"line\">        if(test==QMessageBox::Yes)&#123;</span><br><span class=\"line\">                event-&gt;accept();//处理</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">                event-&gt;ignore();//忽略</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent4.png\" alt=\"运行结果\"></p>\n<h1 id=\"绘画\"><a href=\"#绘画\" class=\"headerlink\" title=\"绘画\"></a>绘画</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEventpainter1.png\" alt=\"运行的程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEventpainter2.png\" alt=\"运行的结果\"></p>\n<h1 id=\"绘图设备\"><a href=\"#绘图设备\" class=\"headerlink\" title=\"绘图设备\"></a>绘图设备</h1><ul>\n<li>Pixmap(在平台上不能对图片进行修改)</li>\n<li>Image(和平台无关平台上，可以对图片进行修改)</li>\n<li>picture(保存绘图的状态，以二进制的文件进行保存)</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_pixmap.png\" alt=\"pixmap\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_image.png\" alt=\"image\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_picture1.png\" alt=\"picture\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_picture.png\" alt=\"picture\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_picture2.png\" alt=\"[icture]\"></p>\n<h2 id=\"其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。\"><a href=\"#其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。\" class=\"headerlink\" title=\"其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。\"></a><strong>其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。</strong></h2><blockquote>\n<p>QPixmap&amp;&amp;QImage</p>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtzhuan.png\" alt></p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_zhuan1.png\" alt></h2><h1 id=\"不规则的窗口\"><a href=\"#不规则的窗口\" class=\"headerlink\" title=\"不规则的窗口\"></a>不规则的窗口</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_paint.png\" alt=\"程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_paint1.png\" alt=\"结果\"></p>\n<h2 id=\"绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备-this-。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画-QPixmap-保存的是图片-QImage-保存的是图片-Qpicture-保存的是二进制文件-，save-保存-load-加载-，Rect-矩形-。\"><a href=\"#绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备-this-。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画-QPixmap-保存的是图片-QImage-保存的是图片-Qpicture-保存的是二进制文件-，save-保存-load-加载-，Rect-矩形-。\" class=\"headerlink\" title=\"绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备(this)。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画(QPixmap(保存的是图片),QImage(保存的是图片),Qpicture(保存的是二进制文件))，save(保存),load(加载)，Rect(矩形)。\"></a><strong>绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备(this)。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画(QPixmap(保存的是图片),QImage(保存的是图片),Qpicture(保存的是二进制文件))，save(保存),load(加载)，Rect(矩形)。</strong></h2><h1 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h1><p><strong>不管在那个语言上，文件的操作都有一定的重要性，所以就把它学好。</strong></p>\n<ul>\n<li>普通的形式写读文件()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用到的头文件</span><br><span class=\"line\">#include &lt;QFile&gt;</span><br><span class=\"line\">#include &lt;QFileDialg&gt;</span><br><span class=\"line\">#include &lt;QFileInfo&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtFILE.png\" alt><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qtreadfile.png\" alt><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qtwritefile.png\" alt></p>\n<ul>\n<li>是以二进制的形式保存文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用到的头文件</span><br><span class=\"line\">#include &lt;QFile&gt;</span><br><span class=\"line\">#include &lt;QDatestram&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_Stream.png\" alt></p>\n<h1 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h1><h2 id=\"记得在项目文件里加-network-这是针对于在类对象里没有提示。还有就是连则表达式-CONFIG-c-11\"><a href=\"#记得在项目文件里加-network-这是针对于在类对象里没有提示。还有就是连则表达式-CONFIG-c-11\" class=\"headerlink\" title=\"记得在项目文件里加(network),这是针对于在类对象里没有提示。还有就是连则表达式(CONFIG+=c++11)\"></a><strong>记得在项目文件里加(network),这是针对于在类对象里没有提示。还有就是连则表达式(CONFIG+=c++11)</strong></h2><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_server.png\" alt></p>\n<h2 id=\"写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。\"><a href=\"#写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。\" class=\"headerlink\" title=\"写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。\"></a><strong>写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用到的头文件</span><br><span class=\"line\">#include &lt;QTcpServer&gt;</span><br><span class=\"line\">#include &lt;QTcpsocket&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpserven.png\" alt=\"serven\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpserven1.png\" alt=\"server\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpserven2.png\" alt=\"客户端\"><br><strong>其实在上面的刚开始的第一张图就很清晰的讲到了tcp的连接过程，只要我们真的理解了就能看的明白。在这里也没什么好解释的，有很多的函数都是在函数里订好了的，只要我们搞清楚什么时候调用什么函数就行了。</strong></p>\n<blockquote>\n<p>UDP</p>\n<ul>\n<li>它是面向无连接的通信，所以在这里就只需要通信的套接字(socket)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用到的头文件</span><br><span class=\"line\">#include &lt;QUdpSocket&gt; //.h(不要忘记在.h文件里声明socket套接字)</span><br><span class=\"line\">#include &lt;QHostAddress&gt;// .cpp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_udp1.png\" alt=\"程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_udp2.png\" alt=\"程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_udp.png\" alt=\"运行结果\"></p>\n<h1 id=\"tcpfile\"><a href=\"#tcpfile\" class=\"headerlink\" title=\"tcpfile\"></a>tcpfile</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpfile.png\" alt=\"流程图\"></p>\n<h2 id=\"值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。\"><a href=\"#值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。\" class=\"headerlink\" title=\"值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。\"></a><strong>值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。</strong></h2><h1 id=\"QThread\"><a href=\"#QThread\" class=\"headerlink\" title=\"QThread\"></a>QThread</h1><h2 id=\"connect的第五个参数的意义-默认，队列，直接-默认的时候：分为多线程-默认使用队列-和单线程-默认使用直接-。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。\"><a href=\"#connect的第五个参数的意义-默认，队列，直接-默认的时候：分为多线程-默认使用队列-和单线程-默认使用直接-。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。\" class=\"headerlink\" title=\"connect的第五个参数的意义(默认，队列，直接)默认的时候：分为多线程(默认使用队列)和单线程(默认使用直接)。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。 \"></a><strong>connect的第五个参数的意义(默认，队列，直接)默认的时候：分为多线程(默认使用队列)和单线程(默认使用直接)。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。</strong> </h2>","site":{"data":{}},"excerpt":"<pre><code>QT\n</code></pre>","more":"<h1 id=\"Qt\"><a href=\"#Qt\" class=\"headerlink\" title=\"Qt\"></a>Qt</h1><h2 id=\"图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。\"><a href=\"#图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。\" class=\"headerlink\" title=\"图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。\"></a><em>图形化界面–GUI。这个工具对于程序员的开发是便利的，特别是开发用户的图形化界面，在Linux里也是用到了qt的。</em></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QApplication&gt;//使用qt的头文件</span><br><span class=\"line\">#include &lt;QWidget&gt;//窗口控制基类</span><br><span class=\"line\">#include &lt;QPushButton&gt;//指定父对象的头文件</span><br><span class=\"line\">int main(int argc,char *argv[])&#123;</span><br><span class=\"line\">        QApplication  a(argc,argv);</span><br><span class=\"line\">        My_widget w;</span><br><span class=\"line\">        w.setwindowTitle(&quot;主要看气质&quot;);//文件头名</span><br><span class=\"line\">        QPushButton b;//声明按钮的类     </span><br><span class=\"line\">        b.setParent(&amp;w);//让按钮放在父对象的函数</span><br><span class=\"line\">        b.setText(&quot;删除&quot;);//声明按钮,并赋值</span><br><span class=\"line\">        b.move(100,100);//移动按钮</span><br><span class=\"line\">        QPushButton b1(&amp;w);//使用按钮构造函数并指向父对象</span><br><span class=\"line\">        b1.setText(&quot;确认&quot;);//声明按钮,并赋值</span><br><span class=\"line\">        b1.move(200,200);//移动按钮</span><br><span class=\"line\">        w.show();//输出函数</span><br><span class=\"line\">        return app.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt1.png\" alt=\"运行结果\"></p>\n<p><strong>值得注意下的就是，如果不给按钮对象指向父对象，两个窗口是独立的。还有上面是用了两种方式来指向父对象，一个是用函数setParent(),另外一个是用构造函数来指向。</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QApplication&gt;</span><br><span class=\"line\">#include &lt;QWidget&gt;</span><br><span class=\"line\">#include &lt;QLabel&gt;</span><br><span class=\"line\">int main(int argc,char *argv[])&#123;</span><br><span class=\"line\">            QApplication a(argc,argv);</span><br><span class=\"line\">            QLabel label(&quot;Hello&quot;);</span><br><span class=\"line\">            return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt2_hello.png\" alt=\"运行结果\"></p>\n<p><strong>上面的代码有点不好，但要是一定要这样的话，那在main函数里面的代码是很多的。这样让别人看起来就有点不好的感觉。</strong><br><strong>QPushButton–是按钮，QWidget–是窗口</strong></p>\n<ul>\n<li>signals–信号(类似与广播，发出信号，如果有对它有意思的，就有connect连接，来把它连接在一起)</li>\n<li>connect–连接(意思是，用自己的函数(成为槽(solt))来处理这个信号)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//练练手，长长记性</span><br><span class=\"line\">//main函数里面的头文件</span><br><span class=\"line\">#include &lt;QApplication&gt;</span><br><span class=\"line\">#include &lt;QPushButton&gt;</span><br><span class=\"line\">#include &quot;My_Widget.h&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">//是以公有的方式继承了窗口化的类,.h文件</span><br><span class=\"line\">#include &quot;sud.h&quot;</span><br><span class=\"line\">class My_Widget:public Widget&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">        My_Widget(QWidget *parent =nullptr);</span><br><span class=\"line\">        ~My_Widget();</span><br><span class=\"line\">        void showb2();</span><br><span class=\"line\">        void showwid();</span><br><span class=\"line\">        void showxin();</span><br><span class=\"line\">private:</span><br><span class=\"line\">        QPushButton b1;</span><br><span class=\"line\">        QPushButton *b2;</span><br><span class=\"line\">        QPushButton b3;</span><br><span class=\"line\">        sud s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//.cpp文件</span><br><span class=\"line\">#include &quot;My_Widget.h&quot;</span><br><span class=\"line\">My_Widget::MyWidget(QWidget *parent =nullptr):QWidget(parent)&#123;</span><br><span class=\"line\">        b1.setParent(this);</span><br><span class=\"line\">        b1.setText(&quot;^_^&quot;);</span><br><span class=\"line\">        b1.move(100,100);</span><br><span class=\"line\">        b2=new QPushButton (this);</span><br><span class=\"line\">        b2-&gt;setText(&quot;abc&quot;);</span><br><span class=\"line\">        connect(&amp;b1,&amp;QPushButton::released,this,&amp;QPushButton::close);</span><br><span class=\"line\">        connect(b2,&amp;QPushButton::released,this,&amp;My_Widget::show);</span><br><span class=\"line\">        s.show();</span><br><span class=\"line\">        this-&gt;setWindowTitle(&quot;老大&quot;);</span><br><span class=\"line\">        b3.setParent(this);</span><br><span class=\"line\">        b3.setText(&quot;切换子窗口&quot;);</span><br><span class=\"line\">        connect(&amp;b3,&amp;QPushButton::released,this,My_Widget::showwid);</span><br><span class=\"line\">        connect(&amp;s,&amp;sud::xin,this,&amp;My_Widget::showxin);//接收信号并处理信号</span><br><span class=\"line\">        resize(400,300);</span><br><span class=\"line\">        //当信号发出时，被连接的槽函数会被回调用来处理信号发出的操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void My_Widget::showb2()&#123;</span><br><span class=\"line\">        b2-&gt;setText(&quot;123&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void My_Widget::showwid()&#123;</span><br><span class=\"line\">        s.show();</span><br><span class=\"line\">        this-&gt;hide();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void My_Widget::showxin&#123;</span><br><span class=\"line\">        this-&gt;show();</span><br><span class=\"line\">        s.hide();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//是以公有的方式继承My_Widget类的派生类</span><br><span class=\"line\">#include &lt;QWidget&gt;</span><br><span class=\"line\">#include &lt;QPushButton&gt;</span><br><span class=\"line\">class sud : public My_Widget&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">        explicit*** sud(QWidget *parent =nullptr)</span><br><span class=\"line\">        void showwid();//用来发射信号的函数</span><br><span class=\"line\">signals:</span><br><span class=\"line\">        void xin();//信号</span><br><span class=\"line\">private:</span><br><span class=\"line\">        QPushButton b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void sud::sud(QWidget *parent):QWidget(parent)&#123;</span><br><span class=\"line\">        this-&gt;setWindowTitle(&quot;小弟&quot;);</span><br><span class=\"line\">        b.setParent(this);</span><br><span class=\"line\">        b.setText(&quot;切换父窗口&quot;);</span><br><span class=\"line\">        connect(&amp;b,QPushButton::clicked,this,&amp;sud::showwid);//发送信号的</span><br><span class=\"line\">        resize(400,300);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void sud::showwid()&#123;</span><br><span class=\"line\">        emit xin();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc,char *argv[] )&#123;</span><br><span class=\"line\">        QApplication a(argc,argv);</span><br><span class=\"line\">        My_Widget w;</span><br><span class=\"line\">        w.show();</span><br><span class=\"line\">        return a.exec();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h1><ul>\n<li>槽</li>\n</ul>\n<ol>\n<li>任意的成员函数，普通全局函数，静态函数</li>\n<li>槽函数需要与信号一样(返回值和参数)由于信号没有返回值，所以槽函数也没有返回值</li>\n</ol>\n<ul>\n<li>信号</li>\n</ul>\n<ol>\n<li>信号必须有关键字signals</li>\n<li>信号没有返回值，是个函数,可以有参数</li>\n<li>信号只有声明，无需为信号定义</li>\n<li>使用的方法:使用关键字emit来调用</li>\n</ol>\n<ul>\n<li><p>按钮只是回调了槽函数，而窗口的所有改动都是该窗口改变的，和按钮是没什么关联的。</p>\n</li>\n<li><p>内存</p>\n</li>\n</ul>\n<ol>\n<li>指定父对象后,直接或间接的继承于Q0bject</li>\n<li>子对象如果动态分配空间(new)，不需要手动释放(delete)，系统会自动调用析构函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;QMenuBar&gt;//菜单栏</span><br><span class=\"line\">#include &lt;QMenu&gt;//菜单</span><br><span class=\"line\">#include &lt;QAction&gt;//控件</span><br><span class=\"line\">#include &lt;QToolBar&gt;//快捷键</span><br><span class=\"line\">#include &lt;QDebug&gt;//打印</span><br><span class=\"line\">#include &lt;QStatusBar&gt;//状态栏</span><br><span class=\"line\">#include &lt;QLabel&gt;//标签</span><br><span class=\"line\">#include &lt;QTextEdit&gt;//核心控件</span><br><span class=\"line\">#include &lt;QDockWidget&gt;//浮动窗口</span><br><span class=\"line\">* 创建菜单栏和一些控件</span><br><span class=\"line\">* 以下的代码是在构造函数的里面的，主要是懒得写了。</span><br><span class=\"line\">        QMenuBar *mbar=menuBar();//声明一个菜单栏</span><br><span class=\"line\">        Qmenu *f1=mbar-&gt;addAction(文件);//在菜单栏里写一个以文件为名的控件</span><br><span class=\"line\">        QAction *p1=f1-&gt;addAction(&quot;新建&quot;);//在文件里写一个以新建为名的控件</span><br><span class=\"line\">        connect(p1,&amp;QAction::triggered,//槽函数</span><br><span class=\"line\">        []()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                qDebug()&lt;&lt;&quot;新建被按下&quot;;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        f1-&gt;addSeparator();//分割线</span><br><span class=\"line\">        QAction *p1_2=f1-&gt;addAction(&quot;打开&quot;);//同上</span><br><span class=\"line\">        Qmenu *f2=mbar-&gt;addAction(&quot;编辑&quot;);</span><br><span class=\"line\">        QAction *p2=f2-&gt;addAction(&quot;编辑&quot;);</span><br><span class=\"line\">        connect(p2,&amp;QAction::triggered,</span><br><span class=\"line\">        []()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                qDebug()&lt;&lt;&quot;编辑被按下&quot;;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        QStatusBar *sbar=statusBar();//状态栏，声明状态栏</span><br><span class=\"line\">        QLabel *label= new QLabel (this);//声明标签</span><br><span class=\"line\">        sbar -&gt;addAction(new QLabel(&quot;2&quot;,this));//以从左往右的方式显示2</span><br><span class=\"line\">        sbar-&gt; addPermanentWidget(new QLabel(&quot;3&quot;,this));</span><br><span class=\"line\">        //以从右忘左的方式显示3</span><br><span class=\"line\">        QTextEdit *text=new QTextEdit(this);//核心控件，也就是文件编辑的地方</span><br><span class=\"line\">        setCentralWidget(text);</span><br><span class=\"line\">        QDockWidget *dock=new QDockWidget(this);//浮动窗口</span><br><span class=\"line\">        addDockWidget(Qt::LeftDockWidget,dock);//在左边显示</span><br><span class=\"line\">        QTextWidget *text1=new QTextWidget(this);//声明编辑</span><br><span class=\"line\">        dock-&gt;setWidget(text1);//在浮动窗口里显示文件编辑的地方</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt3_caidan.png\" alt=\"运行结果\"></p>\n<h1 id=\"关于对话框\"><a href=\"#关于对话框\" class=\"headerlink\" title=\"关于对话框\"></a>关于对话框</h1><hr>\n<ul>\n<li>是在继承于MainWindow(主窗口)的类构造函数里<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;QMainWindow&quot;//继承与主窗口</span><br><span class=\"line\">#include &lt;QMenuBar&gt;</span><br><span class=\"line\">#include &lt;Menu&gt;</span><br><span class=\"line\">#include &lt;QAction&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;</span><br><span class=\"line\">#include &lt;QMessageBox&gt;//对话框的头文件</span><br><span class=\"line\">#include &lt;QFileDialog&gt;//查找文件的对话框的头文件</span><br><span class=\"line\">MainWindow::MainWindow(QWinget *parent)</span><br><span class=\"line\">        :MainWindow(parent)&#123;</span><br><span class=\"line\">                QMenuBar *menub=menubar();</span><br><span class=\"line\">                QMenu *p1=menub-&gt;addmenu(&quot;文件&quot;);</span><br><span class=\"line\">                QAction *A1=p1-&gt;addaction(&quot;关于对话框&quot;);</span><br><span class=\"line\">                connect(A1,&amp;QAction::triggered,</span><br><span class=\"line\">                [=]()</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        QMessageBox ::about(this,&quot;about&quot;,&quot;关于Qt&quot;); </span><br><span class=\"line\">                        //简单的一个显示对话框</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                );</span><br><span class=\"line\">                QAction *A2=p1-&gt;addaction(&quot;问题对话框&quot;);</span><br><span class=\"line\">                connect(A2,&amp;QAction::triggered,</span><br><span class=\"line\">                [=]()</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                        int val=QMessageBox::question(this,&quot;test&quot;,&quot;is ok ?&quot;,</span><br><span class=\"line\">                        QMessageBox::ok|</span><br><span class=\"line\">                        QMessageBox::Cancel);</span><br><span class=\"line\">                        //显示一个对话框，调用枚举函数来实现，显示的对话内容可以自己选择，也可以随机匹配，返回值是一个整数类型的，可以定义一个整数来接住函数的返回值，这样载利用switch来做到自己想要的效果</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                switch (val)&#123;</span><br><span class=\"line\">                        case QMessageBox::ok:</span><br><span class=\"line\">                        qDebug()&lt;&lt;&quot;i am ok&quot;;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                        case QMessageBox::Cancel:</span><br><span class=\"line\">                        qDebug()&lt;&lt;&quot;i am bad&quot;;</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                        default:</span><br><span class=\"line\">                        break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        QAction *A3=p1-&gt;addaction(&quot;文件对话框&quot;);</span><br><span class=\"line\">        connect(A3,&amp;QAction::triggered,</span><br><span class=\"line\">        [=]()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                QFileDialog ::getOpenFileName(this,&quot;open&quot;,&quot;/home&quot;,</span><br><span class=\"line\">                &quot;test(*.cpp *.md);;file(*.)&quot;);</span><br><span class=\"line\">                //利用Qt函数来实现查找文件的对话框，加上筛选的效果,来显示查找文件的强大性</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        );</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt4_duihua.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt5_duihua.png\" alt=\"运行结果\"></p>\n<h1 id=\"ui\"><a href=\"#ui\" class=\"headerlink\" title=\"ui\"></a>ui</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt6_ui.png\" alt=\"这些是在ui模式下操作的\"></p>\n<blockquote>\n<p><strong>布局</strong></p>\n</blockquote>\n<hr>\n<p><strong>局部布局和全局布局,</strong></p>\n<h2 id=\"一样是在ui的模式下进行的，因为这样比较简单而且实际。\"><a href=\"#一样是在ui的模式下进行的，因为这样比较简单而且实际。\" class=\"headerlink\" title=\"一样是在ui的模式下进行的，因为这样比较简单而且实际。\"></a><strong>一样是在ui的模式下进行的，因为这样比较简单而且实际。</strong></h2><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt7_ui.png\" alt=\"运行结果\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt8_ui.png\" alt=\"运行结果\"></p>\n<h2 id=\"布局最好在ui模式，因为简单！！！\"><a href=\"#布局最好在ui模式，因为简单！！！\" class=\"headerlink\" title=\"布局最好在ui模式，因为简单！！！\"></a><strong>布局最好在ui模式，因为简单！！！</strong></h2><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt9_ui.png\" alt=\"简单的登录方式\"></p>\n<h1 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h1><p><strong>接下的操作是在ui的模式下完成的，并继承于Mainwindow</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#inlcude &quot;MainWindow.h&quot;</span><br><span class=\"line\">#include &lt;ui_mainwindow.h&gt;</span><br><span class=\"line\">#include &lt;QDebug&gt;//打印的头文件</span><br><span class=\"line\">#include &lt;QStringList&gt;</span><br><span class=\"line\">#include &lt;QCompleter&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">MainWindow::MainWindow(QWidget *parent):QMainwindow(parent)&#123;</span><br><span class=\"line\">        ui-&gt;setupUi(this);</span><br><span class=\"line\">        //在ui的模式下添加LineEdit(行编辑)</span><br><span class=\"line\">        QString str=ui-&gt;LineEdit-&gt;text();//获取一行里的内容</span><br><span class=\"line\">        qDebug&lt;&lt;str;//打印</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setText(&quot;123456&quot;);//设置内容</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setTextMargins(10,0,0,0);//更改方度(左,右,上,下)</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setEchomode(QLineEdit::psaaword);//把内容设置为密码的模式</span><br><span class=\"line\">        QStringLest cin;//声明字符串</span><br><span class=\"line\">        cin&lt;&lt;&quot;hello&quot;&lt;&lt;&quot;how are you&quot;&lt;&lt;&quot;Hehe&quot;;//定义字符串</span><br><span class=\"line\">        QCompleter *com=new QCompleter (cin,this);//把字符串放进模型里</span><br><span class=\"line\">        com-&gt;setCaseSensitivity(Qt::CaseInsensitive);//把模型设置成不区分大小写</span><br><span class=\"line\">        ui-&gt;LineEdit-&gt;setCompleter(com);//把模型加进行编辑</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"样式\"><a href=\"#样式\" class=\"headerlink\" title=\"样式\"></a>样式</h1><p>1 方箱模型<br>2 前景和背景<br>3 控制大小<br>4 创建缩放式<br>5 处理伪状态<br><strong>关键字(setStyleSheet)</strong></p>\n<ul>\n<li><p>创建的是Widget，是在ui的模式下添加了一个label和PushButton。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .cpp</span><br><span class=\"line\">  ui-&gt;pushButton-&gt;setStyleSheet(&quot;QPushButton&#123;&quot;</span><br><span class=\"line\">  &quot;color:rgb(0,255,255);&quot; //设置颜色，自动调制颜色</span><br><span class=\"line\">  &quot;backgroud-color:red;&quot; //设置背景颜色</span><br><span class=\"line\">  &quot;border: 2px outset grenn;&quot;//创建缩放式(设置边框像素，输出设置，输出的颜色)</span><br><span class=\"line\">  &quot;border-image:url(:/new/prefix1/头像.jpg);&quot;//设置成相片，</span><br><span class=\"line\"> &quot;&#125;&quot;</span><br><span class=\"line\">        &quot;QPushButton:hover&#123;&quot;//当鼠标抬起就更换照片</span><br><span class=\"line\">        &quot;border-image:url(:/new/prefix1/test.jpg)&quot;</span><br><span class=\"line\">        &quot;&#125;&quot;</span><br><span class=\"line\">        &quot;QPushButton:pressed&#123;&quot;//当鼠标按下就更换照片</span><br><span class=\"line\">        &quot;border-image:url(:/new/prefix1/test1.jpg)&quot;</span><br><span class=\"line\">        &quot;&#125;&quot;</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>border (平铺的方式) </p>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt10_ui.png\" alt=\"运行结果\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt11_ui.png\" alt=\"方箱模型\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt12_ui.png\" alt=\"伪状态\"></p>\n<h1 id=\"Event-事件\"><a href=\"#Event-事件\" class=\"headerlink\" title=\"Event(事件)\"></a>Event(事件)</h1><h2 id=\"事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。\"><a href=\"#事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。\" class=\"headerlink\" title=\"事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。\"></a><strong>事件，也可以说是中断。就好比你在说话的时候，有一个人在你旁边也在跟你说事情，你得停下来先听他说完，这也可以说是那个人说话的时候中断了你说话，在Qt里有专门处理中断的函数，但它还得先判断你的中断是那种类型的，它再来处理中断的事件。</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这里是在ui的模式下添加了label，然后又添加了新文件，最后在ui里把label提升为槽函数而实现的。</span><br><span class=\"line\">// .h</span><br><span class=\"line\">#include &lt;QLabel&gt;</span><br><span class=\"line\">class Mylabel : public Qlabel&#123;</span><br><span class=\"line\">        protected://保护的(重写事件里的虚函数)</span><br><span class=\"line\">        //鼠标按下</span><br><span class=\"line\">        void mousePressEvent(QMouseEvent *ev);</span><br><span class=\"line\">        //鼠标抬起</span><br><span class=\"line\">        void mouseReleaseEvent(QMouseEvent *ev);</span><br><span class=\"line\">        //鼠标移动</span><br><span class=\"line\">        void mouseMoveEvent(QMouseEvent *ev);</span><br><span class=\"line\">        //鼠标在里面</span><br><span class=\"line\">        void enterEvent(QEvent *);</span><br><span class=\"line\">        //鼠标在外面</span><br><span class=\"line\">        void leaveEvent(QEvent *);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// .cpp</span><br><span class=\"line\">#include &quot;Mylabel.h&quot;</span><br><span class=\"line\">#include &lt;MouseEvent&gt;//事件的头文件</span><br><span class=\"line\">#include &lt;QDebug&gt; //打印</span><br><span class=\"line\">Mylabel::Mylabel(QWidget *parent):QLabel(parent)&#123;</span><br><span class=\"line\">        //设置追踪鼠标(设置了鼠标追踪就会在程序里自动追踪鼠标，没有设置的话，你还得在窗口里点一下才能出来数据)</span><br><span class=\"line\">        this-&gt;setMouseTracking(true);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::mousePressEvent(QMouseEvent *ev)&#123;</span><br><span class=\"line\">        int i=ev-&gt;x();//x的坐标</span><br><span class=\"line\">        int j=ev-&gt;y();//y的坐标</span><br><span class=\"line\">QSting str=QString (&quot;&lt;center&gt;&lt;h1&gt;mouse press:(%1,%2)&lt;/h1&gt;&lt;/center&gt;&quot;)</span><br><span class=\"line\">.arg(i).arg(j);</span><br><span class=\"line\">// 语法(参数是字符) (center(字体加粗))</span><br><span class=\"line\">this-&gt;setText(str);//设置</span><br><span class=\"line\">if(ev-&gt;Button()==Qt::LefeButton)&#123;//判断鼠标按钮在左边，右边，中间</span><br><span class=\"line\">        qDebug()&lt;&lt;&quot;left&quot;;</span><br><span class=\"line\">&#125;else if(ev-&gt;Button()==Qt::RightNutton)&#123;</span><br><span class=\"line\">        qDebug()&lt;&lt;&quot;right&quot;;</span><br><span class=\"line\">&#125;else if(ev-&gt;Button()==Qt::MidButton)&#123;</span><br><span class=\"line\">        qDebug()&lt;&lt;&quot;wid&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::mouseReleaseEvent(QMouseEvent *ev)&#123;</span><br><span class=\"line\">QSting str=QString (&quot;&lt;center&gt;&lt;h1&gt;mouse press:(%1,%2)&lt;/h1&gt;&lt;/center&gt;&quot;)</span><br><span class=\"line\">.arg(ev-&gt;x()).arg(ev-&gt;y());</span><br><span class=\"line\">this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::mouseMoveEvent(QMouseEvent *ev)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">QSting str=QString (&quot;&lt;center&gt;&lt;h1&gt;mouse move:(%1,%2)&lt;/h1&gt;&lt;/center&gt;&quot;)</span><br><span class=\"line\">.arg(ev-&gt;x()).arg(ev-&gt;y());</span><br><span class=\"line\">this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mylabel::enterEvent(QEvent *e)&#123;</span><br><span class=\"line\">        QString str=QString(&quot;&lt;center&gt;&lt;h1&gt;Event:enter&lt;/h1&gt;&lt;/center&gt;&quot;);</span><br><span class=\"line\">        this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void Mtlabel::lavceEvent(QEvent *e)&#123;</span><br><span class=\"line\">        QString str=QString(&quot;&lt;center&gt;&lt;h1&gt;Event:leave&lt;/h1&gt;&lt;.center&gt;&quot;);</span><br><span class=\"line\">        this-&gt;setText(str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent1.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent2.png\" alt=\"运行结果\"></p>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent3.png\" alt=\"运行结果\"></p>\n<blockquote>\n<p>时间的处理与忽略</p>\n<ul>\n<li>继承于widget的前提下，简写。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .h</span><br><span class=\"line\">void closeEvent (QEvent *event);//关闭事件</span><br><span class=\"line\">// .cpp</span><br><span class=\"line\">#include &quot;Widget.h&quot;</span><br><span class=\"line\">#include &lt;QMessageBox&gt;//对话框头文件</span><br><span class=\"line\">void Widget::closeEvent(QEvent *event)&#123;</span><br><span class=\"line\">        int test=QMessageBox::question(this , &quot;question&quot;,&quot;sure?&quot;,</span><br><span class=\"line\">        QMessageBox::Yes |</span><br><span class=\"line\">        QMessageBox::No);</span><br><span class=\"line\">        if(test==QMessageBox::Yes)&#123;</span><br><span class=\"line\">                event-&gt;accept();//处理</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">                event-&gt;ignore();//忽略</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEvent4.png\" alt=\"运行结果\"></p>\n<h1 id=\"绘画\"><a href=\"#绘画\" class=\"headerlink\" title=\"绘画\"></a>绘画</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEventpainter1.png\" alt=\"运行的程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qtEventpainter2.png\" alt=\"运行的结果\"></p>\n<h1 id=\"绘图设备\"><a href=\"#绘图设备\" class=\"headerlink\" title=\"绘图设备\"></a>绘图设备</h1><ul>\n<li>Pixmap(在平台上不能对图片进行修改)</li>\n<li>Image(和平台无关平台上，可以对图片进行修改)</li>\n<li>picture(保存绘图的状态，以二进制的文件进行保存)</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_pixmap.png\" alt=\"pixmap\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_image.png\" alt=\"image\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_picture1.png\" alt=\"picture\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_picture.png\" alt=\"picture\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_picture2.png\" alt=\"[icture]\"></p>\n<h2 id=\"其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。\"><a href=\"#其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。\" class=\"headerlink\" title=\"其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。\"></a><strong>其实在写这些代码的时候遇到的问题挺多的，明明讲的和我写的是一样的，但我文件管理器就是没有图片，弄得我挺自闭的，换一种方式定义画家就解决了。</strong></h2><blockquote>\n<p>QPixmap&amp;&amp;QImage</p>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtzhuan.png\" alt></p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_zhuan1.png\" alt></h2><h1 id=\"不规则的窗口\"><a href=\"#不规则的窗口\" class=\"headerlink\" title=\"不规则的窗口\"></a>不规则的窗口</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_paint.png\" alt=\"程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_paint1.png\" alt=\"结果\"></p>\n<h2 id=\"绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备-this-。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画-QPixmap-保存的是图片-QImage-保存的是图片-Qpicture-保存的是二进制文件-，save-保存-load-加载-，Rect-矩形-。\"><a href=\"#绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备-this-。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画-QPixmap-保存的是图片-QImage-保存的是图片-Qpicture-保存的是二进制文件-，save-保存-load-加载-，Rect-矩形-。\" class=\"headerlink\" title=\"绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备(this)。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画(QPixmap(保存的是图片),QImage(保存的是图片),Qpicture(保存的是二进制文件))，save(保存),load(加载)，Rect(矩形)。\"></a><strong>绘画。我们一般都是在窗口上。而关于怎么样进行绘画，我们是选择重写绘画事件来完成绘画的，一般来说都是先定义画家，然后再选择绘画的设备(this)。我们也不一定就在窗口上绘画，在软件里还有三种设备可以让我们在上面绘画(QPixmap(保存的是图片),QImage(保存的是图片),Qpicture(保存的是二进制文件))，save(保存),load(加载)，Rect(矩形)。</strong></h2><h1 id=\"File\"><a href=\"#File\" class=\"headerlink\" title=\"File\"></a>File</h1><p><strong>不管在那个语言上，文件的操作都有一定的重要性，所以就把它学好。</strong></p>\n<ul>\n<li>普通的形式写读文件()</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用到的头文件</span><br><span class=\"line\">#include &lt;QFile&gt;</span><br><span class=\"line\">#include &lt;QFileDialg&gt;</span><br><span class=\"line\">#include &lt;QFileInfo&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qtFILE.png\" alt><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qtreadfile.png\" alt><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qtwritefile.png\" alt></p>\n<ul>\n<li>是以二进制的形式保存文件<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用到的头文件</span><br><span class=\"line\">#include &lt;QFile&gt;</span><br><span class=\"line\">#include &lt;QDatestram&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_Stream.png\" alt></p>\n<h1 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h1><h2 id=\"记得在项目文件里加-network-这是针对于在类对象里没有提示。还有就是连则表达式-CONFIG-c-11\"><a href=\"#记得在项目文件里加-network-这是针对于在类对象里没有提示。还有就是连则表达式-CONFIG-c-11\" class=\"headerlink\" title=\"记得在项目文件里加(network),这是针对于在类对象里没有提示。还有就是连则表达式(CONFIG+=c++11)\"></a><strong>记得在项目文件里加(network),这是针对于在类对象里没有提示。还有就是连则表达式(CONFIG+=c++11)</strong></h2><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_server.png\" alt></p>\n<h2 id=\"写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。\"><a href=\"#写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。\" class=\"headerlink\" title=\"写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。\"></a><strong>写代码最重要的是逻辑要清晰，时刻的知道自己在写什么，所以，软件怎样运行我们是一定要搞清楚的。</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用到的头文件</span><br><span class=\"line\">#include &lt;QTcpServer&gt;</span><br><span class=\"line\">#include &lt;QTcpsocket&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpserven.png\" alt=\"serven\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpserven1.png\" alt=\"server\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpserven2.png\" alt=\"客户端\"><br><strong>其实在上面的刚开始的第一张图就很清晰的讲到了tcp的连接过程，只要我们真的理解了就能看的明白。在这里也没什么好解释的，有很多的函数都是在函数里订好了的，只要我们搞清楚什么时候调用什么函数就行了。</strong></p>\n<blockquote>\n<p>UDP</p>\n<ul>\n<li>它是面向无连接的通信，所以在这里就只需要通信的套接字(socket)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 用到的头文件</span><br><span class=\"line\">#include &lt;QUdpSocket&gt; //.h(不要忘记在.h文件里声明socket套接字)</span><br><span class=\"line\">#include &lt;QHostAddress&gt;// .cpp</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_udp1.png\" alt=\"程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_udp2.png\" alt=\"程序\"><br><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_udp.png\" alt=\"运行结果\"></p>\n<h1 id=\"tcpfile\"><a href=\"#tcpfile\" class=\"headerlink\" title=\"tcpfile\"></a>tcpfile</h1><p><img src=\"//EvanShady.github.io/2019/08/05/qt/qt_tcpfile.png\" alt=\"流程图\"></p>\n<h2 id=\"值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。\"><a href=\"#值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。\" class=\"headerlink\" title=\"值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。\"></a><strong>值得注意的是，tcp在发组的时候，头文件的信息和数据是一起跟着发过去的，所以我们在这里要用定时器来缓一下时间，让它先发头文件，后发数据。这样一来我们的头文件信息和数据就不会搞混，还有就是tcp发包是不会丢失的。</strong></h2><h1 id=\"QThread\"><a href=\"#QThread\" class=\"headerlink\" title=\"QThread\"></a>QThread</h1><h2 id=\"connect的第五个参数的意义-默认，队列，直接-默认的时候：分为多线程-默认使用队列-和单线程-默认使用直接-。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。\"><a href=\"#connect的第五个参数的意义-默认，队列，直接-默认的时候：分为多线程-默认使用队列-和单线程-默认使用直接-。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。\" class=\"headerlink\" title=\"connect的第五个参数的意义(默认，队列，直接)默认的时候：分为多线程(默认使用队列)和单线程(默认使用直接)。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。 \"></a><strong>connect的第五个参数的意义(默认，队列，直接)默认的时候：分为多线程(默认使用队列)和单线程(默认使用直接)。队列：槽函数所在的线程和接收者一样。直接：槽函数所在的线程和发送者一样。</strong> </h2>"}],"PostAsset":[{"_id":"source/_posts/a/a0.png","slug":"a0.png","post":"ck2lt9pgh0003goz7vkzpsn5p","modified":0,"renderable":0},{"_id":"source/_posts/i3/228568.jpg","slug":"228568.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/608422.jpg","slug":"608422.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/927682.jpg","slug":"927682.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/mysql/mysql1.png","slug":"mysql1.png","post":"ck2lt9ph0000fgoz7fubbbsfu","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_tcpserven.png","slug":"qt_tcpserven.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/i3/41912.jpg","slug":"41912.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/mysql/mysql4.png","slug":"mysql4.png","post":"ck2lt9ph0000fgoz7fubbbsfu","modified":0,"renderable":0},{"_id":"source/_posts/Class/Lpur2.png","slug":"Lpur2.png","post":"ck2lt9pgb0000goz7zznoap4f","modified":0,"renderable":0},{"_id":"source/_posts/Code/Code1.png","slug":"Code1.png","post":"ck2lt9pgf0001goz7wbztdj30","modified":0,"renderable":0},{"_id":"source/_posts/Noteslinux1/chattr.png","slug":"chattr.png","post":"ck2lt9pgk0005goz7spzusjka","modified":0,"renderable":0},{"_id":"source/_posts/file/file.png","slug":"file.png","post":"ck2lt9pgv000dgoz7qwzyjtgz","modified":0,"renderable":0},{"_id":"source/_posts/file/file1.png","slug":"file1.png","post":"ck2lt9pgv000dgoz7qwzyjtgz","modified":0,"renderable":0},{"_id":"source/_posts/C-Book/c-Book.png","slug":"c-Book.png","post":"ck2lt9pgs000bgoz7tr5cbwlo","modified":0,"renderable":0},{"_id":"source/_posts/C-Book/c-Book1.png","slug":"c-Book1.png","post":"ck2lt9pgs000bgoz7tr5cbwlo","modified":0,"renderable":0},{"_id":"source/_posts/C-Book/c-Book2.png","slug":"c-Book2.png","post":"ck2lt9pgs000bgoz7tr5cbwlo","modified":0,"renderable":0},{"_id":"source/_posts/C-Book/c-Book3.png","slug":"c-Book3.png","post":"ck2lt9pgs000bgoz7tr5cbwlo","modified":0,"renderable":0},{"_id":"source/_posts/C-Book/c-Book4.png","slug":"c-Book4.png","post":"ck2lt9pgs000bgoz7tr5cbwlo","modified":0,"renderable":0},{"_id":"source/_posts/C-Book/c-Book5.png","slug":"c-Book5.png","post":"ck2lt9pgs000bgoz7tr5cbwlo","modified":0,"renderable":0},{"_id":"source/_posts/mysql/mysql0.png","slug":"mysql0.png","post":"ck2lt9ph0000fgoz7fubbbsfu","modified":0,"renderable":0},{"_id":"source/_posts/mysql/mysql2.png","slug":"mysql2.png","post":"ck2lt9ph0000fgoz7fubbbsfu","modified":0,"renderable":0},{"_id":"source/_posts/mysql/mysql3.png","slug":"mysql3.png","post":"ck2lt9ph0000fgoz7fubbbsfu","modified":0,"renderable":0},{"_id":"source/_posts/mysql/mysql5.png","slug":"mysql5.png","post":"ck2lt9ph0000fgoz7fubbbsfu","modified":0,"renderable":0},{"_id":"source/_posts/c-Notes/WC.png","slug":"WC.png","post":"ck2lt9pgl0006goz7g1oakdww","modified":0,"renderable":0},{"_id":"source/_posts/c-Notes/YC.png","slug":"YC.png","post":"ck2lt9pgl0006goz7g1oakdww","modified":0,"renderable":0},{"_id":"source/_posts/c-Notes/YC1.png","slug":"YC1.png","post":"ck2lt9pgl0006goz7g1oakdww","modified":0,"renderable":0},{"_id":"source/_posts/c-Notes/YC2.png","slug":"YC2.png","post":"ck2lt9pgl0006goz7g1oakdww","modified":0,"renderable":0},{"_id":"source/_posts/c-Notes/YC3.png","slug":"YC3.png","post":"ck2lt9pgl0006goz7g1oakdww","modified":0,"renderable":0},{"_id":"source/_posts/c-Notes/YC4.png","slug":"YC4.png","post":"ck2lt9pgl0006goz7g1oakdww","modified":0,"renderable":0},{"_id":"source/_posts/c-Notes/YC5.png","slug":"YC5.png","post":"ck2lt9pgl0006goz7g1oakdww","modified":0,"renderable":0},{"_id":"source/_posts/i3/113997.jpg","slug":"113997.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/166859.jpg","slug":"166859.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/169068.jpg","slug":"169068.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/213983.jpg","slug":"213983.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/228129.jpg","slug":"228129.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/228532.jpg","slug":"228532.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/228533.jpg","slug":"228533.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/231046.jpg","slug":"231046.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/246420.jpg","slug":"246420.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/246755.jpg","slug":"246755.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/247971.jpg","slug":"247971.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/251996.jpg","slug":"251996.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/252202.jpg","slug":"252202.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/424059.jpg","slug":"424059.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/556990.jpg","slug":"556990.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/654159.png","slug":"654159.png","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/674994.jpg","slug":"674994.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/710742.jpg","slug":"710742.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/81939.jpg","slug":"81939.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/931367.jpg","slug":"931367.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/crayon_shin_chan-002.jpg","slug":"crayon_shin_chan-002.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/test1.jpg","slug":"test1.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/test2.jpg","slug":"test2.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/test3.jpeg","slug":"test3.jpeg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/test5.jpeg","slug":"test5.jpeg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/test7.jpg","slug":"test7.jpg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/i3/头像.jpeg","slug":"头像.jpeg","post":"ck2lt9pgx000egoz77nmikiqh","modified":0,"renderable":0},{"_id":"source/_posts/test/a.jpg","slug":"a.jpg","post":"ck2lt9pk6000lgoz7eue8rjgh","modified":0,"renderable":0},{"_id":"source/_posts/tar/tar.png","slug":"tar.png","post":"ck2lt9pk1000hgoz7ktm0fwrw","modified":0,"renderable":0},{"_id":"source/_posts/tar/tar1.png","slug":"tar1.png","post":"ck2lt9pk1000hgoz7ktm0fwrw","modified":0,"renderable":0},{"_id":"source/_posts/小萝莉/sda.jpg","slug":"sda.jpg","post":"ck2lt9pk4000jgoz7moy1la1n","modified":0,"renderable":0},{"_id":"source/_posts/小萝莉/test.png","slug":"test.png","post":"ck2lt9pk4000jgoz7moy1la1n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt1.png","slug":"qt1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt10_ui.png","slug":"qt10_ui.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt11_ui.png","slug":"qt11_ui.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt12_ui.png","slug":"qt12_ui.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt2_hello.png","slug":"qt2_hello.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt3_caidan.png","slug":"qt3_caidan.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt4_duihua.png","slug":"qt4_duihua.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt5_duihua.png","slug":"qt5_duihua.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt6_ui.png","slug":"qt6_ui.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt7_ui.png","slug":"qt7_ui.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt8_ui.png","slug":"qt8_ui.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt9_ui.png","slug":"qt9_ui.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtEvent.png","slug":"qtEvent.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtEvent1.png","slug":"qtEvent1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtEvent2.png","slug":"qtEvent2.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtEvent3.png","slug":"qtEvent3.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtEvent4.png","slug":"qtEvent4.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtEventpainter1.png","slug":"qtEventpainter1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtEventpainter2.png","slug":"qtEventpainter2.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtFILE.png","slug":"qtFILE.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_Read.png","slug":"qt_Read.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_Stream.png","slug":"qt_Stream.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_image.png","slug":"qt_image.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_paint.png","slug":"qt_paint.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_paint1.png","slug":"qt_paint1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_picture.png","slug":"qt_picture.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_picture1.png","slug":"qt_picture1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_picture2.png","slug":"qt_picture2.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_pixmap.png","slug":"qt_pixmap.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_pixmap2.png","slug":"qt_pixmap2.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_server.png","slug":"qt_server.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_tcpfile.png","slug":"qt_tcpfile.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_tcpserven1.png","slug":"qt_tcpserven1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_tcpserven2.png","slug":"qt_tcpserven2.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_udp.png","slug":"qt_udp.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_udp1.png","slug":"qt_udp1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_udp2.png","slug":"qt_udp2.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qt_zhuan1.png","slug":"qt_zhuan1.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtreadfile.png","slug":"qtreadfile.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtwritefile.png","slug":"qtwritefile.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0},{"_id":"source/_posts/qt/qtzhuan.png","slug":"qtzhuan.png","post":"ck2lt9pk7000ngoz75g9hzs3n","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"ck2lt9pgg0002goz7u6nkj6n7","tag_id":"ck2lt9pgi0004goz7c6esbb8j","_id":"ck2lt9pgo0009goz7ygk0drzq"},{"post_id":"ck2lt9pgk0005goz7spzusjka","tag_id":"ck2lt9pgi0004goz7c6esbb8j","_id":"ck2lt9pgu000cgoz71kqv2y9t"},{"post_id":"ck2lt9pk5000kgoz7prj8ngsp","tag_id":"ck2lt9pk6000mgoz7n03ygmt8","_id":"ck2lt9pk8000ogoz72y1wygbl"}],"Tag":[{"name":"Test","_id":"ck2lt9pgi0004goz7c6esbb8j"},{"name":"test","_id":"ck2lt9pk6000mgoz7n03ygmt8"}]}}